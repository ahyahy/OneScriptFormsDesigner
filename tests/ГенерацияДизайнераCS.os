// Скрипт читает файлы справки в C:\444\OneScriptFormsru\ и создает *.cs файлы в каталоге C:\444\ВыгрузкаДизайнера\
// Из каталога C:\444\ВыгрузкаДизайнера\ файлы *.cs можно скопировать в каталог проекта.

Перем СтрДирективы, СтрШапка, СтрРазделОбъявленияПеременных, СтрКонструктор, СтрСвойства, СтрМетоды, СтрПодвал, СтрВыгрузкиПеречислений;
Перем СтрРазделОбъявленияПеременныхДляПеречисления, СтрСвойстваДляПеречисления, СтрМетодовСистема, СписокСтрМетодовСистема;
Перем СписокКонструкторДекомп, СписокСвойствоДекомп, СписокМетодДекомп, СписокЗамен, СкрытыеСвойства, Ф, М_СписокЦветов;
Перем ТипЛево, Сп_СвойстваОбъектаИсходногоНеСовпадающие, СтрВыгрузки, М_Событий;

Функция СтрНайтиМежду(СтрПараметр, Фрагмент1 = Неопределено, Фрагмент2 = Неопределено, ИсключитьФрагменты = Истина, БезНаложения = Истина)
	//Стр - исходная строка
	//Фрагмент1 - подстрока поиска от которой ведем поиск
	//Фрагмент2 - подстрока поиска до которой ведем поиск
	//ИсключитьФрагменты - не включать Фрагмент1 и Фрагмент2 в результат
	//БезНаложения - в результат не будут включены участки, содержащие другие найденные участки, удовлетворяющие переданным параметрам
	//функция возвращает массив строк
	Стр = СтрПараметр;
	М = Новый Массив;
	Если (Фрагмент1 <> Неопределено) и (Фрагмент2 = Неопределено) Тогда
		Позиция = Найти(Стр, Фрагмент1);
		Пока Позиция > 0 Цикл
			М.Добавить(?(ИсключитьФрагменты, Сред(Стр, Позиция + СтрДлина(Фрагмент1)), Сред(Стр, Позиция)));
			Стр = Сред(Стр, Позиция + 1);
			Позиция = Найти(Стр, Фрагмент1);
		КонецЦикла;
	ИначеЕсли (Фрагмент1 = Неопределено) и (Фрагмент2 <> Неопределено) Тогда
		Позиция = Найти(Стр, Фрагмент2);
		СуммаПозиций = Позиция;
		Пока Позиция > 0 Цикл
			М.Добавить(?(ИсключитьФрагменты, Сред(Стр, 1, СуммаПозиций - 1), Сред(Стр, 1, СуммаПозиций - 1 + СтрДлина(Фрагмент2))));
			Позиция = Найти(Сред(Стр, СуммаПозиций + 1), Фрагмент2);
			СуммаПозиций = СуммаПозиций + Позиция;
		КонецЦикла;
	ИначеЕсли (Фрагмент1 <> Неопределено) и (Фрагмент2 <> Неопределено) Тогда
		Позиция = Найти(Стр, Фрагмент1);
		Пока Позиция > 0 Цикл
			Стр2 = ?(ИсключитьФрагменты, Сред(Стр, Позиция + СтрДлина(Фрагмент1)), Сред(Стр, Позиция));
			Позиция2 = Найти(Стр2, Фрагмент2);
			СуммаПозиций2 = Позиция2;
			Пока Позиция2 > 0 Цикл
				Если БезНаложения Тогда
					Если Найти(Сред(Стр2, 1, СуммаПозиций2 - 1), Фрагмент2) = 0 Тогда
						М.Добавить("" + ?(ИсключитьФрагменты, Сред(Стр2, 1, СуммаПозиций2 - 1), Сред(Стр2, 1, СуммаПозиций2 - 1 + СтрДлина(Фрагмент2))));
					КонецЕсли;
				Иначе
					М.Добавить("" + ?(ИсключитьФрагменты, Сред(Стр2, 1, СуммаПозиций2 - 1), Сред(Стр2, 1, СуммаПозиций2 - 1 + СтрДлина(Фрагмент2))));
				КонецЕсли;
				Позиция2 = Найти(Сред(Стр2, СуммаПозиций2 + 1), Фрагмент2);
				СуммаПозиций2 = СуммаПозиций2 + Позиция2;
			КонецЦикла;
			Стр = Сред(Стр, Позиция + 1);
			Позиция = Найти(Стр, Фрагмент1);
		КонецЦикла;
	КонецЕсли;
	
	Возврат М;
КонецФункции//СтрНайтиМежду

Функция Директивы(ИмяКонтекстКлассаАнгл)
	Если ИмяКонтекстКлассаАнгл = "DataGridBoolColumn" или 
		ИмяКонтекстКлассаАнгл = "DataGridComboBoxColumnStyle" или 
		ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn" или 
		ИмяКонтекстКлассаАнгл = "DateEntry" или 
		ИмяКонтекстКлассаАнгл = "FolderBrowserDialog" или 
		ИмяКонтекстКлассаАнгл = "OpenFileDialog" или 
		ИмяКонтекстКлассаАнгл = "SaveFileDialog" или 
		ИмяКонтекстКлассаАнгл = "Timer" или 
		ИмяКонтекстКлассаАнгл = "ToolTip" Тогда
		Стр = 
		"using System.ComponentModel;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColumnHeader" или 
		ИмяКонтекстКлассаАнгл = "FileSystemWatcher" или 
		ИмяКонтекстКлассаАнгл = "MainMenu" или 
		ИмяКонтекстКлассаАнгл = "NotifyIcon" или 
		ИмяКонтекстКлассаАнгл = "StatusBarPanel" Тогда
		Стр = 
		"using System.ComponentModel;
		|using System.Drawing.Design; 
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolBarButton" Тогда
		Стр = 
		"using System.ComponentModel;
		|using System.Drawing;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColorDialog" или 
		ИмяКонтекстКлассаАнгл = "FontDialog" или 
		ИмяКонтекстКлассаАнгл = "ImageList" или 
		ИмяКонтекстКлассаАнгл = "ListViewItem" или 
		ИмяКонтекстКлассаАнгл = "ListViewSubItem" Тогда
		Стр = 
		"using System.ComponentModel;
		|using System.Drawing.Design; 
		|using System.Drawing;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "VScrollBar" или 
		ИмяКонтекстКлассаАнгл = "UserControl" или 
		ИмяКонтекстКлассаАнгл = "TreeView" или 
		ИмяКонтекстКлассаАнгл = "ToolBar" или 
		ИмяКонтекстКлассаАнгл = "TabPage" или 
		ИмяКонтекстКлассаАнгл = "Button" или 
		ИмяКонтекстКлассаАнгл = "CheckBox" или 
		ИмяКонтекстКлассаАнгл = "DataGrid" или 
		ИмяКонтекстКлассаАнгл = "DataGridTableStyle" или 
		ИмяКонтекстКлассаАнгл = "GroupBox" или 
		ИмяКонтекстКлассаАнгл = "HScrollBar" или 
		ИмяКонтекстКлассаАнгл = "Label" или 
		ИмяКонтекстКлассаАнгл = "LinkLabel" или 
		ИмяКонтекстКлассаАнгл = "NumericUpDown" или 
		ИмяКонтекстКлассаАнгл = "Panel" или 
		ИмяКонтекстКлассаАнгл = "ProgressBar" или 
		ИмяКонтекстКлассаАнгл = "PropertyGrid" или 
		ИмяКонтекстКлассаАнгл = "RadioButton" или 
		ИмяКонтекстКлассаАнгл = "Splitter" или 
		ИмяКонтекстКлассаАнгл = "StatusBar" или 
		ИмяКонтекстКлассаАнгл = "TabControl" Тогда
		Стр = 
		"using System.ComponentModel;
		|using System.Drawing.Design;
		|using System.Drawing;
		|using System.Windows.Forms;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DateTimePicker" или 
		ИмяКонтекстКлассаАнгл = "RichTextBox" или 
		ИмяКонтекстКлассаАнгл = "MonthCalendar" Тогда
		Стр = 
		"using System.ComponentModel;
		|using System.Drawing.Design;
		|using System.Drawing;
		|using System.Windows.Forms;
		|using System;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Form" Тогда
		Стр = 
		"using System.ComponentModel;
		|using System.Collections;
		|using System.Drawing.Design;
		|using System.Drawing;
		|using System.Windows.Forms;
		|using System;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListView" или 
		ИмяКонтекстКлассаАнгл = "PictureBox" или 
		ИмяКонтекстКлассаАнгл = "TextBox" Тогда
		Стр = 
		"using System.ComponentModel.Design;
		|using System.ComponentModel;
		|using System.Drawing.Design; 
		|using System.Drawing;
		|using System.Windows.Forms.Design;
		|using System.Windows.Forms;
		|using System;
		|";
		Возврат Стр;
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ComboBox" или 
		ИмяКонтекстКлассаАнгл = "ListBox" Тогда
		Стр = 
		"using System.ComponentModel.Design;
		|using System.ComponentModel;
		|using System.Drawing.Design; 
		|using System.Drawing;
		|using System.Windows.Forms.Design;
		|using System.Windows.Forms;
		|using System.Reflection;		
		|using System;
		|";
		Возврат Стр;
	Иначе
		Стр = 
		"проверь директивы
		|";
		Возврат Стр;
	КонецЕсли;
КонецФункции//Директивы(ИмяКонтекстКлассаАнгл)

Функция Шапка(Пар1, Пар2)//ИмяКонтекстКлассаАнгл, ИмяКонтекстКлассаРус
	Стр = 
	"namespace osfDesigner
	|{
	|";
	Если (Пар1 = "Button") или 
		(Пар1 = "CheckBox") или 
		(Пар1 = "ColorDialog") или 
		(Пар1 = "ColumnHeader") или 
		(Пар1 = "ComboBox") или 
		(Пар1 = "DataGrid") или 
		(Пар1 = "DataGridBoolColumn") или 
		(Пар1 = "DataGridTextBoxColumn") или 
		(Пар1 = "DataGridTableStyle") или 
		(Пар1 = "DateTimePicker") или 
		(Пар1 = "FontDialog") или 
		(Пар1 = "Form") или 
		(Пар1 = "GroupBox") или 
		(Пар1 = "HScrollBar") или 
		(Пар1 = "Label") или 
		(Пар1 = "LinkLabel") или 
		(Пар1 = "ListBox") или 
		(Пар1 = "ListViewItem") или 
		(Пар1 = "MainMenu") или 
		(Пар1 = "MonthCalendar") или 
		(Пар1 = "NumericUpDown") или 
		(Пар1 = "ProgressBar") или 
		(Пар1 = "PropertyGrid") или 
		(Пар1 = "RadioButton") или 
		(Пар1 = "Splitter") или 
		(Пар1 = "StatusBar") или 
		(Пар1 = "StatusBarPanel") или 
		(Пар1 = "TabControl") или 
		(Пар1 = "TabPage") или 
		(Пар1 = "TextBox") или 
		(Пар1 = "ToolBarButton") или 
		(Пар1 = "Timer") или 
		(Пар1 = "ToolBar") или 
		(Пар1 = "ToolTip") или 
		(Пар1 = "UserControl") или 
		(Пар1 = "VScrollBar") Тогда
		Стр = Стр + 
		"    public class " + Пар1 + " : System.Windows.Forms." + Пар1 + Символы.ПС + 
		"    {";
		Возврат Стр;
	ИначеЕсли (Пар1 = "RichTextBox") или 
			(Пар1 = "TreeView") или 
			(Пар1 = "PictureBox") или 
			(Пар1 = "ListView") или 
			(Пар1 = "Panel") Тогда
		Стр = Стр + 
		"    [Docking(DockingBehavior.Never)]
		|    public class " + Пар1 + " : System.Windows.Forms." + Пар1 + "
		|    {";
		Возврат Стр;
	ИначеЕсли Пар1 = "ListViewSubItem" Тогда
		Стр = Стр + 
		"    public class " + Пар1 + " : System.Windows.Forms.ListViewItem." + Пар1 + Символы.ПС + 
		"    {";
		Возврат Стр;
	ИначеЕсли Пар1 = "FolderBrowserDialog" или 
		Пар1 = "SaveFileDialog" или 
		Пар1 = "ImageList" или 
		Пар1 = "NotifyIcon" или 
		Пар1 = "OpenFileDialog" Тогда
		Стр = Стр + 
		"    public class " + Пар1 + " : System.Windows.Forms.Timer" + Символы.ПС + 
		"    {";
		Возврат Стр;
	ИначеЕсли Пар1 = "FileSystemWatcher" Тогда
		Стр = Стр + 
		"    public class " + Пар1 + " : System.IO." + Пар1 + Символы.ПС + 
		"    {";
		Возврат Стр;
	ИначеЕсли Пар1 = "Process" Тогда
		Стр = Стр + 
		"    public class " + Пар1 + " : System.Diagnostics." + Пар1 + Символы.ПС + 
		"    {";
		Возврат Стр;
		
		
	КонецЕсли;
	
	Возврат Стр;
КонецФункции//Шапка(Пар1, Пар2)

Функция РазделОбъявленияПеременных(ИмяФайлаЧленов, ИмяКласса)
	Стр = "";
	Если ИмяКласса = "ImageList" Тогда
		Стр = "        MyList _images = new MyList();";
		Стр = Стр + "
		|        public System.Windows.Forms.ImageList M_ImageList;";
	КонецЕсли;
	Если ИмяКласса = "MainMenu" Тогда
		Стр = "        System.Windows.Forms.Menu.MenuItemCollection _menuItems;
		|        private System.Windows.Forms.TreeView treeView;";
	КонецЕсли;
	Если ИмяКласса = "TabPage" Тогда
		Стр = "        public System.Windows.Forms.TabPage M_TabPage;";
	КонецЕсли;
	Если ИмяКласса = "ToolBarButton" Тогда
		Стр = "        public System.Windows.Forms.ToolBarButton M_ToolBarButton;";
	КонецЕсли;
	Если ИмяКласса = "TextBox" или 
		ИмяКласса = "PictureBox" или 
		ИмяКласса = "ListBox" или 
		ИмяКласса = "ListView" или 
		ИмяКласса = "ComboBox" Тогда
		Стр = "        private int tic1 = 0; // Счетчик для правильной работы смарт-тэгов.";
	КонецЕсли;
	Если ИмяКласса = "DataGridTableStyle" Тогда
		Стр = "        public System.Windows.Forms.DataGridTableStyle M_DataGridTableStyle;";
	КонецЕсли;
	
	
	
	
	Возврат Стр;
КонецФункции//РазделОбъявленияПеременных(ИмяФайлаЧленов, ИмяКласса)

Функция Конструктор(ИмяФайлаЧленов, ИмяКласса)
	Стр = "";
	Если ИмяКласса = "Button" или 
		ИмяКласса = "CheckBox" или 
		ИмяКласса = "ColorDialog" или 
		ИмяКласса = "ColumnHeader" или 
		ИмяКласса = "DataGrid" или 
		ИмяКласса = "DataGridBoolColumn" или 
		ИмяКласса = "DataGridTextBoxColumn" или 
		ИмяКласса = "DateTimePicker" или  
		ИмяКласса = "FileSystemWatcher" или 
		ИмяКласса = "FolderBrowserDialog" или 
		ИмяКласса = "FontDialog" или 
		ИмяКласса = "Form" или 
		ИмяКласса = "GroupBox" или 
		ИмяКласса = "HScrollBar" или 
		ИмяКласса = "Label" или 
		ИмяКласса = "LinkLabel" или 
		ИмяКласса = "ListView" или 
		ИмяКласса = "ListViewItem" или 
		ИмяКласса = "ListViewSubItem" или 
		ИмяКласса = "MonthCalendar" или 
		ИмяКласса = "NotifyIcon" или 
		ИмяКласса = "NumericUpDown" или 
		ИмяКласса = "OpenFileDialog" или 
		ИмяКласса = "Panel" или 
		ИмяКласса = "PictureBox" или 
		ИмяКласса = "Process" или 
		ИмяКласса = "ProgressBar" или 
		ИмяКласса = "PropertyGrid" или 
		ИмяКласса = "RadioButton" или 
		ИмяКласса = "RichTextBox" или 
		ИмяКласса = "SaveFileDialog" или 
		ИмяКласса = "Splitter" или 
		ИмяКласса = "StatusBar" или 
		ИмяКласса = "StatusBarPanel" или 
		ИмяКласса = "TabControl" или 
		ИмяКласса = "TextBox" или 
		ИмяКласса = "Timer" или 
		ИмяКласса = "ToolBar" или 
		ИмяКласса = "ToolTip" или 
		ИмяКласса = "TreeView" или 
		ИмяКласса = "UserControl" или 
		ИмяКласса = "VScrollBar" Тогда
		Стр = 
		"
		|        public " + ИмяКласса + "()
		|        {
		|        }
		|";
	ИначеЕсли ИмяКласса = "ComboBox" Тогда 
		Стр = 
		"
		|        private void ComboBox_DrawItem(object sender, DrawItemEventArgs e)
		|        {
		|            if (e.Index == -1)
		|            {
		|                return;
		|            }
		|            e.DrawBackground();
		|            e.DrawFocusRectangle();
		|            dynamic item = base.Items[e.Index];
		|            Type type = item.GetType();
		|            Color color1 = base.ForeColor;
		|            PropertyInfo propertyForeColor = type.GetProperty(""ForeColor"");
		|            Color colorForeColor = Color.Empty;
		|            if (propertyForeColor != null)
		|            {
		|                try
		|                {
		|                    colorForeColor = (Color)propertyForeColor.GetValue(Items[e.Index], (object[])null);
		|                }
		|                catch
		|                {
		|                    colorForeColor = (Color)propertyForeColor.GetValue(Items[e.Index], (object[])null);
		|                }
		|            }
		|            if ((e.State & System.Windows.Forms.DrawItemState.Disabled) == System.Windows.Forms.DrawItemState.Disabled)
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor;
		|                    }
		|                }
		|                catch
		|                {
		|                    color1 = SystemColors.GrayText;
		|                }
		|            }
		|            else if ((e.State & System.Windows.Forms.DrawItemState.Selected) == System.Windows.Forms.DrawItemState.Selected)
		|            {
		|                color1 = SystemColors.HighlightText;
		|            }
		|            else
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor;
		|                    }
		|                }
		|                catch { }
		|            }
		|            string s = """";
		|            s = ((osfDesigner.ListItemComboBox)SelectedItem).Text;
		|            e.Graphics.DrawString(s, base.Font, (System.Drawing.Brush)new System.Drawing.SolidBrush(color1), (float)e.Bounds.X, (float)e.Bounds.Y);
		|        }//
		|        
		|        public " + ИмяКласса + "()
		|        {
		|            base.DisplayMember = ""Text"";
		|            base.DrawItem += ComboBox_DrawItem;
		|        }
		|";
	ИначеЕсли ИмяКласса = "ListBox" Тогда 
		Стр = 
		"
		|        public void ListBox_DrawItem(object sender, DrawItemEventArgs e)
		|        {
		|            if (e.Index == -1)
		|            {
		|                return;
		|            }
		|            e.DrawBackground();
		|            e.DrawFocusRectangle();
		|            dynamic item = base.Items[e.Index];
		|            Type type = item.GetType();
		|            Color color1 = base.ForeColor;
		|            PropertyInfo propertyForeColor = type.GetProperty(""ForeColor"");
		|            Color colorForeColor = Color.Empty;
		|            if (propertyForeColor != null)
		|            {
		|                try
		|                {
		|                    colorForeColor = (Color)propertyForeColor.GetValue(Items[e.Index], (object[])null);
		|                }
		|                catch
		|                {
		|                    colorForeColor = (Color)propertyForeColor.GetValue(Items[e.Index], (object[])null);
		|                }
		|            }
		|
		|            if ((e.State & System.Windows.Forms.DrawItemState.Disabled) == System.Windows.Forms.DrawItemState.Disabled)
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor;
		|                    }
		|                }
		|                catch
		|                {
		|                    color1 = SystemColors.GrayText;
		|                }
		|            }
		|            else if ((e.State & System.Windows.Forms.DrawItemState.Selected) == System.Windows.Forms.DrawItemState.Selected)
		|            {
		|                color1 = SystemColors.HighlightText;
		|            }
		|            else
		|            {
		|                try
		|                {
		|                    if (!colorForeColor.IsEmpty)
		|                    {
		|                        color1 = colorForeColor;
		|                    }
		|                }
		|                catch { }
		|            }
		|            string s = item.ToString();
		|            e.Graphics.DrawString(s, base.Font, (System.Drawing.Brush)new System.Drawing.SolidBrush(color1), (float)e.Bounds.X, (float)e.Bounds.Y);
		|        }//
		|        
		|        public " + ИмяКласса + "()
		|        {
		|            base.DisplayMember = ""Text"";
		|            base.DrawItem += ListBox_DrawItem;
		|        }
		|";
	ИначеЕсли ИмяКласса = "DataGridTableStyle" Тогда 
		Стр = 
		"
		|        [Browsable(false)]
		|        public System.Windows.Forms.DataGridTableStyle OriginalObj
		|        {
		|            get { return M_DataGridTableStyle; }
		|            set { M_DataGridTableStyle = value; }
		|        }//
		|        
		|        public " + ИмяКласса + "()
		|        {
		|        }
		|";
	ИначеЕсли ИмяКласса = "ToolBarButton" Тогда 
		Стр = 
		"
		|        [Browsable(false)]
		|        public System.Windows.Forms.ToolBarButton OriginalObj
		|        {
		|            get { return M_ToolBarButton; }
		|            set { M_ToolBarButton = value; }
		|        }//
		|        
		|        public ToolBarButton() : base()
		|        {
		|        }//
		|        
		|        public " + ИмяКласса + "(string p1 = null) : base(p1)
		|        {
		|        }
		|";
	ИначеЕсли ИмяКласса = "TabPage" Тогда 
		Стр = 
		"
		|        [Browsable(false)]
		|        public System.Windows.Forms.TabPage OriginalObj
		|        {
		|            get { return M_TabPage; }
		|            set { M_TabPage = value; }
		|        }//
		|		
		|        [Browsable(false)]
		|        public new System.Windows.Forms.Control Parent
		|        {
		|            get { return M_TabPage.Parent; }
		|            set { M_TabPage.Parent = value; }
		|        }//
		|        
		|        public TabPage() : base()
		|        {
		|        }//
		|        
		|        public " + ИмяКласса + "(string p1 = null) : base(p1)
		|        {
		|        }
		|";
	ИначеЕсли ИмяКласса = "ImageList" Тогда 
		Стр = 
		"
		|        public " + ИмяКласса + "()
		|        {
		|            M_ImageList = new System.Windows.Forms.ImageList();
		|        }
		|        
		|        [Browsable(false)]
		|        public System.Windows.Forms.ImageList OriginalObj
		|        {
		|            get { return M_ImageList; }
		|            set { M_ImageList = value; }
		|        }
		|";
	ИначеЕсли ИмяКласса = "MainMenu" Тогда
		Стр = 
		"
		|        public " + ИмяКласса + "()
		|        {
		|            _menuItems = base.MenuItems;
		|            this.Tag = new System.Windows.Forms.TreeView();
		|            treeView = (System.Windows.Forms.TreeView)this.Tag;
		|        }
		|
		|        [Browsable(false)]
		|        public System.Windows.Forms.TreeView TreeView
		|        {
		|            get { return treeView; }
		|        }
		|";
	КонецЕсли;
	
	Возврат Стр;
КонецФункции//Конструктор(ИмяФайлаЧленов, ИмяКласса)

Функция Свойства(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл)
	СписокСвойствАнгл = Новый СписокЗначений;
	СписокСтрПеречислений = Новый СписокЗначений;//перечисления взятые из OneScriptForms.html
	
	ТекстДок = Новый ТекстовыйДокумент;
	ТекстДок.Прочитать("C:\444\OneScriptFormsru\OneScriptForms.html");
	Стр = ТекстДок.ПолучитьТекст();
	//находим текст таблицы
	СтрТаблица = СтрНайтиМежду(Стр, "<H3 class=dtH3>Перечисления</H3>", "</TBODY></TABLE>", Ложь,);
	Массив1 = СтрНайтиМежду(СтрТаблица[0], "<TD width=""50%""><A href", "</A></TD>", ,);
	Если Массив1.Количество() > 0 Тогда
		Для А = 0 По Массив1.ВГраница() Цикл
			СтрХ = Массив1[А];
			СтрХ = СтрЗаменить(СтрХ, "&nbsp;", " ");
			ПеречислениеАнгл = СтрНайтиМежду(СтрХ, "(", ")", ,)[0];
			СписокСтрПеречислений.Добавить(ПеречислениеАнгл);
		КонецЦикла;
	КонецЕсли;
	СтрПеречислений = "";
	СписокСтрПеречислений.СортироватьПоЗначению();
	Для А = 0 По СписокСтрПеречислений.Количество() - 1 Цикл
		Если А = (СписокСтрПеречислений.Количество() - 1) Тогда
			СтрПеречислений = СтрПеречислений + СписокСтрПеречислений.Получить(А).Значение;
		Иначе
			СтрПеречислений = СтрПеречислений + СписокСтрПеречислений.Получить(А).Значение + ",";
		КонецЕсли;
	КонецЦикла;
	
	ТекстДокЧленов = Новый ТекстовыйДокумент;
	ТекстДокЧленов.Прочитать(ИмяФайлаЧленов);
	СтрТекстДокЧленов = ТекстДокЧленов.ПолучитьТекст();
	СтрТаблицаЧленов = СтрНайтиМежду(СтрТекстДокЧленов, "<H4 class=dtH4>Свойства</H4>", "</TBODY></TABLE>", Ложь,)[0];
	Массив1 = СтрНайтиМежду(СтрТаблицаЧленов, "<TR vAlign=top>", "</TD></TR>", Ложь,);
	Если Массив1.Количество() > 0 Тогда
		Стр = "" + Символы.ПС;
		Для А = 0 По Массив1.ВГраница() Цикл
			//найдем первую ячейку строки таблицы
			М07 = СтрНайтиМежду(Массив1[А], "<TD width=""50%"">", "</TD>", Ложь,);
			СтрХ = М07[0];
			СтрХ = СтрЗаменить(СтрХ, "&nbsp;", " ");
			
			ИмяФайлаСвойства = "C:\444\OneScriptFormsru\" + СтрНайтиМежду(СтрХ, "<A href=""", """>", ,)[0];
			ТекстДокСвойства = Новый ТекстовыйДокумент;
			ТекстДокСвойства.Прочитать(ИмяФайлаСвойства);
			СтрТекстДокСвойства = ТекстДокСвойства.ПолучитьТекст();
			
			СтрРаздела = СтрНайтиМежду(СтрТекстДокСвойства, "<H4 class=dtH4>Использование</H4>", "<H4 class=dtH4>Значение</H4>", ,)[0];
			СтрИспользование = СтрНайтиМежду(СтрРаздела, "<P>", "</P>", ,)[0];

			СвойствоАнгл = СтрНайтиМежду(СтрХ, "(", ")", ,)[0];
			СвойствоРус = СтрНайтиМежду(СтрХ, ".html"">", " (", ,)[0];
			
			СписокСвойствАнгл.Добавить(СвойствоАнгл);
			
			Если СвойствоАнгл = "Tag" или 
				СвойствоАнгл = "DataSource"
			
			Тогда
				СкрытыеСвойства.Добавить(СвойствоАнгл);
			КонецЕсли;
			
			Сообщить("ИмяКонтекстКлассаАнгл = " + ИмяКонтекстКлассаАнгл + " СвойствоРус = " + СвойствоРус);
			
			// пропустим обработку некоторых свойств
			Если ((СвойствоРус = "АктивнаяФорма")) или 
				((СвойствоРус = "ВыбранноеЗначение") и (ИмяКонтекстКлассаАнгл = "ComboBox")) или 
				((СвойствоРус = "ВыбранноеЗначение") и (ИмяКонтекстКлассаАнгл = "ListBox")) или 
				((СвойствоРус = "ВыбранныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListBox")) или 
				((СвойствоРус = "ВыбранныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListView")) или 
				((СвойствоРус = "ВыбранныйПуть") и (ИмяКонтекстКлассаАнгл = "FolderBrowserDialog")) или 
				((СвойствоРус = "ВыбранныйЭлемент") и (ИмяКонтекстКлассаАнгл = "ListBox")) или 
				((СвойствоРус = "ВыпадающееМеню") и (ИмяКонтекстКлассаАнгл = "ToolBarButton")) или 
				((СвойствоРус = "ВысотаШрифта")) или 
				((СвойствоРус = "ДвойнаяБуферизация")) или 
				((СвойствоРус = "ЖирныйШрифт")) или 
				((СвойствоРус = "Значение") и (ИмяКонтекстКлассаАнгл = "UserControl")) или 
				((СвойствоРус = "ЗначениеЭлемента")) или 
				((СвойствоРус = "ИмяШрифта")) или 
				((СвойствоРус = "ИндексыВыбранных") и (ИмяКонтекстКлассаАнгл = "ListBox")) или 
				((СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "ComboBox")) или 
				((СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "DataGrid")) или 
				((СвойствоРус = "ИсточникДанных") и (ИмяКонтекстКлассаАнгл = "ListBox")) или 
				((СвойствоРус = "КлиентВысота")) или 
				((СвойствоРус = "КлиентШирина")) или 
				((СвойствоРус = "КнопкиМыши")) или 
				((СвойствоРус = "Количество")) или 
				((СвойствоРус = "КолонкаСортировки")) или 
				((СвойствоРус = "КорневойКаталог") и (ИмяКонтекстКлассаАнгл = "FolderBrowserDialog")) или 
				((СвойствоРус = "Меню") и Не(ИмяКонтекстКлассаАнгл = "Form")) или 
				((СвойствоРус = "Метка")) или 
				((СвойствоРус = "НачальнаяИнформация") и (ИмяКонтекстКлассаАнгл = "Process")) или 
				((СвойствоРус = "Описание") и (ИмяКонтекстКлассаАнгл = "FolderBrowserDialog")) или 
				((СвойствоРус = "ОтображениеЭлемента")) или 
				((СвойствоРус = "ПозицияМыши")) или 
				((СвойствоРус = "ПоказатьКнопкуНовогоКаталога") и (ИмяКонтекстКлассаАнгл = "FolderBrowserDialog")) или 
				((СвойствоРус = "ПомеченныеЭлементы") и (ИмяКонтекстКлассаАнгл = "ListView")) или 
				((СвойствоРус = "Родитель")) или 
				((СвойствоРус = "РазмерПоляАвтоПрокрутки") и (ИмяКонтекстКлассаАнгл = "PropertyGrid")) или 
				((СвойствоРус = "РазмерШрифта")) или 
				((СвойствоРус = "СостояниеОкна")) или 
				((СвойствоРус = "СтандартныйВывод") и (ИмяКонтекстКлассаАнгл = "Process")) или 
				
				((СвойствоРус = "Сценарий") и (ИмяКонтекстКлассаАнгл = "Form")) или 
				((СвойствоРус = "КонтекстноеМеню") и (ИмяКонтекстКлассаАнгл = "NotifyIcon")) или 
				((СвойствоРус = "ДвойноеНажатие") и (ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn")) или 
				
				((СвойствоРус = "Тип")) или 
				((СвойствоРус = "ЧленДанных") и (ИмяКонтекстКлассаАнгл = "DataGrid")) или 
				((СвойствоРус = "ЭлементыСетки")) или 
				((СвойствоРус = "ЭлементыУправления")) Тогда
				Продолжить;
				
				
			КонецЕсли;
				
			//сформируем ТипВозвращаемогоЗначения---------------------------------------------------------------------------------------------------------------------------------
			СтрРаздела = СтрНайтиМежду(СтрТекстДокСвойства, "<H4 class=dtH4>Значение</H4>", "<H4 class=dtH4>Примечание</H4>", ,)[0];
			СтрЗначение = СтрНайтиМежду(СтрРаздела, "<P>", "</P>", ,)[0];
			М09 = СтрНайтиМежду(СтрЗначение, "(", ")", ,);
			Если М09.Количество() > 0 Тогда
				ТипВозвращаемогоЗначения = М09[0];
			Иначе
				ТипВозвращаемогоЗначения = СтрЗаменить(СтрЗначение, "Тип: ", "");
			КонецЕсли;
			
			Описание = "";
			Если СтрНайтиМежду(СтрРаздела, "<P>", "</P>", ,).Количество() > 1 Тогда
				СтрЗначение2 = СтрНайтиМежду(СтрРаздела, "<P>", "</P>", ,)[1];
				СтрЗначение2 = СтрЗаменить(СтрЗначение2, "<B>", "");
				СтрЗначение2 = СтрЗаменить(СтрЗначение2, "&nbsp;", " ");
				СтрЗначение2 = СтрЗаменить(СтрЗначение2, "</B>", "");
				МФрагмент1 = СтрНайтиМежду(СтрЗначение2, "<", ">", Ложь,);
				Для А4 = 0 По МФрагмент1.Количество() - 1 Цикл
					СтрЗначение2 = СтрЗаменить(СтрЗначение2, МФрагмент1[А4], "");
				КонецЦикла;
				Описание = СтрЗначение2;
			КонецЕсли;
			Описание = СтрЗаменить(Описание, """", "'");
			Описание = СтрЗаменить(Описание, Символы.ПС, " ");
			
			Комментарий = "//";
			Модификатор = "new";
			ТипВозвращаемогоЗначенияЭтоПеречисление = Ложь;
			Если (ТипВозвращаемогоЗначения = "Число.") Тогда
				Если (ИмяКонтекстКлассаАнгл = "NumericUpDown") Тогда
					Если (СвойствоРус = "Увеличение") или 
						(СвойствоРус = "Значение") или 
						(СвойствоРус = "Максимум") или 
						(СвойствоРус = "Минимум") Тогда
						ТипВозвращаемогоЗначения = "decimal";
						Комментарий = "";
					Иначе
						ТипВозвращаемогоЗначения = "int";
						Комментарий = "";
					КонецЕсли;
				Иначе
					ТипВозвращаемогоЗначения = "int";
					Комментарий = "";
				КонецЕсли;
			ИначеЕсли ТипВозвращаемогоЗначения = "Строка." Тогда
				ТипВозвращаемогоЗначения = "string";
				Комментарий = "";
			ИначеЕсли ТипВозвращаемогоЗначения = "Булево." Тогда
				ТипВозвращаемогоЗначения = "bool";
				Комментарий = "";
			ИначеЕсли ТипВозвращаемогоЗначения = "Дата." Тогда
				ТипВозвращаемогоЗначения = "DateTime";
				Комментарий = "";
			ИначеЕсли СтрНайти(ТипВозвращаемогоЗначения, ";") > 0 Тогда
				ТипВозвращаемогоЗначения = "dynamic";
				
				
			ИначеЕсли ТипВозвращаемогоЗначения = "Произвольный." и (М_Событий.Найти(СвойствоРус) <> Неопределено) Тогда
				ТипВозвращаемогоЗначения = "string";
				Комментарий = "";
				
				
			ИначеЕсли ТипВозвращаемогоЗначения = "Произвольный." Тогда
				ТипВозвращаемогоЗначения = "dynamic";
			ИначеЕсли (СвойствоАнгл = "Columns") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				ТипВозвращаемогоЗначения = "ColumnHeaderCollection";
				Комментарий = "";
			ИначеЕсли (СвойствоАнгл = "CancelButton") или 
				(СвойствоАнгл = "AcceptButton") Тогда
				ТипВозвращаемогоЗначения = "System.Windows.Forms.IButtonControl";
				Комментарий = "";
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				ТипВозвращаемогоЗначения = "System.Windows.Forms.ComboBox.ObjectCollection";
				Комментарий = "";
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				ТипВозвращаемогоЗначения = "System.Windows.Forms.ListBox.ObjectCollection";
				Комментарий = "";
				
				
				
				
				
				
				
			Иначе // тип возвращаемого значения - ссылочный тип (или класс или перечисление)
				Комментарий = "";
				// если это перечисление, добавляем строки в РазделОбъявленияПеременных и в Конструктор
				// узнаем класс это или перечисление
				ИмяФайлаТипаВозвращаемогоЗначения = "C:\444\OneScriptFormsru\" + СтрНайтиМежду(СтрРаздела, "<A href=""", """>", ,)[0];
				
				ТекстДок1 = Новый ТекстовыйДокумент;
				ТекстДок1.Прочитать(ИмяФайлаТипаВозвращаемогоЗначения);
				СтрТекстДок1 = ТекстДок1.ПолучитьТекст();
				
				ИмяКлассаИлиПеречисления = СтрНайтиМежду(СтрТекстДок1, "class=dtH1>", "</H1>", ,)[0];
				Если (ИмяКонтекстКлассаАнгл = "ImageList") или (ИмяКонтекстКлассаАнгл = "MainMenu") Тогда
				
				ИначеЕсли СтрНайти(ИмяКлассаИлиПеречисления,"Перечисление") > 0 Тогда
					ТипВозвращаемогоЗначенияЭтоПеречисление = Истина;
					// Стр5 = СтрЗаменить(ИмяФайлаТипаВозвращаемогоЗначения, "C:\444\OneScriptFormsru\OneScriptForms.", "");
					// Стр5 = СтрЗаменить(Стр5, ".html", "");
					// // // СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
					// // // "        private osfDesigner." + Стр5 + " _" + СвойствоАнгл + ";";
					
					// Хвостик = "" + Символы.ПС + "        }" + Символы.ПС;
					// СтрКонструктор = СтрЗаменить(СтрКонструктор, Хвостик, "");
					
					// // // Если ИмяКонтекстКлассаАнгл = "FolderBrowserDialog" Тогда
						// // // СтрКонструктор = СтрКонструктор + Символы.ПС +
						// // // "            _" + СвойствоАнгл + " = 0;";
						// // // СтрКонструктор = СтрКонструктор + Хвостик;
					// // // Иначе
						// // // СтрКонструктор = СтрКонструктор + Символы.ПС +
						// // // "            _" + СвойствоАнгл + " = (osfDesigner." + Стр5 + ")(base." + СвойствоАнгл + ");";
						// // // СтрКонструктор = СтрКонструктор + Хвостик;
					// // // КонецЕсли;
					
				ИначеЕсли СтрНайти(ИмяКлассаИлиПеречисления,"Класс") > 0 Тогда
				Иначе
				КонецЕсли;
			КонецЕсли;
			
			//сформируем DisplayNameAttribute-------------------------------------------------------------------------------------------------------------------------------------
			DisplayNameAttribute = "//[DisplayName()]";
			//сформируем DescriptionAttribute-------------------------------------------------------------------------------------------------------------------------------------
			DescriptionAttribute = "//[Description()]";
			//сформируем CategoryAttribute-------------------------------------------------------------------------------------------------------------------------------------
			CategoryAttribute = "//[Category()]";
			//сформируем BrowsableAttribute-------------------------------------------------------------------------------------------------------------------------------------
			BrowsableAttribute = "//[Browsable()]";
			//сформируем TypeConverterAttribute-------------------------------------------------------------------------------------------------------------------------------------
			TypeConverterAttribute = "//[TypeConverter(typeof())]";
			//сформируем EditorAttribute-------------------------------------------------------------------------------------------------------------------------------------
			EditorAttribute = "//[Editor(typeof(), typeof(UITypeEditor))]";
			// [Editor(typeof(MyContentAlignmentEditor), typeof(UITypeEditor))]
			
			
			ДанныеДляДизайнера = ДанныеДляДизайнера(ТипЛево + ИмяКонтекстКлассаАнгл, СвойствоАнгл);
			// // // ДанныеДляДизайнера = Ф.ДанныеДляДизайнера(ТипЛево + ИмяКонтекстКлассаАнгл, СвойствоАнгл);
			// // // Сообщить("	ИначеЕсли КлассАнгл = """ + (ТипЛево + ИмяКонтекстКлассаАнгл) + """ и СвойствоАнгл = """ + СвойствоАнгл + """ Тогда");
			// // // Сообщить("		Стр1 = """ + ДанныеДляДизайнера + """;");
			
			М_ДанныеДляДизайнера = СтрРазделить(ДанныеДляДизайнера, "~");
			Категория = СтрЗаменить(М_ДанныеДляДизайнера[2], "Category=", "");
			ВидимостьСвойства = СтрЗаменить(М_ДанныеДляДизайнера[3], "Browsable=", "");
			Если СвойствоАнгл = "Menu" и ИмяКонтекстКлассаАнгл = "Form" Тогда
				ВидимостьСвойства = "True";
			КонецЕсли;
			Если СвойствоАнгл = "MenuItems" и ИмяКонтекстКлассаАнгл = "MainMenu" Тогда
				ВидимостьСвойства = "True";
			КонецЕсли;
			
			СвойствоЕсть = Ложь;
			Если СтрЗаменить(М_ДанныеДляДизайнера[5], "AvailabilityOfTheProperty=", "") = "1" Тогда
				СвойствоЕсть = Истина;
			КонецЕсли;

			//определим атрибут - отображаемое имя
			DisplayNameAttribute = СтрЗаменить(DisplayNameAttribute, "()", "(""" + СвойствоРус + """)");
			DisplayNameAttribute = СтрЗаменить(DisplayNameAttribute, "//", "");
			
			//определим атрибут описание
			DescriptionAttribute = СтрЗаменить(DescriptionAttribute, "()", "(""" + Описание + """)");
			DescriptionAttribute = СтрЗаменить(DescriptionAttribute, "//", "");
			
			//определим категорию свойства
			Если Категория = "" Тогда
				CategoryAttribute = СтрЗаменить(CategoryAttribute, "()", "(""Прочее"")");
			Иначе
				CategoryAttribute = СтрЗаменить(CategoryAttribute, "()", "(""" + Категория + """)");
			КонецЕсли;
			CategoryAttribute = СтрЗаменить(CategoryAttribute, "//", "");

			// определим видимость свойства
			BrowsableAttribute = СтрЗаменить(BrowsableAttribute, "()", "(""" + ВидимостьСвойства + """)");
			Если ВидимостьСвойства = "Неопределено" Тогда
				BrowsableAttribute = СтрЗаменить(BrowsableAttribute, """Неопределено""", "true");
				BrowsableAttribute = СтрЗаменить(BrowsableAttribute, "//", "");
			ИначеЕсли ВидимостьСвойства = "False" Тогда
				//тогда пропустим свойство
				Продолжить;
			ИначеЕсли ВидимостьСвойства = "True" Тогда
				BrowsableAttribute = СтрЗаменить(BrowsableAttribute, """True""", "true");
				BrowsableAttribute = СтрЗаменить(BrowsableAttribute, "//", "");
			КонецЕсли;
			
			//определим конвертер типа
			Если ТипВозвращаемогоЗначения = "bool" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyBooleanConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Size" или 
					СвойствоАнгл = "ImageSize" или 
					СвойствоАнгл = "AutoScrollMargin" или 
					СвойствоАнгл = "ButtonSize" или 
					СвойствоАнгл = "MaximumSize" или
					СвойствоАнгл = "MinimumSize" или
					СвойствоАнгл = "ItemSize" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MySizeConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "ForeColor") или 
					(СвойствоАнгл = "Color") или 
					(СвойствоАнгл = "LinkColor") или 
					(СвойствоАнгл = "VisitedLinkColor") или 
					(СвойствоАнгл = "ActiveLinkColor") или 
					(СвойствоАнгл = "CaptionBackColor") или 
					(СвойствоАнгл = "BackgroundColor") или 
					(СвойствоАнгл = "HeaderForeColor") или 
					(СвойствоАнгл = "GridLineColor") или 
					(СвойствоАнгл = "HeaderBackColor") или 
					(СвойствоАнгл = "AlternatingBackColor") или 
					(СвойствоАнгл = "TransparencyKey") или 
					(СвойствоАнгл = "BackColor") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyColorConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Cursor" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCursorConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Location" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyLocationConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "BackgroundImage" или 
					(СвойствоАнгл = "Image") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyImageConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Font" или 
				СвойствоАнгл = "HeaderFont" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyFontConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Icon" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyIconConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "BoldedDates") или 
				(СвойствоАнгл = "AnnuallyBoldedDates") или 
				(СвойствоАнгл = "MonthlyBoldedDates") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyDateCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "SelectionRange" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MySelectionRangeConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "LinkArea" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyLinkAreaConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Rectangle") и (ИмяКонтекстКлассаАнгл = "ToolBarButton") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyRectangleConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Images" или 
				СвойствоАнгл = "Nodes" или 
				СвойствоАнгл = "TabPages" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "ImageList" или 
				СвойствоАнгл = "SmallImageList" или 
				СвойствоАнгл = "LargeImageList" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyImageListConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "ImageIndex" или 
				СвойствоАнгл = "SelectedImageIndex" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyImageIndexConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Buttons" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "SubItems" Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "TableStyles") и (ИмяКонтекстКлассаАнгл = "DataGrid") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "GridColumnStyles") и (ИмяКонтекстКлассаАнгл = "DataGridTableStyle") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Columns") и (ИмяКонтекстКлассаАнгл = "DataGridTableStyle") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Columns") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Panels") и (ИмяКонтекстКлассаАнгл = "StatusBar") Тогда
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "typeof()", "typeof(MyCollectionConverter)");
				TypeConverterAttribute = СтрЗаменить(TypeConverterAttribute, "//", "");

				
				
			КонецЕсли;
			
			//определим тип исходного перечисления
			СистемныйТипПеречисления = "";
			Если (СвойствоАнгл = "TextAlign") и (ИмяКонтекстКлассаАнгл = "ToolBar") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ToolBarTextAlign";
			ИначеЕсли (СвойствоАнгл = "TextAlign") и (ИмяКонтекстКлассаАнгл = "ColumnHeader") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.HorizontalAlignment";
			ИначеЕсли (СвойствоАнгл = "TextAlign") или
				(СвойствоАнгл = "ImageAlign") Тогда
				СистемныйТипПеречисления = "System.Drawing.ContentAlignment";
			ИначеЕсли СвойствоАнгл = "FlatStyle" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.FlatStyle";
			ИначеЕсли СвойствоАнгл = "CheckAlign" Тогда
				СистемныйТипПеречисления = "System.Drawing.ContentAlignment";
			ИначеЕсли СвойствоАнгл = "SelectionMode" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.SelectionMode";
			ИначеЕсли (СвойствоАнгл = "Appearance") и (ИмяКонтекстКлассаАнгл = "TabControl") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.TabAppearance";
			ИначеЕсли (СвойствоАнгл = "Appearance") и (ИмяКонтекстКлассаАнгл = "ToolBar") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ToolBarAppearance";
			ИначеЕсли СвойствоАнгл = "Appearance" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.Appearance";
			ИначеЕсли СвойствоАнгл = "CheckState" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.CheckState";
			ИначеЕсли СвойствоАнгл = "DialogResult" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.DialogResult";
			ИначеЕсли (СвойствоАнгл = "BorderStyle") и (ИмяКонтекстКлассаАнгл = "StatusBarPanel") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.StatusBarPanelBorderStyle";
			ИначеЕсли СвойствоАнгл = "BorderStyle" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.BorderStyle";
			ИначеЕсли СвойствоАнгл = "BackgroundImageLayout" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ImageLayout";
			ИначеЕсли СвойствоАнгл = "Dock" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.DockStyle";
			ИначеЕсли СвойствоАнгл = "Anchor" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.AnchorStyles";
			ИначеЕсли СвойствоАнгл = "DrawMode" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.DrawMode";
			ИначеЕсли СвойствоАнгл = "ComboBoxStyle" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ComboBoxStyle";
			ИначеЕсли СвойствоАнгл = "DropDownStyle" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ComboBoxStyle";
			ИначеЕсли СвойствоАнгл = "DropDownAlign" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.LeftRightAlignment";
			ИначеЕсли СвойствоАнгл = "LinkBehavior" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.LinkBehavior";
			ИначеЕсли СвойствоАнгл = "Format" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.DateTimePickerFormat";
			ИначеЕсли (СвойствоАнгл = "Alignment") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ListViewAlignment";
			ИначеЕсли (СвойствоАнгл = "Alignment") и (ИмяКонтекстКлассаАнгл = "DataGridBoolColumn") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.HorizontalAlignment";
			ИначеЕсли (СвойствоАнгл = "Alignment") и (ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.HorizontalAlignment";
			ИначеЕсли СвойствоАнгл = "Alignment" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.TabAlignment";
			ИначеЕсли СвойствоАнгл = "Activation" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ItemActivation";
			ИначеЕсли СвойствоАнгл = "StartPosition" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.FormStartPosition";
			ИначеЕсли СвойствоАнгл = "WindowState" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.FormWindowState";
			ИначеЕсли СвойствоАнгл = "FormBorderStyle" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.FormBorderStyle";
			ИначеЕсли (СвойствоАнгл = "ScrollBars") и (ИмяКонтекстКлассаАнгл = "RichTextBox") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.RichTextBoxScrollBars";
			ИначеЕсли (СвойствоАнгл = "ScrollBars") и (ИмяКонтекстКлассаАнгл = "TextBox") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ScrollBars";
			ИначеЕсли СвойствоАнгл = "FirstDayOfWeek" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.Day";
			ИначеЕсли (СвойствоАнгл = "SizeMode") и (ИмяКонтекстКлассаАнгл = "PictureBox") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.PictureBoxSizeMode";
			ИначеЕсли (СвойствоАнгл = "SizeMode") и (ИмяКонтекстКлассаАнгл = "TabControl") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.TabSizeMode";
			ИначеЕсли СвойствоАнгл = "CharacterCasing" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.CharacterCasing";
			ИначеЕсли СвойствоАнгл = "Sorting" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.SortOrder";
			ИначеЕсли СвойствоАнгл = "PropertySort" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.PropertySort";
			ИначеЕсли СвойствоАнгл = "View" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.View";
			ИначеЕсли СвойствоАнгл = "HeaderStyle" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ColumnHeaderStyle";
			ИначеЕсли СвойствоАнгл = "NotifyFilter" Тогда
				СистемныйТипПеречисления = "System.IO.NotifyFilters";
			ИначеЕсли СвойствоАнгл = "Style" Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.ToolBarButtonStyle";
			ИначеЕсли (СвойствоАнгл = "AutoSize") и (ИмяКонтекстКлассаАнгл = "StatusBarPanel") Тогда
				СистемныйТипПеречисления = "System.Windows.Forms.StatusBarPanelAutoSize";
				
				
				
				
				
				
				
				
				
				
				
			КонецЕсли;
			
			//определим редактор типа
			Если (СвойствоАнгл = "TextAlign") и (ИмяКонтекстКлассаАнгл = "ToolBar") Тогда
				// пропускаем
			ИначеЕсли (СвойствоАнгл = "TextAlign") и (ИмяКонтекстКлассаАнгл = "ColumnHeader") Тогда
				// пропускаем
			ИначеЕсли (СвойствоАнгл = "TextAlign") или
				(СвойствоАнгл = "ImageAlign") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyContentAlignmentEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Dock" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyDockEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Anchor" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyAnchorEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Size" или 
					СвойствоАнгл = "ImageSize" или 
					СвойствоАнгл = "AutoScrollMargin" или 
					СвойствоАнгл = "ButtonSize" или
					СвойствоАнгл = "ItemSize" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MySizeEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "MaximumSize" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyMaximumSizeEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "MinimumSize" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyMinimumSizeEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "ForeColor") или 
					(СвойствоАнгл = "Color") или
					(СвойствоАнгл = "LinkColor") или 
					(СвойствоАнгл = "VisitedLinkColor") или 
					(СвойствоАнгл = "ActiveLinkColor") или 
					(СвойствоАнгл = "CaptionBackColor") или 
					(СвойствоАнгл = "BackgroundColor") или 
					(СвойствоАнгл = "HeaderForeColor") или 
					(СвойствоАнгл = "GridLineColor") или 
					(СвойствоАнгл = "HeaderBackColor") или 
					(СвойствоАнгл = "AlternatingBackColor") или 
					(СвойствоАнгл = "TransparencyKey") или 
					(СвойствоАнгл = "BackColor") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyColorEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Cursor" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyCursorEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Location" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyLocationEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "BackgroundImage") или 
					(СвойствоАнгл = "Image") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyImageFileNameEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Images" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Icon" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyIconEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Nodes" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyTreeNodeCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "BoldedDates") или 
				(СвойствоАнгл = "AnnuallyBoldedDates") или 
				(СвойствоАнгл = "MonthlyBoldedDates") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyDateCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "TabPages" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyTabPageCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "SelectionRange" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MySelectionRangeEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "Buttons" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyToolBarButtonCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "TableStyles" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyGridTableStylesCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли СвойствоАнгл = "GridColumnStyles" Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyGridColumnStylesCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyListViewItemCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ComboBox") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyComboBoxCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Items") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyListBoxCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "SubItems") и (ИмяКонтекстКлассаАнгл = "ListViewItem") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyListViewSubItemCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Columns") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyColumnHeaderCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "Panels") и (ИмяКонтекстКлассаАнгл = "StatusBar") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyStatusBarPanelCollectionEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "LinkArea") и (ИмяКонтекстКлассаАнгл = "LinkLabel") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyLinkAreaEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "MenuItems") и (ИмяКонтекстКлассаАнгл = "MainMenu") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyMenuItemsEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			ИначеЕсли (СвойствоАнгл = "NotifyFilter") и (ИмяКонтекстКлассаАнгл = "FileSystemWatcher") Тогда
				EditorAttribute = СтрЗаменить(EditorAttribute, "typeof()", "typeof(MyNotifyFiltersEditor)");
				EditorAttribute = СтрЗаменить(EditorAttribute, "//", "");
			
			
				
				
				
			КонецЕсли;
			
			Стр = Стр +
			"        " + Комментарий + DisplayNameAttribute + Символы.ПС;
			Стр = Стр +
			"        " + Комментарий + DescriptionAttribute + Символы.ПС;
			Стр = Стр +
			"        " + Комментарий + CategoryAttribute + Символы.ПС;
			Стр = Стр +
			"        " + Комментарий + BrowsableAttribute + Символы.ПС;
			Если Не (TypeConverterAttribute = "//[TypeConverter(typeof())]") Тогда
				Стр = Стр +
				"        " + Комментарий + TypeConverterAttribute + Символы.ПС;
			КонецЕсли;
			Если Не (EditorAttribute = "//[Editor(typeof(), typeof(UITypeEditor))]") Тогда
				Стр = Стр +
				"        " + Комментарий + EditorAttribute + Символы.ПС;
			КонецЕсли;
			
			
			//здесь можно полностью задать свойство--------------------------------------------------------------------------------------------------------------------------
			Если ((СвойствоРус = "Масштаб") и (ИмяКонтекстКлассаАнгл = "RichTextBox")) Тогда
				Стр = Стр + 
				"        public new decimal ZoomFactor
				|        {
				|            get { return Convert.ToDecimal(base.ZoomFactor); }
				|            set { base.ZoomFactor = Convert.ToSingle(value); }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли ((СвойствоРус = "Владелец") и (ИмяКонтекстКлассаАнгл = "Form")) Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.Form Owner
				|        {
				|            get { return base.Owner; }
				|            set { base.Owner = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли ((СвойствоРус = "Меню") и (ИмяКонтекстКлассаАнгл = "Form")) Тогда
				Стр = Стр + 
				"        [TypeConverter(typeof(MyFormMenuConverter))]
				|        public System.Windows.Forms.MainMenu Menu_osf
				|        {
				|            get { return base.Menu; }
				|            set { base.Menu = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли ((СвойствоРус = "СимволПароля") и (ИмяКонтекстКлассаАнгл = "TextBox")) Тогда
				Стр = Стр + 
				"        public new Char PasswordChar
				|        {
				|            get { return base.PasswordChar; }
				|            set { base.PasswordChar = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Положение" Тогда
				Стр = Стр + 
				"        public Point Location_osf
				|        {
				|            get { return base.Location; }
				|            set { base.Location = value; }
				|        }
				|				
				|        // Скроем унаследованное свойство, для того чтобы оно не мешало нашему замещающему свойству использовать свой эдитор и конвертер.
				|        [Browsable(false)]
				|        public new Point Location { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Доступность") и (ИмяКонтекстКлассаАнгл = "ToolBarButton") Тогда
				Стр = Стр + 
				"        public bool Enabled_osf
				|        {
				|            get { return M_ToolBarButton.Enabled; }
				|            set { M_ToolBarButton.Enabled = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Доступность" Тогда
				Стр = Стр + 
				"        public bool Enabled_osf { get; set; }
				|				
				|        // Скроем унаследованное свойство, для того чтобы оно не мешало нашему замещающему свойству использовать свой эдитор и конвертер.
				|        [Browsable(false)]
				|        public new bool Enabled { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				//установим в конструкторе начальное значение свойства
				Хвостик = "" + Символы.ПС + "        }" + Символы.ПС;
				СтрКонструктор = СтрЗаменить(СтрКонструктор, Хвостик, "");
				СтрКонструктор = СтрКонструктор + Символы.ПС +
				"            Enabled_osf = base.Enabled;";
				СтрКонструктор = СтрКонструктор + Хвостик;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Отображать") и (ИмяКонтекстКлассаАнгл = "ToolBarButton") Тогда
				Стр = Стр + 
				"        public bool Visible_osf
				|        {
				|            get { return M_ToolBarButton.Visible; }
				|            set { M_ToolBarButton.Visible = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Отображать") и (ИмяКонтекстКлассаАнгл <> "NotifyIcon") Тогда
				Стр = Стр + 
				"        public bool Visible_osf { get; set; }
				|				
				|        // Скроем унаследованное свойство, для того чтобы оно не мешало нашему замещающему свойству использовать свой эдитор и конвертер.
				|        [Browsable(false)]
				|        public new bool Visible { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				//установим в конструкторе начальное значение свойства
				Хвостик = "" + Символы.ПС + "        }" + Символы.ПС;
				СтрКонструктор = СтрЗаменить(СтрКонструктор, Хвостик, "");
				СтрКонструктор = СтрКонструктор + Символы.ПС +
				"            Visible_osf = base.Visible;";
				СтрКонструктор = СтрКонструктор + Хвостик;
				Продолжить;
			ИначеЕсли СвойствоРус = "ГлубинаЦвета" Тогда
				Стр = Стр + 
				"        public ColorDepth ColorDepth
				|        {
				|            get { return (ColorDepth)M_ImageList.ColorDepth; }
				|            set { M_ImageList.ColorDepth = (System.Windows.Forms.ColorDepth)value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Изображения" Тогда
				Стр = Стр + 
				"        public osfDesigner.MyList Images
				|        {
				|            get { return _images; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "РазмерИзображения" Тогда
				Стр = Стр + 
				"        public Size ImageSize
				|        {
				|            get { return M_ImageList.ImageSize; }
				|            set { M_ImageList.ImageSize = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "СписокИзображений" Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.ImageList ImageList
				|        {
				|            get { return base.ImageList; }
				|            set { base.ImageList = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "СписокБольшихИзображений" Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.ImageList LargeImageList
				|        {
				|            get { return base.LargeImageList; }
				|            set { base.LargeImageList = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "СписокМаленькихИзображений" Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.ImageList SmallImageList
				|        {
				|            get { return base.SmallImageList; }
				|            set { base.SmallImageList = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ИндексИзображения") и (ИмяКонтекстКлассаАнгл = "TabPage") Тогда
				Стр = Стр + 
				"        public new int ImageIndex
				|        {
				|            get { return M_TabPage.ImageIndex; }
				|            set { M_TabPage.ImageIndex = value; }
				|        }
				|
				|        [Browsable(false)]
				|        public System.Windows.Forms.ImageList ImageList
				|        {
				|            get { return ((System.Windows.Forms.TabControl)M_TabPage.Parent).ImageList; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ЦветФона") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        public Color BackColor_osf
				|        {
				|            get { return base.BackColor; }
				|            set { base.BackColor = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Значок") и (ИмяКонтекстКлассаАнгл = "NotifyIcon") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private MyIcon _icon;";
				Стр = Стр + 
				"        [DefaultValue(null)]
				|        public MyIcon Icon
				|        {
				|            get { return _icon; }
				|            set { _icon = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Значок" Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private MyIcon _icon;";
				Стр = Стр + 
				"        [DefaultValue(null)]
				|        public new MyIcon Icon
				|        {
				|            get { return _icon; }
				|            set
				|            {
				|                _icon = value;
				|                try
				|                {
				|                    base.Icon = _icon.M_Icon;
				|                }
				|                catch
				|                {
				|                    base.Icon = null;
				|                }
				|            }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Узлы" Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.TreeNodeCollection Nodes
				|        {
				|            get { return base.Nodes; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ВыделенныеДаты") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        MyBoldedDatesList _boldedDates = new MyBoldedDatesList();";
				Стр = Стр + 
				"        [RefreshProperties(RefreshProperties.All)]
				|        public osfDesigner.MyBoldedDatesList BoldedDates_osf
				|        {
				|            get { return _boldedDates; }
				|        }
				|
				|        [Browsable(false)]
				|        public new DateTime[] BoldedDates
				|        {
				|            get { return base.BoldedDates; }
				|            set { base.BoldedDates = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ЕжегодныеДаты") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        MyAnnuallyBoldedDatesList _annuallyBoldedDates = new MyAnnuallyBoldedDatesList();";
				Стр = Стр + 
				"        [RefreshProperties(RefreshProperties.All)]
				|        public osfDesigner.MyAnnuallyBoldedDatesList AnnuallyBoldedDates_osf
				|        {
				|            get { return _annuallyBoldedDates; }
				|        }
				|
				|        [Browsable(false)]
				|        public new DateTime[] AnnuallyBoldedDates
				|        {
				|            get { return base.AnnuallyBoldedDates; }
				|            set { base.AnnuallyBoldedDates = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ЕжемесячныеДаты") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        MyMonthlyBoldedDatesList _monthlyBoldedDates = new MyMonthlyBoldedDatesList();";
				Стр = Стр + 
				"        [RefreshProperties(RefreshProperties.All)]
				|        public osfDesigner.MyMonthlyBoldedDatesList MonthlyBoldedDates_osf
				|        {
				|            get { return _monthlyBoldedDates; }
				|        }
				|
				|        [Browsable(false)]
				|        public new DateTime[] MonthlyBoldedDates
				|        {
				|            get { return base.MonthlyBoldedDates; }
				|            set { base.MonthlyBoldedDates = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Вкладки" Тогда
				Стр = Стр + 
				"        public new TabPageCollection TabPages
				|        {
				|            get { return base.TabPages; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "ВыпадающееМеню" Тогда
				Стр = Стр + 
				"        public new ContextMenu DropDownMenu
				|        {
				|            get { return (System.Windows.Forms.ContextMenu)base.DropDownMenu; }
				|            set { base.DropDownMenu = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "МногострочныйРежим" Тогда
				Стр = Стр + 
				"        public new bool Multiline
				|        {
				|            get { return base.Multiline; }
				|            set { base.Multiline = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ПодборВысоты") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				Стр = Стр + 
				"        public bool IntegralHeight_osf
				|        {
				|            get { return base.IntegralHeight; }
				|            set { base.IntegralHeight = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "РежимОтображения") и (ИмяКонтекстКлассаАнгл = "ListView") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private osfDesigner.View _View;";
				Стр = Стр + 
				"        public View View_osf
				|        {
				|            get { return _View; }
				|            set
				|            {
				|                base.View = (System.Windows.Forms.View)value;
				|                _View = value;
				|            }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ТипСортировки") и (ИмяКонтекстКлассаАнгл = "ColumnHeader") Тогда
				Стр = Стр + 
				"        public SortType SortType { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "Изображение" Тогда
				Стр = Стр + 
				"        [DefaultValue(null)]
				|        public new Bitmap Image
				|        {
				|            get { return (Bitmap)base.Image; }
				|            set { base.Image = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли СвойствоРус = "ФоновоеИзображение" Тогда
				Стр = Стр + 
				"        [DefaultValue(null)]
				|        public new Bitmap BackgroundImage
				|        {
				|            get { return (Bitmap)base.BackgroundImage; }
				|            set { base.BackgroundImage = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Размер") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        public Size Size_osf
				|        {
				|            get { return base.Size; }
				|            set { base.Size = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "МаксимальныйРазмер") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        public Size MaximumSize_osf
				|        {
				|            get { return base.MaximumSize; }
				|            set { base.MaximumSize = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "МинимальныйРазмер") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        public Size MinimumSize_osf
				|        {
				|            get { return base.MinimumSize; }
				|            set { base.MinimumSize = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "КнопкаОтмена") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        [TypeConverter(typeof(MyButtonControlConverter))]
				|        public System.Windows.Forms.IButtonControl CancelButton_osf { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "КнопкаПринять") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        [TypeConverter(typeof(MyButtonControlConverter))]
				|        public System.Windows.Forms.IButtonControl AcceptButton_osf { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ОбластьСсылки") и (ИмяКонтекстКлассаАнгл = "LinkLabel") Тогда
				Стр = Стр + 
				"        public LinkArea LinkArea_osf
				|        {
				|            get { return base.LinkArea; }
				|            set { base.LinkArea = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "НейтральноеПоложение") и (ИмяКонтекстКлассаАнгл = "ToolBarButton") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private bool _PartialPush_osf;";
				Стр = Стр + 
				"        public  bool PartialPush_osf
				|        {
				|            get { return _PartialPush_osf; }
				|            set
				|            {
				|                M_ToolBarButton.PartialPush = value;
				|                _PartialPush_osf = value;
				|            }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Меню") и (ИмяКонтекстКлассаАнгл = "Form") Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.MainMenu Menu
				|        {
				|            get { return base.Menu; }
				|            set { base.Menu = value; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "ЭлементыМеню") и (ИмяКонтекстКлассаАнгл = "MainMenu") Тогда
				Стр = Стр + 
				"        public new System.Windows.Forms.Menu.MenuItemCollection MenuItems
				|        {
				|            get { return _menuItems; }
				|        }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			ИначеЕсли (СвойствоРус = "Стыковка") и (ИмяКонтекстКлассаАнгл = "ListBox") Тогда
				СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
				"        private osfDesigner.DockStyle _Dock;";
				Стр = Стр + 
				"        public DockStyle Dock_osf
				|        {
				|            get { return _Dock; }
				|            set
				|            {
				|                base.Dock = (System.Windows.Forms.DockStyle)value;
				|                _Dock = value;
				|            }
				|        }
				|				
				|        //скроем свойство полученное при наследовании, для того чтобы оно не мешало нашему замещающему свойству использовать свой эдитор и конвертер.
				|        [Browsable(false)]
				|        public new System.Windows.Forms.DockStyle Dock { get; set; }
				|";
				Стр = Стр + Символы.ПС;
				Продолжить;
			КонецЕсли;
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			Стр_base = "base.";
			ПолеСвойствоАнгл = СвойствоАнгл;
			Если Не СвойствоЕсть Тогда
				
				// если класс, но не перечисление
				Если Не ТипВозвращаемогоЗначенияЭтоПеречисление Тогда
					СвойствоАнгл = СвойствоАнгл + "_osf";
					Стр_base = "";
					ПолеСвойствоАнгл = "_" + СвойствоАнгл;
					//нужно добавить поле "_" + СвойствоАнгл + "_osf"
					Если ИмяКонтекстКлассаАнгл <> "NotifyIcon" Тогда
						СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
						"        private " + ТипВозвращаемогоЗначения + " " + ПолеСвойствоАнгл + ";";
						Модификатор = "";
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			//формируем свойство без get set ----------------------------------------------------------------------------------------------------------------------------------------------
			Если (ИмяКонтекстКлассаАнгл = "SaveFileDialog") или 
				(ИмяКонтекстКлассаАнгл = "NotifyIcon") или 
				(ИмяКонтекстКлассаАнгл = "OpenFileDialog") Тогда
				Модификатор = "";
			КонецЕсли;
			Стр = Стр +
			"        " + Комментарий + "public " + Модификатор + " " + ТипВозвращаемогоЗначения + " " + СвойствоАнгл;
			
			//формируем get set ----------------------------------------------------------------------------------------------------------------------------------------------
			Если СтрИспользование = "Чтение и запись." Тогда
				Если (ИмяКонтекстКлассаАнгл = "SaveFileDialog") или 
					(ИмяКонтекстКлассаАнгл = "NotifyIcon") или 
					(ИмяКонтекстКлассаАнгл = "OpenFileDialog") Тогда
					Стр = Стр + " { get; set; }";
				ИначеЕсли (ТипВозвращаемогоЗначения = "int") или
					(ТипВозвращаемогоЗначения = "decimal") или
					(ТипВозвращаемогоЗначения = "string") или
					(ТипВозвращаемогоЗначения = "bool") Тогда
					Стр = Стр + 
					"
					|        {
					|            get { return " + Стр_base + ПолеСвойствоАнгл + "; }
					|            set { " + Стр_base + ПолеСвойствоАнгл + " = value; }
					|        }";
					
					
				ИначеЕсли ТипВозвращаемогоЗначенияЭтоПеречисление Тогда
					Стр = Стр + 
					"
					|        {
					|            get { return (" + ТипВозвращаемогоЗначения + ")base." + ПолеСвойствоАнгл + "; }
					|            set { base." + ПолеСвойствоАнгл + " = (" + СистемныйТипПеречисления + ")value; }
					|        }";
				// // // ИначеЕсли ТипВозвращаемогоЗначенияЭтоПеречисление Тогда
					// // // Стр = Стр + 
					// // // "
					// // // |        {
					// // // |            get { return _" + ПолеСвойствоАнгл + "; }
					// // // |            set
					// // // |            {
					// // // |                " + Стр_base + ПолеСвойствоАнгл + " = (" + СистемныйТипПеречисления + ")value;
					// // // |                _" + ПолеСвойствоАнгл + " = value;
					// // // |            }
					// // // |        }";
				ИначеЕсли Не ТипВозвращаемогоЗначенияЭтоПеречисление Тогда
					Если ПолеСвойствоАнгл = "Image" или 
						ПолеСвойствоАнгл = "BackgroundImage" Тогда
						Стр = Стр + 
						"
						|        {
						|            get { return (Bitmap)base." + ПолеСвойствоАнгл + "; }
						|            set { base." + ПолеСвойствоАнгл + " = value; }
						|        }";
					Иначе
						Стр = Стр + 
						"
						|        {
						|            get { return base." + ПолеСвойствоАнгл + "; }
						|            set { base." + ПолеСвойствоАнгл + " = value; }
						|        }";
					КонецЕсли;
				Иначе
					Стр = Стр + " { get; set; }";
				КонецЕсли;
			Иначе//только чтение
				Если (ИмяКонтекстКлассаАнгл = "SaveFileDialog") или 
					(ИмяКонтекстКлассаАнгл = "NotifyIcon") или 
					(ИмяКонтекстКлассаАнгл = "OpenFileDialog") Тогда
					Стр = Стр + " { get; }";
				ИначеЕсли (ТипВозвращаемогоЗначения = "int") или
					(ТипВозвращаемогоЗначения = "decimal") или
					(ТипВозвращаемогоЗначения = "string") или
					(ТипВозвращаемогоЗначения = "bool") Тогда
					Стр = Стр + 
					"
					|        {
					|            get { return " + Стр_base + ПолеСвойствоАнгл + "; }
					|        }";
				ИначеЕсли ТипВозвращаемогоЗначенияЭтоПеречисление Тогда
					
				ИначеЕсли Не ТипВозвращаемогоЗначенияЭтоПеречисление Тогда
					Стр = Стр + 
					"
					|        {
					|            get { return base." + ПолеСвойствоАнгл + "; }
					|        }";
				Иначе
					Стр = Стр + " { get; }";
				КонецЕсли;
			КонецЕсли;
			
			Стр = Стр + Символы.ПС + Символы.ПС;
		КонецЦикла;
	Иначе
		Стр = 
		"" + Символы.ПС;
	КонецЕсли;
	
	
	
	
	
	Возврат Стр;
КонецФункции//Свойства(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл)

Функция Подвал()
	Стр = 
	"    }" + Символы.ПС + 
	"}" + Символы.ПС;
	Возврат Стр;
КонецФункции//Подвал()

Процедура ВыгрузкаДляCS()
	Таймер = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	// Обработаем сначала перечисления
	ВыбранныеФайлыП = Новый Массив;
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.AnchorStyles.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Appearance.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.BorderStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.CharacterCasing.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.CheckState.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ColorDepth.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ColumnHeaderStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ComboBoxStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ContentAlignment.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DataType.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Day.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DialogResult.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DockStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DrawMode.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FlatStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FormatDateTimePicker.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FormBorderStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FormStartPosition.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FormWindowState.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.HorizontalAlignment.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ImageLayout.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ItemActivation.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.LeftRightAlignment.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.LinkLabelLinkBehavior.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ListViewAlignment.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.MenuMerge.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.MouseButtons.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.NotifyFilters.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.PictureBoxSizeMode.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.PropertySort.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ScrollBars.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.SelectionMode.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Shortcut.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.SortOrder.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.SortType.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.SpecialFolder.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.StatusBarPanelAutoSize.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.StatusBarPanelBorderStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TabAlignment.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TabAppearance.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TabSizeMode.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ToolBarAppearance.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ToolBarButtonStyle.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ToolBarTextAlign.html");
	ВыбранныеФайлыП.Добавить("C:\444\OneScriptFormsru\OneScriptForms.View.html");
	
	Для А = 0 По ВыбранныеФайлыП.ВГраница() Цикл
		КлассАнглП = СтрЗаменить(ВыбранныеФайлыП[А], "C:\444\OneScriptFormsru\OneScriptForms.", "");
		КлассАнглП = СтрЗаменить(КлассАнглП, ".html", "");
		Сообщить("перечисление== " + КлассАнглП + " =========================================================================");
		Перечисления1 = Новый СписокЗначений();
		СтрВыгрузкиП = "";
		ТекстДокП = Новый ТекстовыйДокумент;
		ТекстДокП.Прочитать(ВыбранныеФайлыП[А]);
		СтрП = ТекстДокП.ПолучитьТекст();
		М50 = СтрНайтиМежду(СтрП, "<TR vAlign=top>" + Символы.ПС + "    <TD>", "</TD></TR>", Ложь,);
		Для А50 = 0 По М50.ВГраница() Цикл
			М51 = СтрНайтиМежду(М50[А50], "<TD>", "</TD>", ,);
			М_Предст = СтрНайтиМежду(М51[0], "<B>", ";", ,);
			Предст = СтрЗаменить(М_Предст[0], "&nbsp", "");
			Значен = М51[2];
			Перечисления1.Добавить(Значен, Предст);
		КонецЦикла;
		Перечисления1.СортироватьПоПредставлению();
		
		СтрВыгрузкиП = 
		"namespace osfDesigner
		|{";
		Если ВыбранныеФайлыП[А] = "C:\444\OneScriptFormsru\OneScriptForms.AnchorStyles.html" или 
			ВыбранныеФайлыП[А] = "C:\444\OneScriptFormsru\OneScriptForms.MouseButtons.html" или 
			ВыбранныеФайлыП[А] = "C:\444\OneScriptFormsru\OneScriptForms.FormatDateTimePicker.html" или 
			ВыбранныеФайлыП[А] = "C:\444\OneScriptFormsru\OneScriptForms.NotifyFilters.html" Тогда
			СтрВыгрузкиП = СтрВыгрузкиП + Символы.ПС + 
			"    [System.Flags]";
		КонецЕсли;
		СтрВыгрузкиП = СтрВыгрузкиП + Символы.ПС + 
		"    public enum " + КлассАнглП + "
		|    {";
		
		Для А52 = 0 По Перечисления1.Количество() - 1 Цикл
			Если А52 < (Перечисления1.Количество() - 1) Тогда
				СтрВыгрузкиП = СтрВыгрузкиП + Символы.ПС + 
				"        " + Перечисления1.Получить(А52).Представление + " = " + Перечисления1.Получить(А52).Значение + ",";
			Иначе
				СтрВыгрузкиП = СтрВыгрузкиП + Символы.ПС + 
				"        " + Перечисления1.Получить(А52).Представление + " = " + Перечисления1.Получить(А52).Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		СтрВыгрузкиП = СтрВыгрузкиП + 
		"    }
		|}
		|";
		
		Если КлассАнглП = "DataType" Тогда
			ПодстрокаПоиска = "Объект = 4,
			|        Строка = 0,";
			ПодстрокаЗамены = "Строка = 0,";
			СтрВыгрузкиП = СтрЗаменить(СтрВыгрузкиП, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		ИмяФайлаВыгрузкиП = "C:\444\ВыгрузкаДизайнера\" + КлассАнглП + ".cs";
		ТекстДокП.УстановитьТекст(СтрВыгрузкиП);
		ТекстДокП.Записать(ИмяФайлаВыгрузкиП);
	КонецЦикла;
	
	// Теперь обработаем компоненты
	СкрытыеСвойства = Новый СписокЗначений(); // это свойства исходного объекта, которые у него изначально скрыты для сетки свойств.
	
	ВыбранныеФайлы = Новый Массив;
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Button.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.CheckBox.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ColorDialog.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ComboBox.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DataGrid.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DataGridTableStyle.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DataGridBoolColumn.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DataGridTextBoxColumn.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.DateTimePicker.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FileSystemWatcher.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FolderBrowserDialog.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.FontDialog.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Form.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.GroupBox.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.HScrollBar.html");  
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ImageList.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Label.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.LinkLabel.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ListBox.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ListView.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ColumnHeader.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ListViewItem.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ListViewSubItem.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.MainMenu.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.MonthCalendar.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.NotifyIcon.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.NumericUpDown.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.OpenFileDialog.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Panel.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.PictureBox.html");  
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ProgressBar.html"); 
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.PropertyGrid.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.RadioButton.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.RichTextBox.html");  
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.SaveFileDialog.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Splitter.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.StatusBar.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.StatusBarPanel.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TabControl.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TabPage.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TextBox.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.Timer.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ToolBar.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ToolBarButton.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.ToolTip.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.TreeView.html");   
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.UserControl.html");
	ВыбранныеФайлы.Добавить("C:\444\OneScriptFormsru\OneScriptForms.VScrollBar.html");
	
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		
		СкрытыеСвойства.Очистить();
		
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВыбранныеФайлы[А]);
		Стр = ТекстДок.ПолучитьТекст();
		СтрЗаголовка = СтрНайтиМежду(Стр, "<H1 class=dtH1", "/H1>", ,)[0];
		М01 = СтрНайтиМежду(СтрЗаголовка, "(", ")", ,);
		Стр33 = СтрЗаголовка;
		Стр33 = СтрЗаменить(Стр33, "&nbsp;", " ");
		Стр33 = СтрЗаменить(Стр33, ">", "");
		М08 = СтрРазделить(Стр33, " ");
		ИмяФайлаВыгрузки = "C:\444\ВыгрузкаДизайнера\" + М01[0] + ".cs";
		ИмяКонтекстКлассаАнгл = М01[0];
		
		Сообщить("компонент== " + ИмяКонтекстКлассаАнгл + " ========================================================================");
		
		Если ИмяКонтекстКлассаАнгл = "Process" Тогда
			ТипЛево = "System.Diagnostics.";
		ИначеЕсли ИмяКонтекстКлассаАнгл = "FileSystemWatcher" Тогда
			ТипЛево = "System.IO.";
		ИначеЕсли ИмяКонтекстКлассаАнгл = "DataTable" Тогда
			ТипЛево = "System.Data.";
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ListViewSubItem" Тогда
			ТипЛево = "System.Windows.Forms.ListViewItem.";
		Иначе
			ТипЛево = "System.Windows.Forms.";
		КонецЕсли;
		
		Сп_СвойстваОбъектаСправкаРуАнгл = СвойстваКласса(ИмяКонтекстКлассаАнгл); // получим свойства объекта, которые указаны в нашей справке через имена и альясы в коде c# в CustomAttribute
		// // // Сп_СвойстваОбъектаСправкаРуАнгл = Ф.СвойстваКласса(ИмяКонтекстКлассаАнгл); // получим свойства объекта, которые указаны в нашей справке через имена и альясы в коде c# в CustomAttribute
		// // // Сообщить("	ИначеЕсли ИмяКонтекстКлассаАнгл = """ + ИмяКонтекстКлассаАнгл + """ Тогда");
		// // // Для А2 = 0 По Сп_СвойстваОбъектаСправкаРуАнгл.Количество - 1 Цикл
			// // // СтрокаСписка = Сп_СвойстваОбъектаСправкаРуАнгл.ПолучитьПоИндексу(А2);
			// // // Сообщить("		СортированныйСписок1.Добавить(""" + СтрокаСписка + """, """ + СтрокаСписка + """);");
		// // // КонецЦикла;
		
		Сп_СвойстваОбъектаИсходногоАнгл = СвойстваКласса(ТипЛево + ИмяКонтекстКлассаАнгл); // получим свойства исходного объекта, то есть объекта из библиотеки MSDN или других
		// // // Сп_СвойстваОбъектаИсходногоАнгл = Ф.СвойстваКласса(ТипЛево + ИмяКонтекстКлассаАнгл); // получим свойства исходного объекта, то есть объекта из библиотеки MSDN или других
		// // // Сообщить("	ИначеЕсли ИмяКонтекстКлассаАнгл = """ + (ТипЛево + ИмяКонтекстКлассаАнгл) + """ Тогда");
		// // // Для А2 = 0 По Сп_СвойстваОбъектаИсходногоАнгл.Количество - 1 Цикл
			// // // СтрокаСписка = Сп_СвойстваОбъектаИсходногоАнгл.ПолучитьПоИндексу(А2);
			// // // Сообщить("		СортированныйСписок1.Добавить(""" + СтрокаСписка + """, """ + СтрокаСписка + """);");
		// // // КонецЦикла;
		
		Сп_СвойстваОбъектаСправка = Ф.СортированныйСписок();
		Сп_СвойстваОбъектаИсходного = Ф.СортированныйСписок();
		Сп_СвойстваОбъектаСправкаСовпадающие = Ф.СортированныйСписок(); // это унаследованные свойства
		Сп_СвойстваОбъектаСправкаНеСовпадающие = Ф.СортированныйСписок(); // это нами добавленные свойства, они будут с окончанием _osf
		Сп_СвойстваОбъектаИсходногоНеСовпадающие = Ф.СортированныйСписок(); // эти свойства нужно скрыть
		
		Для А2 = 0 По Сп_СвойстваОбъектаИсходногоАнгл.Количество - 1 Цикл
			СтрокаСписка = Сп_СвойстваОбъектаИсходногоАнгл.ПолучитьПоИндексу(А2);
			Сп_СвойстваОбъектаИсходного.Добавить(СтрокаСписка, СтрокаСписка);
		КонецЦикла;
		
		Для А2 = 0 По Сп_СвойстваОбъектаСправкаРуАнгл.Количество - 1 Цикл
			СтрокаСписка = Сп_СвойстваОбъектаСправкаРуАнгл.ПолучитьПоИндексу(А2);
			Сп_СвойстваОбъектаСправка.Добавить(СтрокаСписка, СтрокаСписка);
		КонецЦикла;
		
		Для А2 = 0 По Сп_СвойстваОбъектаСправка.Количество - 1 Цикл
			СтрокаСписка = Сп_СвойстваОбъектаСправка.ПолучитьПоИндексу(А2);
			Если Сп_СвойстваОбъектаИсходного.СодержитКлюч(СтрокаСписка) Тогда
				Сп_СвойстваОбъектаСправкаСовпадающие.Добавить(СтрокаСписка, СтрокаСписка);
			Иначе
				Сп_СвойстваОбъектаСправкаНеСовпадающие.Добавить(СтрокаСписка, СтрокаСписка);
			КонецЕсли;
		КонецЦикла;
		
		Для А12555 = 0 По Сп_СвойстваОбъектаИсходного.Количество - 1 Цикл
			СтрокаСписка = Сп_СвойстваОбъектаИсходного.ПолучитьПоИндексу(А12555);
			Если Не Сп_СвойстваОбъектаСправка.СодержитКлюч(СтрокаСписка) Тогда
				Сп_СвойстваОбъектаИсходногоНеСовпадающие.Добавить(СтрокаСписка, СтрокаСписка);
			КонецЕсли;
		КонецЦикла;
		
		ИмяКонтекстКлассаРус = М08[0];
		// находим имя файла членов
		ИмяФайлаЧленов = "C:\444\OneScriptFormsru\OneScriptForms." + М01[0] + "Members.html";
		СтрДирективы = Директивы(ИмяКонтекстКлассаАнгл);
		СтрШапка = Шапка(ИмяКонтекстКлассаАнгл, ИмяКонтекстКлассаРус);
		СтрРазделОбъявленияПеременных = РазделОбъявленияПеременных(ИмяФайлаЧленов, М01[0]);
		СтрКонструктор = Конструктор(ИмяФайлаЧленов, М01[0]);
		СтрСвойства = Свойства(ИмяФайлаЧленов, ИмяКонтекстКлассаАнгл);
		СтрСкрытыеСвойства = КлассСкрытыхСвойств(ИмяКонтекстКлассаАнгл, СкрытыеСвойства, Сп_СвойстваОбъектаИсходногоНеСовпадающие);
		СтрПодвал = Подвал();
		
		СтрВыгрузки = "";
		СтрВыгрузки = СтрВыгрузки + СтрДирективы + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрШапка + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрРазделОбъявленияПеременных + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрКонструктор + Символы.ПС;
		СтрВыгрузки = СтрВыгрузки + СтрСвойства;
		СтрВыгрузки = СтрВыгрузки + СтрСкрытыеСвойства;
		СтрВыгрузки = СтрВыгрузки + СтрПодвал + Символы.ПС;
		
		//последние исправления разместил здесь для простоты кода---------------------------------------------------
		
		
		
		// ПодстрокаПоиска = "";
		// ПодстрокаЗамены = "";
		// СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		
		Если ИмяКонтекстКлассаАнгл = "ProgressBar" Тогда // создадим вертикальный Индикатор
			СтрВыгрузкиHProgressBar = СтрВыгрузки;
			СтрВыгрузкиVProgressBar = СтрВыгрузки;
			
			ПодстрокаПоиска = "public class ProgressBar : System.Windows.Forms.ProgressBar";
			ПодстрокаЗамены = "public class HProgressBar : System.Windows.Forms.ProgressBar";
			СтрВыгрузкиHProgressBar = СтрЗаменить(СтрВыгрузкиHProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = "public ProgressBar()";
			ПодстрокаЗамены = "public HProgressBar()";
			СтрВыгрузкиHProgressBar = СтрЗаменить(СтрВыгрузкиHProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);

			ПодстрокаПоиска = СтрПодвал;
			ПодстрокаЗамены = "";
			СтрВыгрузкиHProgressBar = СтрЗаменить(СтрВыгрузкиHProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			СтрВыгрузкиHProgressBar = СтрВыгрузкиHProgressBar + Символы.ПС + "    }";
			
			ПодстрокаПоиска = "public new dynamic WindowTarget { get; set; }";
			ПодстрокаЗамены = "public new dynamic WindowTarget { get; set; }
			|
            |        private System.Collections.Hashtable toolTip = new System.Collections.Hashtable();
            |        [Browsable(false)]
            |        public System.Collections.Hashtable ToolTip
            |        {
            |            get { return toolTip; }
            |            set { toolTip = value; }
            |        }
            |			
            |        [Browsable(false)]
			|        public string RequiredValues
			|        {
			|            get
			|            {
			|                return @""
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|"";
			|            }
			|        }
			|
            |        [Browsable(false)]
            |        public string DefaultValues { get; set; }";
			СтрВыгрузкиHProgressBar = СтрЗаменить(СтрВыгрузкиHProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = СтрДирективы;
			ПодстрокаЗамены = "";
			СтрВыгрузкиVProgressBar = СтрЗаменить(СтрВыгрузкиVProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			// ПодстрокаПоиска = СтрСкрытыеСвойства;
			// ПодстрокаЗамены = "";
			// СтрВыгрузкиVProgressBar = СтрЗаменить(СтрВыгрузкиVProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = "namespace osfDesigner
			|{";
			ПодстрокаЗамены = "";
			СтрВыгрузкиVProgressBar = СтрЗаменить(СтрВыгрузкиVProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = "public class ProgressBar : System.Windows.Forms.ProgressBar";
			ПодстрокаЗамены = "public class VProgressBar : System.Windows.Forms.ProgressBar";
			СтрВыгрузкиVProgressBar = СтрЗаменить(СтрВыгрузкиVProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = "public ProgressBar()
			|        {";
			ПодстрокаЗамены = "protected override System.Windows.Forms.CreateParams CreateParams
			|        {
			|            get
			|            {
			|                System.Windows.Forms.CreateParams cp = base.CreateParams;
			|                cp.Style |= 0x04;
			|                return cp;
			|            }
			|        }
			|			
			|        public VProgressBar()
			|        {
			|            Width = 23;
			|            Height = 100;";
			СтрВыгрузкиVProgressBar = СтрЗаменить(СтрВыгрузкиVProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			
			ПодстрокаПоиска = "public new dynamic WindowTarget { get; set; }";
			ПодстрокаЗамены = "public new dynamic WindowTarget { get; set; }
			|
            |        private System.Collections.Hashtable toolTip = new System.Collections.Hashtable();
            |        [Browsable(false)]
            |        public System.Collections.Hashtable ToolTip
            |        {
            |            get { return toolTip; }
            |            set { toolTip = value; }
            |        }
            |			
            |        [Browsable(false)]
			|        public string RequiredValues
			|        {
			|            get
			|            {
			|                return @""
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|"";
			|            }
			|        }
			|
            |        [Browsable(false)]
            |        public string DefaultValues { get; set; }";
			СтрВыгрузкиVProgressBar = СтрЗаменить(СтрВыгрузкиVProgressBar, ПодстрокаПоиска, ПодстрокаЗамены);
			
			СтрВыгрузки = СтрВыгрузкиHProgressBar + Символы.ПС + СтрВыгрузкиVProgressBar;
		КонецЕсли;
		
		Если ИмяКонтекстКлассаАнгл = "TabPage" Тогда
			ПодстрокаПоиска = "base.";
			ПодстрокаЗамены = "M_TabPage.";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		Если ИмяКонтекстКлассаАнгл = "ToolBarButton" Тогда
			ПодстрокаПоиска = "base.";
			ПодстрокаЗамены = "M_ToolBarButton.";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		Если ИмяКонтекстКлассаАнгл = "DataGridTableStyle" Тогда
			ПодстрокаПоиска = "base.";
			ПодстрокаЗамены = "M_DataGridTableStyle.";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		Если ИмяКонтекстКлассаАнгл = "ColumnHeader" Тогда
			ПодстрокаПоиска = "_SortType = (osfDesigner.SortType)(base.SortType);";
			ПодстрокаЗамены = "";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
			
			ПодстрокаПоиска = "private osfDesigner.SortType _SortType;";
			ПодстрокаЗамены = "";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		Если ИмяКонтекстКлассаАнгл = "PropertyGrid" Тогда
			ПодстрокаПоиска = "//[DisplayName(""ВыбранныйОбъект"")]
			|        //[Description(""Возвращает или задает объект, свойства которого отображает данная сетка."")]
			|        //[Category(""Поведение"")]
			|        //[Browsable(true)]
			|        //public new dynamic SelectedObject";
			ПодстрокаЗамены = "[DisplayName(""ВыбранныйОбъект"")]
			|        [Description(""Возвращает или задает объект, свойства которого отображает данная сетка."")]
			|        [Category(""Поведение"")]
			|        [Browsable(true)]
			|        [TypeConverter(typeof(MySelectedObjectConverter))]
			|        public new dynamic SelectedObject";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		
		
		
		
		
		
		
		
		// Обработаем смарт-тэги
		Если ИмяКонтекстКлассаАнгл = "ListView" Тогда
			ПодстрокаПоиска = СтрПодвал;
			ПодстрокаЗамены = 
			"
			|        [Browsable(false)]
			|        public new dynamic View { get; set; }
			|
			|        protected override void OnHandleCreated(EventArgs e)
			|        {
			|            base.OnHandleCreated(e);
			|            if (DesignMode)
			|            {
			|                IDesignerHost designerHost = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
			|                if (designerHost != null)
			|                {
			|                    ControlDesigner designer = (ControlDesigner)designerHost.GetDesigner(this);
			|                    if (designer != null)
			|                    {
			|                        if (tic1 < 1)
			|                        {
			|                            designer.ActionLists.Clear();
			|                            designer.ActionLists.Add(new ListViewActionList(designer));
			|                            tic1 = tic1 + 1;
			|                        }
			|                    }
			|                }
			|            }
			|        }
			|
			|        public class ListViewActionList : DesignerActionList
			|        {
			|            private ListView _control;
			|            private DesignerActionUIService designerActionUISvc = null;
			|
			|            public ListViewActionList(ControlDesigner designer) : base(designer.Component)
			|            {
			|                _control = (ListView)designer.Component;
			|                this.designerActionUISvc = GetService(typeof(DesignerActionUIService)) as DesignerActionUIService;
			|            }
			|
			|            private PropertyDescriptor GetPropertyByName(String propName)
			|            {
			|                return TypeDescriptor.GetProperties(_control)[propName];
			|            }
			|
			|            public View View_osf
			|            {
			|                get { return _control.View_osf; }
			|                set
			|                {
			|                    this.GetPropertyByName(""View_osf"").SetValue(_control, value);
			|                    this.designerActionUISvc.Refresh(this.Component);
			|                }
			|            }
			|
			|            [TypeConverter(typeof(MyImageListConverter))]
			|            public System.Windows.Forms.ImageList SmallImageList
			|            {
			|                get { return _control.SmallImageList; }
			|                set
			|                {
			|                    this.GetPropertyByName(""SmallImageList"").SetValue(_control, value);
			|                    this.designerActionUISvc.Refresh(this.Component);
			|                }
			|            }
			|
			|            [TypeConverter(typeof(MyImageListConverter))]
			|            public System.Windows.Forms.ImageList LargeImageList
			|            {
			|                get { return _control.LargeImageList; }
			|                set
			|                {
			|                    this.GetPropertyByName(""LargeImageList"").SetValue(_control, value);
			|                    this.designerActionUISvc.Refresh(this.Component);
			|                }
			|            }
			|
			|            private void EditItems()
			|            {
			|                PropertyDescriptor pd = TypeDescriptor.GetProperties(_control)[""Items""];
			|                UITypeEditor editor = (UITypeEditor)pd.GetEditor(typeof(UITypeEditor));
			|                MyRuntimeServiceProvider serviceProvider = new MyRuntimeServiceProvider(_control);
			|                object res1 = editor.EditValue(serviceProvider, serviceProvider, _control.Items);
			|                this.GetPropertyByName(""Items"").SetValue(_control, res1);
			|                this.designerActionUISvc.Refresh(this.Component);
			|            }
			|
			|            private void EditColumns()
			|            {
			|                PropertyDescriptor pd = TypeDescriptor.GetProperties(_control)[""Columns""];
			|                UITypeEditor editor = (UITypeEditor)pd.GetEditor(typeof(UITypeEditor));
			|                MyRuntimeServiceProvider serviceProvider = new MyRuntimeServiceProvider(_control);
			|                object res1 = editor.EditValue(serviceProvider, serviceProvider, _control.Columns);
			|                this.GetPropertyByName(""Columns"").SetValue(_control, res1);
			|                this.designerActionUISvc.Refresh(this.Component);
			|            }
			|
			|            public override DesignerActionItemCollection GetSortedActionItems()
			|            {
			|                var items = new DesignerActionItemCollection();
			|                items.Add(new DesignerActionMethodItem(this, ""EditItems"", ""Изменить элементы..."", """", true));
			|                items.Add(new DesignerActionMethodItem(this, ""EditColumns"", ""Изменить колонки..."", """", true));
			|
			|                items.Add(new DesignerActionPropertyItem(""View_osf"", ""Режим отображения:""));
			|                items.Add(new DesignerActionPropertyItem(""SmallImageList"", ""Список маленьких изображений:""));
			|                items.Add(new DesignerActionPropertyItem(""LargeImageList"", ""Список больших изображений:""));
			|
			|                return items;
			|            }
			|        }
			|    }
			|}
			|";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		Если ИмяКонтекстКлассаАнгл = "ListBox" Тогда
			ПодстрокаПоиска = СтрПодвал;
			ПодстрокаЗамены = 
			"
			|        protected override void OnHandleCreated(EventArgs e)
			|        {
			|            base.OnHandleCreated(e);
			|            if (DesignMode)
			|            {
			|                IDesignerHost designerHost = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
			|                if (designerHost != null)
			|                {
			|                    ControlDesigner designer = (ControlDesigner)designerHost.GetDesigner(this);
			|                    if (designer != null)
			|                    {
			|                        if (tic1 < 1)
			|                        {
			|                            designer.ActionLists.Clear();
			|                            designer.ActionLists.Add(new ListBoxActionList(designer));
			|                            tic1 = tic1 + 1;
			|                        }
			|                    }
			|                }
			|            }
			|        }
			|
			|        public class ListBoxActionList : DesignerActionList
			|        {
			|            private ListBox _control;
			|            private DesignerActionUIService designerActionUISvc = null;
			|
			|            public ListBoxActionList(ControlDesigner designer) : base(designer.Component)
			|            {
			|                _control = (ListBox)designer.Component;
			|                this.designerActionUISvc = GetService(typeof(DesignerActionUIService)) as DesignerActionUIService;
			|            }
			|
			|            private PropertyDescriptor GetPropertyByName(String propName)
			|            {
			|                return TypeDescriptor.GetProperties(_control)[propName];
			|            }
			|
			|            private void EditItems()
			|            {
			|                PropertyDescriptor pd = TypeDescriptor.GetProperties(_control)[""Items""];
			|                UITypeEditor editor = (UITypeEditor)pd.GetEditor(typeof(UITypeEditor));
			|                MyRuntimeServiceProvider serviceProvider = new MyRuntimeServiceProvider(_control);
			|                object res1 = editor.EditValue(serviceProvider, serviceProvider, _control.Items);
			|                this.GetPropertyByName(""Items"").SetValue(_control, res1);
			|                this.designerActionUISvc.Refresh(this.Component);
			|            }
			|
			|            public override DesignerActionItemCollection GetSortedActionItems()
			|            {
			|                var items = new DesignerActionItemCollection();
			|                items.Add(new DesignerActionMethodItem(this, ""EditItems"", ""Изменить элементы..."", """", true));
			|                return items;
			|            }
			|        }
			|    }
			|}
			|";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		Если ИмяКонтекстКлассаАнгл = "PictureBox" Тогда
			ПодстрокаПоиска = СтрПодвал;
			ПодстрокаЗамены = 
			"        protected override void OnHandleCreated(EventArgs e)
			|        {
			|            base.OnHandleCreated(e);
			|            if (DesignMode)
			|            {
			|                IDesignerHost designerHost = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
			|                if (designerHost != null)
			|                {
			|                    ControlDesigner designer = (ControlDesigner)designerHost.GetDesigner(this);
			|                    if (designer != null)
			|                    {
			|                        if (tic1 < 1)
			|                        {
			|                            designer.ActionLists.Clear();
			|                            designer.ActionLists.Add(new PictureBoxActionList(designer));
			|                            tic1 = tic1 + 1;
			|                        }
			|                    }
			|                }
			|            }
			|        }
			|
			|        public class PictureBoxActionList : DesignerActionList
			|        {
			|            private PictureBox _control;
			|            private DesignerActionUIService designerActionUISvc = null;
			|
			|            public PictureBoxActionList(ControlDesigner designer) : base(designer.Component)
			|            {
			|                _control = (PictureBox)designer.Component;
			|                this.designerActionUISvc = GetService(typeof(DesignerActionUIService)) as DesignerActionUIService;
			|            }
			|
			|            private PropertyDescriptor GetPropertyByName(String propName)
			|            {
			|                return TypeDescriptor.GetProperties(_control)[propName];
			|            }
			|
			|            public PictureBoxSizeMode SizeMode
			|            {
			|                get { return _control.SizeMode; }
			|                set
			|                {
			|                    this.GetPropertyByName(""SizeMode"").SetValue(_control, value);
			|                    this.designerActionUISvc.Refresh(this.Component);
			|                }
			|            }
			|
			|            private void EditImage()
			|            {
			|                PropertyDescriptor pd = TypeDescriptor.GetProperties(_control)[""Image""];
			|                MyImageFileNameEditor editor = (MyImageFileNameEditor)pd.GetEditor(typeof(UITypeEditor));
			|                MyRuntimeServiceProvider serviceProvider = new MyRuntimeServiceProvider(_control);
			|                object res1 = editor.EditValue(serviceProvider, serviceProvider, _control.Image);
			|                this.GetPropertyByName(""Image"").SetValue(_control, res1);
			|                this.designerActionUISvc.Refresh(this.Component);
			|            }
			|
			|            public override DesignerActionItemCollection GetSortedActionItems()
			|            {
			|                var items = new DesignerActionItemCollection();
			|                items.Add(new DesignerActionMethodItem(this, ""EditImage"", ""Выбрать изображение..."", """", true));
			|                items.Add(new DesignerActionPropertyItem(""SizeMode"", ""Режим масштабирования:""));
			|
			|                return items;
			|            }
			|        }
			|    }
			|}
			|";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		Если ИмяКонтекстКлассаАнгл = "TextBox" Тогда
			ПодстрокаПоиска = СтрПодвал;
			ПодстрокаЗамены = 
			"        protected override void OnHandleCreated(EventArgs e)
			|        {
			|            base.OnHandleCreated(e);
			|            if (DesignMode)
			|            {
			|                IDesignerHost designerHost = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
			|                if (designerHost != null)
			|                {
			|                    ControlDesigner designer = (ControlDesigner)designerHost.GetDesigner(this);
			|                    if (designer != null)
			|                    {
			|                        if (tic1 < 1)
			|                        {
			|                            designer.ActionLists.Clear(); // Если имеющийся список смарт-тэга не нужен.
			|                            designer.ActionLists.Add(new TextBoxActionList(designer));
			|                            tic1 = tic1 + 1;
			|                        }
			|                    }
			|                }
			|            }
			|        }
			|			
			|        public class TextBoxActionList : DesignerActionList
			|        {
			|            private TextBox _control;
			|            private DesignerActionUIService designerActionUISvc = null;
			|
			|            public TextBoxActionList(ControlDesigner designer) : base(designer.Component)
			|            {
			|                _control = (TextBox)designer.Component;
			|
			|                this.designerActionUISvc = GetService(typeof(DesignerActionUIService)) as DesignerActionUIService;
			|            }
			|
			|            private PropertyDescriptor GetPropertyByName(String propName)
			|            {
			|                return TypeDescriptor.GetProperties(_control)[propName];
			|            }
			|
			|            public bool Multiline
			|            {
			|                get { return _control.Multiline; }
			|                set
			|                {
			|                    this.GetPropertyByName(""Multiline"").SetValue(_control, value);
			|                    this.designerActionUISvc.Refresh(this.Component);
			|                }
			|            }
			|
			|            public override DesignerActionItemCollection GetSortedActionItems()
			|            {
			|                var items = new DesignerActionItemCollection();
			|                items.Add(new DesignerActionPropertyItem(""Multiline"", ""Многострочный режим""));
			|                return items;
			|            }
			|        }
			|    }
			|}
			|";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		Если ИмяКонтекстКлассаАнгл = "ComboBox" Тогда
			ПодстрокаПоиска = СтрПодвал;
			ПодстрокаЗамены = 
			"        
			|        protected override void OnHandleCreated(EventArgs e)
			|        {
			|            base.OnHandleCreated(e);
			|            if (DesignMode)
			|            {
			|                IDesignerHost designerHost = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
			|                if (designerHost != null)
			|                {
			|                    ControlDesigner designer = (ControlDesigner)designerHost.GetDesigner(this);
			|                    if (designer != null)
			|                    {
			|                        if (tic1 < 1)
			|                        {
			|                            designer.ActionLists.Clear();
			|                            designer.ActionLists.Add(new ComboBoxActionList(designer));
			|                            tic1 = tic1 + 1;
			|                        }
			|                    }
			|                }
			|            }
			|        }
			|
			|        public class ComboBoxActionList : DesignerActionList
			|        {
			|            private ComboBox _control;
			|            private DesignerActionUIService designerActionUISvc = null;
			|
			|            public ComboBoxActionList(ControlDesigner designer) : base(designer.Component)
			|            {
			|                _control = (ComboBox)designer.Component;
			|                this.designerActionUISvc = GetService(typeof(DesignerActionUIService)) as DesignerActionUIService;
			|            }
			|
			|            private PropertyDescriptor GetPropertyByName(String propName)
			|            {
			|                return TypeDescriptor.GetProperties(_control)[propName];
			|            }
			|
			|            private void EditItems()
			|            {
			|                PropertyDescriptor pd = TypeDescriptor.GetProperties(_control)[""Items""];
			|                UITypeEditor editor = (UITypeEditor)pd.GetEditor(typeof(UITypeEditor));
			|                MyRuntimeServiceProvider serviceProvider = new MyRuntimeServiceProvider(_control);
			|                object res1 = editor.EditValue(serviceProvider, serviceProvider, _control.Items);
			|                this.GetPropertyByName(""Items"").SetValue(_control, res1);
			|                this.designerActionUISvc.Refresh(this.Component);
			|            }
			|
			|            public override DesignerActionItemCollection GetSortedActionItems()
			|            {
			|                var items = new DesignerActionItemCollection();
			|                items.Add(new DesignerActionMethodItem(this, ""EditItems"", ""Изменить элементы..."", """", true));
			|                return items;
			|            }
			|        }
			|    }
			|}
			|";
			СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		
		// Добавим значения свойств по умолчанию
		
		
		
		// Если ИмяКонтекстКлассаАнгл = "" Тогда
			// ПодстрокаПоиска = СтрПодвал;
			// ПодстрокаЗамены = 
			// "        
		
			// |";
			// СтрВыгрузки = СтрЗаменить(СтрВыгрузки, ПодстрокаПоиска, ПодстрокаЗамены);
		// КонецЕсли;
		
		СтрСвойствоПодсказка = 
			"
            |        private System.Collections.Hashtable toolTip = new System.Collections.Hashtable();
            |        [Browsable(false)]
            |        public System.Collections.Hashtable ToolTip
            |        {
            |            get { return toolTip; }
            |            set { toolTip = value; }
            |        }
            |";
		СтрСвойство_DefaultValues_RequiredValues1 = 
			"			
			|
            |        [Browsable(false)]
            |        public string DefaultValues { get; set; }
            |			
            |        [Browsable(false)]
			|        public string RequiredValues
			|        {
			|            get
			|            {
			|                return @""";
		СтрСвойство_DefaultValues_RequiredValues2 = 
			""";
			|            }
			|        }
            |    }
            |}";
			
		ПодстрокаЗамены = СтрПодвал;
		
		Если ИмяКонтекстКлассаАнгл = "TabPage" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Текст ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "Form" или 
			ИмяКонтекстКлассаАнгл = "RichTextBox" или 
			ИмяКонтекстКлассаАнгл = "CheckBox" или 
			ИмяКонтекстКлассаАнгл = "PropertyGrid" или 
			ИмяКонтекстКлассаАнгл = "NumericUpDown" или 
			ИмяКонтекстКлассаАнгл = "GroupBox" или 
			ИмяКонтекстКлассаАнгл = "UserControl" или 
			ИмяКонтекстКлассаАнгл = "PictureBox" или 
			ИмяКонтекстКлассаАнгл = "DateTimePicker" или 
			ИмяКонтекстКлассаАнгл = "TextBox" или 
			ИмяКонтекстКлассаАнгл = "TabControl" или 
			ИмяКонтекстКлассаАнгл = "Panel" или 
			ИмяКонтекстКлассаАнгл = "Label" или 
			ИмяКонтекстКлассаАнгл = "RadioButton" или 
			ИмяКонтекстКлассаАнгл = "HScrollBar" или 
			ИмяКонтекстКлассаАнгл = "VScrollBar" или 
			ИмяКонтекстКлассаАнгл = "Button" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "Splitter" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Стыковка ==
			|Размер ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "Timer" или 
			ИмяКонтекстКлассаАнгл = "ToolTip" или 
			ИмяКонтекстКлассаАнгл = "FileSystemWatcher" или 
			ИмяКонтекстКлассаАнгл = "NotifyIcon" или 
			ИмяКонтекстКлассаАнгл = "SaveFileDialog" или 
			ИмяКонтекстКлассаАнгл = "OpenFileDialog" или 
			ИмяКонтекстКлассаАнгл = "FontDialog" или 
			ИмяКонтекстКлассаАнгл = "ColorDialog" или 
			ИмяКонтекстКлассаАнгл = "FolderBrowserDialog" или 
			ИмяКонтекстКлассаАнгл = "DataGridBoolColumn" или 
			ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn" Тогда
			ПодстрокаЗамены = СтрСвойство_DefaultValues_RequiredValues1 + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "StatusBar" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Панели ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "StatusBarPanel" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Текст ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ListView" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|Колонки ==
			|Элементы ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ImageList" Тогда
			ПодстрокаЗамены = СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Изображения ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "MainMenu" Тогда
			ПодстрокаЗамены = СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|ЭлементыМеню ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGrid" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|СтилиТаблицы ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ListBox" или 
			ИмяКонтекстКлассаАнгл = "ComboBox" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|Элементы ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolBar" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|Кнопки ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "LinkLabel" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|Текст ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "MonthCalendar" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|ЕжегодныеДаты ==
			|ЕжемесячныеДаты ==
			|ВыделенныеДаты ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "TreeView" Тогда
			ПодстрокаЗамены = СтрСвойствоПодсказка + СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Положение ==
			|ПорядокОбхода ==
			|Размер ==
			|Узлы ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridTableStyle" Тогда
			ПодстрокаЗамены = СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|СтилиКолонкиСеткиДанных ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ColumnHeader" или 
			ИмяКонтекстКлассаАнгл = "ToolBarButton" или 
			ИмяКонтекстКлассаАнгл = "ListViewSubItem" Тогда
			ПодстрокаЗамены = СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Текст ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		ИначеЕсли ИмяКонтекстКлассаАнгл = "ListViewItem" Тогда
			ПодстрокаЗамены = СтрСвойство_DefaultValues_RequiredValues1 + 
            "
			|Подэлементы ==
			|Текст ==
			|" + СтрСвойство_DefaultValues_RequiredValues2;
		КонецЕсли;
		СтрВыгрузки = СтрЗаменить(СтрВыгрузки, СтрПодвал, ПодстрокаЗамены);
		
		ТекстДокКлассов = Новый ТекстовыйДокумент;
		ТекстДокКлассов.УстановитьТекст(СтрВыгрузки);
		ТекстДокКлассов.Записать(ИмяФайлаВыгрузки);
	КонецЦикла;
	
	СгенерироватьФайлы();
	
	Сообщить("Выполнено за: " + ((ТекущаяУниверсальнаяДатаВМиллисекундах()-Таймер)/1000)/60 + " мин.");
КонецПроцедуры//ВыгрузкаДляCS()

Процедура СгенерироватьФайлы()
	// СтрВыгрузки = 
	// "using System;
	
	// |";
	// ТекстДокХХХ = Новый ТекстовыйДокумент;
	// ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	// ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\.cs");
	
	
	
	
	
	
	
	
	
	СтрВыгрузки = 
	"using System.Windows.Forms;
	|
	|namespace osfDesigner
	|{
	|    public interface IDesignerMainForm
	|    {
	|        void ChangeImage(bool change);
	|        Control GetmainForm();
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\IDesignerMainForm.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Windows.Forms;
	|using System.Drawing.Design;
	|using System.Reflection;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using osfDesigner.Properties;
	|using System.Collections;
	|using System.Collections.Generic;
	|using System.Text;
	|using System.IO;
	|
	|namespace osfDesigner
	|{
	|    public class pDesignerMainFormPFL : System.Windows.Forms.Form, IDesignerMainForm
	|    {
	|        private string _version = string.Empty;
	|        public pDesigner pDesignerCore = new pDesigner();
	|        private IpDesigner IpDesignerCore = null;
	|        private System.ComponentModel.IContainer components = null;
	|        private System.Windows.Forms.MenuStrip menuStrip1;
	|
	|        private System.Windows.Forms.ToolStripMenuItem _file;
	|        private System.Windows.Forms.ToolStripMenuItem _generateScript;
	|
	|        private System.Windows.Forms.ToolStripSeparator _stripSeparator2;
	|        private System.Windows.Forms.ToolStripMenuItem _loadForm;
	|        private System.Windows.Forms.ToolStripMenuItem _saveForm;
	|        private System.Windows.Forms.ToolStripSeparator _stripSeparator4;
	|        private System.Windows.Forms.ToolStripMenuItem _exit;
	|
	|        private System.Windows.Forms.ToolStripMenuItem _edit;
	|        private System.Windows.Forms.ToolStripMenuItem _unDo;
	|        private System.Windows.Forms.ToolStripMenuItem _reDo;
	|        private System.Windows.Forms.ToolStripSeparator _stripSeparator3;
	|        private System.Windows.Forms.ToolStripMenuItem _cut;
	|        private System.Windows.Forms.ToolStripMenuItem _copy;
	|        private System.Windows.Forms.ToolStripMenuItem _paste;
	|        private System.Windows.Forms.ToolStripMenuItem _delete;
	|
	|        private System.Windows.Forms.ToolStripMenuItem _view;
	|        private System.Windows.Forms.ToolStripMenuItem _form;
	|        private System.Windows.Forms.ToolStripMenuItem _code;
	|
	|        private System.Windows.Forms.ToolStripMenuItem _tools;
	|        private System.Windows.Forms.ToolStripMenuItem _tabOrder;
	|        private static System.Windows.Forms.ToolStripMenuItem _tabOrder1;
	|
	|        private System.Windows.Forms.ToolStripSeparator _stripSeparator5;
	|        private System.Windows.Forms.ToolStripMenuItem _run;
	|
	|        private System.Windows.Forms.ToolStripSeparator _stripSeparator6;
	|        private System.Windows.Forms.ToolStripMenuItem _settings;
	|
	|        private System.Windows.Forms.ToolStripMenuItem _help;
	|        private System.Windows.Forms.ToolStripMenuItem _about;
	|
	|        private System.Windows.Forms.Panel pnl4Toolbox;
	|        private System.Windows.Forms.ListBox listBox1;
	|        private System.Windows.Forms.Panel pnl4pDesigner;
	|        private System.Windows.Forms.Splitter pnl4splitter;
	|
	|        private System.Windows.Forms.PropertyGrid propertyGrid1;
	|        private System.Windows.Forms.Timer timerLoad;
	|
	|        private System.Windows.Forms.Form settingsForm;
	|        private System.Windows.Forms.TabControl tabControl;
	|        private System.Windows.Forms.TabPage tabPage1;
	|        private System.Windows.Forms.GroupBox groupBox;
	|        private System.Windows.Forms.Label label_os;
	|        private System.Windows.Forms.Label label_dll;
	|        private System.Windows.Forms.TextBox textBox_osPath;
	|        private System.Windows.Forms.TextBox textBox_dllPath;
	|        private System.Windows.Forms.Button button_osPath;
	|        private System.Windows.Forms.Button button_dllPath;
	|        private System.Windows.Forms.Button buttonOK;
	|        private System.Windows.Forms.Button buttonCancel;
	|
	|        private void timerLoad_Tick(object sender, System.EventArgs e)
	|        {
	|            timerLoad.Stop();
	|            DesignSurfaceManagerExt DesignSurfaceManagerExt = pDesigner.DSME;
	|            propertyGrid1 = DesignSurfaceManagerExt.PropertyGridHost.PropertyGrid;
	|            try
	|            {
	|                // это не удается, если вызывается непосредственно при загрузке, так как элемент управления не завершил создание самого себя: 
	|                Application.AddMessageFilter(new PropertyGridMessageFilter(propertyGrid1.GetChildAtPoint(new Point(40, 40)), new MouseEventHandler(propGridView_MouseUp)));
	|            }
	|            catch
	|            {
	|            }
	|        }
	|
	|        private void propGridView_MouseUp(object sender, MouseEventArgs e)
	|        {
	|            if (e.Button == System.Windows.Forms.MouseButtons.Left && (
	|                propertyGrid1.SelectedGridItem.Label == ""СписокИзображений"" ||
	|                propertyGrid1.SelectedGridItem.Label == ""СписокБольшихИзображений"" ||
	|                propertyGrid1.SelectedGridItem.Label == ""СписокМаленькихИзображений"" ||
	|                propertyGrid1.SelectedGridItem.Label == ""DoubleBuffered""))
	|            {
	|                // пользователь щелкнул левой кнопкой мыши по свойству, чтобы увидеть контекстное меню:
	|                try
	|                {
	|                    propertyGrid1.SelectedGridItem.Expanded = false;
	|                }
	|                catch
	|                {
	|                }
	|            }
	|        }
	|
	|        public pDesignerMainFormPFL()
	|        {
	|            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(pDesignerMainFormPFL));
	|            this.menuStrip1 = new System.Windows.Forms.MenuStrip();
	|            this._file = new System.Windows.Forms.ToolStripMenuItem();
	|            this._generateScript = new System.Windows.Forms.ToolStripMenuItem();
	|            this._stripSeparator2 = new System.Windows.Forms.ToolStripSeparator();
	|            this._loadForm = new System.Windows.Forms.ToolStripMenuItem();
	|            this._saveForm = new System.Windows.Forms.ToolStripMenuItem();
	|            this._stripSeparator4 = new System.Windows.Forms.ToolStripSeparator();
	|            this._exit = new System.Windows.Forms.ToolStripMenuItem();
	|
	|            this._edit = new System.Windows.Forms.ToolStripMenuItem();
	|            this._unDo = new System.Windows.Forms.ToolStripMenuItem();
	|            this._reDo = new System.Windows.Forms.ToolStripMenuItem();
	|            this._stripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
	|            this._cut = new System.Windows.Forms.ToolStripMenuItem();
	|            this._copy = new System.Windows.Forms.ToolStripMenuItem();
	|            this._paste = new System.Windows.Forms.ToolStripMenuItem();
	|            this._delete = new System.Windows.Forms.ToolStripMenuItem();
	|
	|            this._view = new System.Windows.Forms.ToolStripMenuItem();
	|            this._form = new System.Windows.Forms.ToolStripMenuItem();
	|            this._code = new System.Windows.Forms.ToolStripMenuItem();
	|
	|            this._tools = new System.Windows.Forms.ToolStripMenuItem();
	|            this._tabOrder = new System.Windows.Forms.ToolStripMenuItem();
	|            osfDesigner.pDesignerMainFormPFL._tabOrder1 = this._tabOrder;
	|
	|            this._stripSeparator5 = new System.Windows.Forms.ToolStripSeparator();
	|            this._run = new System.Windows.Forms.ToolStripMenuItem();
	|
	|            this._stripSeparator6 = new System.Windows.Forms.ToolStripSeparator();
	|            this._settings = new System.Windows.Forms.ToolStripMenuItem();
	|
	|            this._help = new System.Windows.Forms.ToolStripMenuItem();
	|            this._about = new System.Windows.Forms.ToolStripMenuItem();
	|            this.pnl4Toolbox = new System.Windows.Forms.Panel();
	|            this.listBox1 = new System.Windows.Forms.ListBox();
	|            this.pnl4pDesigner = new System.Windows.Forms.Panel();
	|            this.pnl4splitter = new System.Windows.Forms.Splitter();
	|            this.menuStrip1.SuspendLayout();
	|            this.pnl4Toolbox.SuspendLayout();
	|            this.SuspendLayout();
	|            // 
	|            // menuStrip1
	|            // 
	|            this.menuStrip1.ImageScalingSize = new System.Drawing.Size(20, 20);
	|            this.menuStrip1.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
	|            this._file,
	|            this._edit,
	|            this._view,
	|            this._tools,
	|            this._help});
	|            this.menuStrip1.Location = new System.Drawing.Point(0, 0);
	|            this.menuStrip1.Padding = new System.Windows.Forms.Padding(8, 2, 0, 2);
	|            this.menuStrip1.TabIndex = 1;
	|            this.menuStrip1.Text = ""menuStrip1"";
	|            // 
	|            // _file
	|            // 
	|            this._file.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
	|            this._generateScript,
	|            this._stripSeparator2,
	|            this._loadForm,
	|            this._saveForm,
	|            this._stripSeparator4,
	|            this._exit});
	|            this._file.Name = ""_file"";
	|            this._file.Size = new System.Drawing.Size(54, 24);
	|            this._file.Text = ""Файл"";
	|            // 
	|            // _generateScript
	|            // 
	|            string str_generateScript = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABzklEQVR42u2aMU7DMBSGn+NCGRjgDjAxInEIxMgtWBiYGEoAqQsgWLgFEyBAcAMkkBhYgDtQRJFomzTYQBzjkiZO4jiO/A+VWjkv/xf7vby4QRApALOE2IeB5hkE4s0f3fZQjmClaX2pyTwzAFPMixAWwAKoAjg+f6lUZVpbmfvjTxqg++mPBJ2ewvUBEE+gWoUvoeedBURiVAcgQ0CwAKoAqLnfMZA0hspV1FvNcB6VzAAPcHdxEju26c9CD79KxV9cXpUDkElimsD89ySALKIAbtQ9Q+i7EABaQvll1iFX5+n6Bt69NwtQOgAVOVHwcHYFHu7qA+DFm+PFVyWZJC4dII1qB1CpJSQDECax9hnIW4WMBaByq5ADFkA3gKwqlwNGA8TdedPK1b2EagEw33qMTWKx/68lwP3pJQSNDz0AVOPKaNIeUOWfB0SADrdfX4T+W35KyygFODhsgz8cst+8YEACp+NCnK/NjW09ALt7LQLgZzp+EjcsQG6A9v4W9H3PAmgFAHAIRF/6eOw4gJEzFkJ5MxdB/Eh2NiYwjq1G4bai0OIU/x9Z0feDUOGeqHKAvE2gpGoGUAREGQD0gUl81YDRGCg0UpYM0rf3L8g8IyNDfeOmAAAAAElFTkSuQmCC"";
	|            this._generateScript.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_generateScript);
	|            this._generateScript.Name = ""_generateScript"";
	|            this._generateScript.Size = new System.Drawing.Size(221, 26);
	|            this._generateScript.Text = ""Сформировать сценарий"";
	|            this._generateScript.Click += _generateScript_Click;
	|            // 
	|            // _stripSeparator2
	|            // 
	|            this._stripSeparator2.Name = ""_stripSeparator2"";
	|            // 
	|            // _loadForm
	|            // 
	|            string str_loadForm = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAA/klEQVR42u3Z0QqDMAwFUDO2vez/f3UwN+iqOKE2qdUVe2NzoS/6kmMMVEvdSUK1CzBIAuI0P4ihkLtfr0IPoypkTyfgMBHEZRRFMf7h1xMGkoNIYI6otTwEADPMdl8EAoAJLv4FOaBix19WBNmCgYdMRRpEailixt0JC1GECDRtQdDmZzk3WRA0BIeJIBq6sQuCijAIWlaHnRTORzc1wIX38bthEMScAsLthsXfQagIBjLvRgxiEIPIn70ShFC/qhaQy69+FoLaDQYS/GNQsbdqE6IMYZDqkV4rgwAgGoGgYoRTsTRESdLHCorCQq5+vWtXtiE3vz6rMq0xCFq+0/uOMfSQbkgAAAAASUVORK5CYII="";
	|            this._loadForm.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_loadForm);
	|            this._loadForm.Name = ""_loadForm"";
	|            this._loadForm.Text = ""Открыть форму"";
	|            this._loadForm.Click += _loadForm_Click;
	|            // 
	|            // _saveForm
	|            // 
	|            string str_saveForm = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABBUlEQVR42u3awQ6CMBAEUPai/v/f6qXCgYTAbruF0p3qTMIBgW1fS4RYZfqRSHQHCKmAJNB+uS94zNs7ELHmOW+fK5DImTiN2UPSbkeUC5J17GpEH0QXxoRYHQ2ALHlNhdu9O0Tr7FprW1s5LzszsBDjXHNmwiDbUbcgNRh4iBczBMTAiLmDDClhhoIomHjIrlFCwiAeZFdIa4y3bjOIUqxpSoPTFHIXxjPDzSFRIQQthKBliG+tE+3iPkcq28Z7sntrD/Gu5alPCCGEEEIIIYQQohTuDSksNfwhpNTQ3RDruBtiFYuE1Pwaf8AAJ7s+sgTlDwO5HBZGc7cH6syI+8MRQwhavjI5HUJUEs5VAAAAAElFTkSuQmCC"";
	|            this._saveForm.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_saveForm);
	|            this._saveForm.Name = ""_saveForm"";
	|            this._saveForm.Text = ""Сохранить форму"";
	|            this._saveForm.Click += _saveForm_Click;
	|            // 
	|            // _stripSeparator4
	|            // 
	|            this._stripSeparator4.Name = ""_stripSeparator4"";
	|            // 
	|            // _exit
	|            // 
	|            this._exit.Name = ""_exit"";
	|            this._exit.Text = ""Выход"";
	|            this._exit.Click += _exit_Click;
	|            // 
	|            // _edit
	|            // 
	|            this._edit.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
	|            this._unDo,
	|            this._reDo,
	|            this._stripSeparator3,
	|            this._cut,
	|            this._copy,
	|            this._paste,
	|            this._delete});
	|            this._edit.Name = ""_edit"";
	|            this._edit.Size = new System.Drawing.Size(69, 24);
	|            this._edit.Text = ""Правка"";
	|            // 
	|            // _unDo
	|            // 
	|            string str_unDo = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAA2klEQVR42u3YSw6AIAwEULz/oTGamBAjyqdlZky7YSfzRH5uOWnXFoAABMDoQSnlfDaCgCP80UoCrvCSgDK8HOAeXgrwFF4GUAsvAXgLTw/4Ck8NaAk/WrPoT4BneAvIK2BV+BlIFYAIP4KgBPQg6D6hXgTNJHYDsCNgG1nrSzEDtHTavQQaIOCHudmRpThOz4wsxYUGAnjqWA5w71wSUAaQmcS1IBLLqFVBNjLvsL8DmB3mAjAAMLnQoAAmV0oUwOxSvxrg8ltlBcD9xxZ7BQBdAUBXANAlD9gBBDWIAQ4VHAYAAAAASUVORK5CYII="";
	|            this._unDo.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_unDo);
	|            this._unDo.Name = ""_unDo"";
	|            this._unDo.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Z)));
	|            this._unDo.Size = new System.Drawing.Size(212, 26);
	|            this._unDo.Text = ""Отменить"";
	|            this._unDo.Click += _unDo_Click;
	|            // 
	|            // _reDo
	|            // 
	|            string str_reDo = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAA10lEQVR42u3YSw7EIAwDUHr/QzOaXqD52IkjJRt21A+JEnjumV3PAhawgIaPnnPvOwwG/EcEohWAQLQDsggJQAYhA4gipAARhBzAi5AEeBBpgCVMtCyIMIAZ3INwA6qCWxEuQEf4L4QZ0Bk+DVANPwKQ3sTK4aEA1+lZdZAxwlvmhbUSyJWyzgtt5pArZZkX3k5XAigXmioA7UpZAaBe6tmbmP6swvyNlj1ssRCoorYSFShqM7cAFCCKkAJEEHIAL0IS4IFIAyyQEYDuWkB3LaC7FtBd4wE/1ESIAWn6qDIAAAAASUVORK5CYII="";
	|            this._reDo.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_reDo);
	|            this._reDo.Name = ""_reDo"";
	|            this._reDo.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Y)));
	|            this._reDo.Size = new System.Drawing.Size(212, 26);
	|            this._reDo.Text = ""Вернуть"";
	|            this._reDo.Click += _reDo_Click;
	|            // 
	|            // _stripSeparator3
	|            // 
	|            this._stripSeparator3.Name = ""_stripSeparator3"";
	|            // 
	|            // _cut
	|            // 
	|            string str_cut = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABNUlEQVR42u2Y0Q7CIAxF4f8/ekYjZpmU3sItlIS+OTI9BxDa5ivtHfkIHIEjsHc0BXJK1eHrMxQjqgISeESRPwEUPooEJHCHfI6HF6gBektokwgLiC/9hnkCyNatTmYEgZFDY+kWshwY8BbSACPBiwKWH7AKsMBVAQ8JNrwqwBLxADcJWECeAJ7wZgEEqkDMSkm60+nWbTkznxqqB2qXnveWoQoU4Br8+9mMeoJWkQmr8f3IB6cKSP+H8vy+QvTMlbGFWuPS9goh0APPlqAeoyg8U8QsYLmNZzQHYIHuislZQhVgACxJ5jxmzuU7Zze23AsarWRklJRMiS2KelNNDLZVaI2t0dVYLmARcekLUfMaoNIbFgjf3NVmIhK8KIBIRIBvCrREosBDAtHjCKyOI7A6thd4ARhzzAEzNxSrAAAAAElFTkSuQmCC"";
	|            this._cut.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_cut);
	|            this._cut.ImageTransparentColor = System.Drawing.Color.Magenta;
	|            this._cut.Name = ""_cut"";
	|            this._cut.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.X)));
	|            this._cut.Size = new System.Drawing.Size(212, 26);
	|            this._cut.Text = ""Вырезать"";
	|            this._cut.Click += OnMenuClick;
	|            // 
	|            // _copy
	|            // 
	|            string str_copy = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABOElEQVR42u3WrQ7CMBAH8DUIBAaD4AnAYtCEZ8DxEih4BhwejeMZCBoECRiQ6CUEMwghY7AlJCPpPq7tbddwfzOxNe2vubtMOJZHlH0ABqS8CwrYwwoAKiIT0F94oM1Xw1q0buf6otOoxC8BBYEGOHsvcbkFDjYCFRA+sRHoAGxEIQBMRGEALIQRwPfQBgIGUQOAEUYBs80DtPmoW43WHa++aNfVSosEIOyX+zNwVBBkAOFTBQECZNW6LkAFQQ4ARZAqIRUEWYAEoQ84rLfSD915TwuQMwww3sRAJC3A52Cy9bgASAkByyPxIhiAOUbzhAGqTTxdnnIfcjJo0QPIpkxW0KdQUmQlBGnitNJjgAbAaY73eQ0/ifcEAyAhOUZtBkBC8lfivwGmwgAG2ARADgNIhgFlx3rAG9GomUA3I+5MAAAAAElFTkSuQmCC"";
	|            this._copy.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_copy);
	|            this._copy.ImageTransparentColor = System.Drawing.Color.Magenta;
	|            this._copy.Name = ""_copy"";
	|            this._copy.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C)));
	|            this._copy.Size = new System.Drawing.Size(212, 26);
	|            this._copy.Text = ""Копировать"";
	|            this._copy.Click += OnMenuClick;
	|            // 
	|            // _paste
	|            // 
	|            string str_paste = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABIklEQVR42u3awQnCMBQG4OTkFL07gY6Rg6eCriAFcQoRiiso9CbFKcQNvIpLeHoWaaGWtEmapH2h77/12b68DxPxUM4CDx97ADSAY5ZHu1i86rX0fJsnG/FED5ANX+V0uUbb9eqNGsAYQK0lb6+hBzQHbasPC4DOy/92LQCtpXshVQ+BVqmBOGT5ch+Le4+ljRFdD4BR2Tjc+AMrAAD87i02iRNBsbnKfrzZzz2gGt4HQILwDeCs+3BqLcuh1mJQgI8QgAAEGBkg+S334vQKSB8fb99SspgBAQhAAAJMCFAuaBVJPwJoA1yHAAQIDWB6iFV4AkxuCxGAAJaA4P9KBA9wHWuAChEEQBWMACMEVoA2AjNAJyjPwLQAvoZXzRr82ypful5dQCOEOe0AAAAASUVORK5CYII="";
	|            this._paste.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_paste);
	|            this._paste.ImageTransparentColor = System.Drawing.Color.Magenta;
	|            this._paste.Name = ""_paste"";
	|            this._paste.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.V)));
	|            this._paste.Size = new System.Drawing.Size(212, 26);
	|            this._paste.Text = ""Вставить"";
	|            this._paste.Click += OnMenuClick;
	|            // 
	|            // _delete
	|            // 
	|            string str_delete = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAACJUlEQVRoge2YvW/TQBiHn7sjY9UFiSIYOjSiVGyt5HYAUkLyR0NVRwgJkBiRGGAEqaIsSQZKFfsYiFFUXXJ3vtdIiHtG34d/j+9svzZkMplMJhPIfFgcTEdFv6v5p4OTvfmwOIgZo0M7zsaH+wp7Zmr7av78+GF8vM1MR0XfmGqisOV8fPQodJwK6TQbH+7rypwDd5eHLqzSz7bO3n5sE/Ym01HRN7UtgXvLQ9+sqYdbL95/8I31CjjCN4hIOMI3BEl4t1DvuncF/HQ07Shbn6dspw3hAWrqW5VvjqAt9GNwvFuZugR2Hc2tVsITPnjOIAGQlZAKDxECICMhGR4iBSBNQjo8tBCAdhJdhIeWAhAn0VV4SBCAMIla2UVX4SFRADwSikssNXDHMVTkRZgsAN6VcCFWiogIQJSEaB0lJgC/JRamfq3c+x0L31H6iVR4iCinQ7ju2Z62mHXtoldriZhA86i0ip0N3W6nFoA3Ebkonue8C7H7IHkFNoa3XAIXjmHJpXhDkoD3Dav106oyj4EvjnYRidZbKKY8mA5O9oypSuC+r28srQTa1DZdSUQLpBRmXUhECUhUlUuJScocqwTfxFIl8fbkzedKq1Pgq6M5+sYOWoEu6vm/9lHf5ceIxNzeLaQWlV7TL/ltuv3y3acN20mjF2vrqj/5Qk40Oz16oLUu+Rd/LTasSCjJ8A0rEr3Q8NF0/nt9VPRjf69nMplM5v/mF/i6x8b172ZWAAAAAElFTkSuQmCC"";
	|            this._delete.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_delete);
	|            this._delete.Name = ""_delete"";
	|            this._delete.ShortcutKeys = System.Windows.Forms.Keys.Delete;
	|            this._delete.Size = new System.Drawing.Size(212, 26);
	|            this._delete.Text = ""Удалить"";
	|            this._delete.Click += OnMenuClick;
	|            // 
	|            // _view
	|            // 
	|            this._view.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
	|            this._form,
	|            this._code});
	|            this._view.Name = ""_view"";
	|            this._view.Size = new System.Drawing.Size(50, 24);
	|            this._view.Text = ""Вид"";
	|            // 
	|            // _form
	|            // 
	|            string str_form = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAA1klEQVR42u3a4QqCMBQF4EaB9R69/wv5IAktavfHYippebVzdz0HJvhjcj5EpsxwcJKALkDIBOSJLqMxyKFJo0O3UeYskPJOCOiGbvVlLgLIJwJp07iiWynTCuSexgndRJkokJjGEd1EmQchxkKItYwgtb2y5DWQECshxFr2C0F/q8z1IoQQQlaCWA0hP119iwwKbgf5x8NUlCSEEEJQkDlMWDjvw/z9ruyEEELI9ASrIcRafELKrbdaIXG4q1sTptfb1fa0mx8GctCL3tK8f+FwEUKs5QXoOIWG//RH0wAAAABJRU5ErkJggg=="";
	|            this._form.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_form);
	|            this._form.Name = ""_form"";
	|            this._form.Size = new System.Drawing.Size(50, 24);
	|            this._form.Text = ""Форма"";
	|            this._form.Click += _form_Click;
	|            this._form.Enabled = false;
	|            this._form.CheckState = System.Windows.Forms.CheckState.Checked;
	|            // 
	|            // _code
	|            // 
	|            string str_code = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAvElEQVR42u3WQQqDMBSE4eQ2FWk3Hsoz9VBd6cLb6BNcdSE1IWby+g8ICYjOpz4wru8heEj8C0gcP+sNHSbr8PIA2bNYj644xM6JJdp/PagsjApkseMRMj4zCch+fVvPtuxD4puRgRz7ZIwUJAcjB0nFSEJSMLKQqxgJyI+ZrcfTA+S0R1XIVTAQIC1BSv3in90LCJCWIHcGCJAWIW6GHQgQhh0IkCoQN8MOBAjDDgQIECBAKkNUAqSluIFsV0sN9+kjczYAAAAASUVORK5CYII="";
	|            this._code.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_code);
	|            this._code.Name = ""_code"";
	|            this._code.Size = new System.Drawing.Size(50, 24);
	|            this._code.Text = ""Скрипт"";
	|            this._code.Click += _code_Click;
	|            this._code.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            // 
	|            // _tools
	|            // 
	|            this._tools.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] {
	|            this._tabOrder,
	|            this._stripSeparator5,
	|            this._run,
	|            this._stripSeparator6,
	|            this._settings});
	|            this._tools.Name = ""_tools"";
	|            this._tools.Size = new System.Drawing.Size(113, 24);
	|            this._tools.Text = ""Инструменты"";
	|            // 
	|            // _tabOrder
	|            // 
	|            string str_tabOrder = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAA3ElEQVR42u3ZSw6AIAwEULj/oTExcdOApjD9menWiPOiQNU+Wu3qaEBvbXvIcZ8eCDgJv4v4BMhQqwsgwsMBq1DyIqjwIQBkeAJ2AGgEJ/FbuK/BUy6jGsApwmwj0wC8awqYpBzrQ9jS3j4CCLAATEC1JjEBlQHo5u6pZQuTrZXQItI1c1BARDvtDvAKT8DbQGkfoVm4UpNYhiu5jGoAlgiXjSyiCIiu/wJE0npvZAQQcAgQGPONbHeBSNVKmHwb9Wzm4ADvdjoEEPl3hgA0gpP4tFIuo14I040sc11VMcAB84B/6gAAAABJRU5ErkJggg=="";
	|            this._tabOrder.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_tabOrder);
	|            this._tabOrder.Name = ""_tabOrder"";
	|            this._tabOrder.Size = new System.Drawing.Size(217, 26);
	|            this._tabOrder.Text = ""Порядок обхода"";
	|            this._tabOrder.Click += _tabOrder_Click;
	|            // 
	|            // _stripSeparator5
	|            // 
	|            this._stripSeparator5.Name = ""_stripSeparator5"";
	|            // 
	|            // _run
	|            // 
	|            string str_run = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABkUlEQVR42t3Z0Q7CIAwFUPv/H42JmWYD2t4WCkUejDrAHjsGbPT6k0K7AwBL0RyZIVrw6SEWQEoIDyjVoTbsFBAcwIe+FeIDJIO0kSLBJ4OMIxJAnhF7AB3E7+UoxGaIjPgGZh/kSyE8gjuzDZfd5s1mBDX1exgmG9EQ7HRqYygghP+QAMFjhGxEQfR5Yhwiq5YgdIw5G7MhthnbMthJP4tmQXzLDuTyC2QDhdinYO8CENh3sF1sR2g4MFbp4DEIqYK+wKt/bCOCq3QcoldxD4LGr6g2SFKEDpFKIoTUSI4yGQJtOG+LGoSwNJY3PJsR6yFBiLWQQATa0ey7gtMRSGflLnlURjHkXrDGQcwYci9Y4yEwprcKAHZ6URAfhlvKrIaUK26q9tIFadx0Ztt7T4OUKt4hjJypOEhh1lgSJh2kl4n7dzVG+EOQWzoxEA2hYPhdZn+QT0d8OkQywWRGKtIEE3K/WQ1aGPweSNjdf5IGuBPBYUKfxbBjYRBRQ8KfjLEZGUQsLyrkBMQVJzQRpi9vUR3TM0g50FMAAAAASUVORK5CYII="";
	|            this._run.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_run);
	|            this._run.Name = ""_run"";
	|            this._run.Text = ""Запуск"";
	|            this._run.Click += _run_Click;
	|            this._run.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F6)));
	|            this._run.ShowShortcutKeys = true;
	|            // 
	|            // _stripSeparator6
	|            // 
	|            this._stripSeparator6.Name = ""_stripSeparator6"";
	|            // 
	|            // _settings
	|            // 
	|            string str_settings = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABI0lEQVR42u3YwQ6EMAgEUP3/j3aTPRhFaGkLOLNZrqKZp9JY92P7jdr/kKgA29aNcHzbQCEeADTEAlzDXns8iHKIhpBBZxClEInQQs4iXoNEI8og2YhySCRCXjMd0gq6iqCGWItGGSTitWot3zQQ2fvajFhBPRh1JpCGXR7Xeqzz4SAaRisLCAXpYTxPCQZigbyLRCrEEyrqxqRBKhFpkGxECeQNRDhkBNHbLXq2xCmQVUSvup8wEZBMRNnPhxVExPyEQFAQSxAkxDQEDTEFQUQMQ1ARQxBkhBuCjnBBGBBdCAuiCWFCmBA2hAphRDwgrIgbhBlxQtgRKoQRMQRBRpwQGbT1ixIRYUKuYRkQN4gWWhYq4gFpYZARKkQDoSOaELb6AFfXABC6bvmCAAAAAElFTkSuQmCC"";
	|            this._settings.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_settings);
	|            this._settings.Name = ""_settings"";
	|            this._settings.Text = ""Параметры"";
	|            this._settings.Click += _settings_Click;
	|            // 
	|            // _help
	|            // 
	|            this._help.DropDownItems.AddRange(new System.Windows.Forms.ToolStripItem[] { this._about });
	|            this._help.Name = ""_help"";
	|            this._help.Size = new System.Drawing.Size(77, 24);
	|            this._help.Text = ""Помощь"";
	|            // 
	|            // _about
	|            // 
	|            string str_about = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABCklEQVR42u3WwRKDIAyE4fLmvjntpRenSDbZTaBDzo7+n4NCu157TzuAA1gE8LlPB69vSwDQcDbGDWCEMyAwQBEeQUAAdbwHYQZkxaMIEyA7HkFMAVXxVsQjwBvfBw9tzvs9IaiAbl23xE1vCFDFsxEUABrvQUCAjHgUMEJIAd9AyzU0ABL/FHcPY/2Z7ogwYBS3FcCL3AbA3NjSAawPuATAjk8FKOKXAETi0wCq+FIAI/4AVpgpYGXEpTiN/hrVEjIDIois////A7yIjOODFDBCKN7+FMBCqOJNgAgiOrN4M6ACYYmHAJkIazwMyEAg8S6ACoKGhwEsiDecBvBCouF0QNUcQPVsD3gDeqycMcHL1j4AAAAASUVORK5CYII="";
	|            this._about.Image = osfDesigner.OneScriptFormsDesigner.Base64ToImage(str_about);
	|            this._about.Name = ""_about"";
	|            this._about.Size = new System.Drawing.Size(187, 26);
	|            this._about.Text = ""О программе..."";
	|            this._about.Click += _about_Click;
	|            // 
	|            // pnl4Toolbox
	|            // 
	|            this.pnl4Toolbox.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
	|            this.pnl4Toolbox.Controls.Add(this.listBox1);
	|            this.pnl4Toolbox.Dock = System.Windows.Forms.DockStyle.Left;
	|            this.pnl4Toolbox.Location = new System.Drawing.Point(0, 26);
	|            this.pnl4Toolbox.Name = ""pnl4Toolbox"";
	|            this.pnl4Toolbox.Size = new System.Drawing.Size(163, 489);
	|            this.pnl4Toolbox.TabIndex = 2;
	|            // 
	|            // listBox1
	|            // 
	|            this.listBox1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.listBox1.FormattingEnabled = true;
	|            this.listBox1.ItemHeight = 16;
	|            this.listBox1.Location = new System.Drawing.Point(0, 0);
	|            this.listBox1.Name = ""listBox1"";
	|            this.listBox1.Size = new System.Drawing.Size(159, 485);
	|            this.listBox1.TabIndex = 0;
	|            // 
	|            // pnl4pDesigner
	|            // 
	|            this.pnl4pDesigner.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.pnl4pDesigner.Location = new System.Drawing.Point(163, 26);
	|            this.pnl4pDesigner.Name = ""pnl4pDesigner"";
	|            this.pnl4pDesigner.Size = new System.Drawing.Size(726, 489);
	|            this.pnl4pDesigner.TabIndex = 3;
	|            // 
	|            // pnl4splitter
	|            // 
	|            this.pnl4splitter.BackColor = System.Drawing.Color.LightSteelBlue;
	|            this.pnl4splitter.Location = new System.Drawing.Point(163, 26);
	|            this.pnl4splitter.Name = ""pnl4splitter"";
	|            this.pnl4splitter.Size = new System.Drawing.Size(5, 489);
	|            this.pnl4splitter.TabIndex = 4;
	|            this.pnl4splitter.TabStop = false;
	|            // 
	|            // pDesignerMainFormPFL
	|            // 
	|            this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
	|            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	|            this.ClientSize = new System.Drawing.Size(889, 515);
	|            this.Controls.Add(this.pnl4splitter);
	|            this.Controls.Add(this.pnl4pDesigner);
	|            this.Controls.Add(this.pnl4Toolbox);
	|            this.Controls.Add(this.menuStrip1);
	|            string str_Icon = ""AAABAAEAAAAQAAEABABooAAAFgAAACgйQAAAAIAAAEABйAAKййAAEййAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8ккккккккккккккккккккккккккккккккккккккккккйййййAAAеееец////8ййAAAееееццййAAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPее//8Aццц//ййDццц/8Pцццц//8ййAее//8AAP8йййййPAAAADцц/8ADцццц//wййDгкййAAAP8AAAD/ййAAAADwйй8AAAAADц/////8AAAцццц//ййAPццц/wкййAAAP8AAAAA/wййAAAPййDwйц////8AAAAPцццц8ййAццц/wкййAAAP8йP8ййAAA8ййP/wAAAADц///8AAAAADццццwййDццц/кййAAAP8йAD/ййD//wййAP//AAAAц//8йAццццййAPцццкййAAAP8йAAA/wйAAD///ййй//AADц/8йAAPг/8ййAццц8кййAAP8йAAAAP8йA//йййAAAA//8Pц8йAAADг/wййDцццwкййAP8йAAAAAD/AAAAD//wййййDц/8йAAAAAг/ййAPцццкййAP8ййA/wAA//ййййAAAAD/////8ййPццц//8ййAццц8кййP8ййAAP///wййййй////8ййADццц//wййDцццwйDе/////8ййAAAD//wйййййAA//8ййAAAццц//ййAPцццйDе/////8ййAAAAA8йййййAAAAA8ййAAAAPццц8ййAццц8йPе/////wкйййййAAAAццц/wййDцццwйец8кйййййAAAццц//ййAPцццйDец/кйййййAAццц//8ййAццц8йPец/wкйййййгwййDцццwйец//8кййййAAAAAг/ййAPцццйDец///кййййAAAAг/8ййAццц8йPец///wкййййAAг//wййDцццwйец////8кййййAццццййAPцццйDец/////кййййцццц8ййAццц8йPец/////wкйййAAAAцццц/wййDцццwйецц8кйййAAAцццц//ййAPцццйDецц/кйййAAцццц//8ййAццц8йPецц/wкйййцгwййDцццwйецц//кйййDцгййAPцццйDецц/8кйййAцццц//8ййAццц8йPецц8кйййADцццц//wййDцццwйецц/wкйййAAцццц//ййAPцццйDеццwкйййAADцццц/8ййAццц8йPеццкйййAAAAцццц/wййDцццwйеццкйййAAAAAPццццййAPцццйDец/////8ййййADц/ййййAAцццц8ййAццц8йPец////8ййййAц////8йййAAAAADццццwййDцццwйец/////wйййAAAADцц/8йййAAAAAццццййAPцццйDец////wйййAAAADцц///йййAAAADг//8ййAццц8йPец////йййAAAAцццйййAAAAг//wййDцццwйец////8йййAAAццц/wйййAADг//ййAPцццйDец////wйййAAццц//8йййAAPг/8ййAццц8йPец///wйййAADццц//wйййAADг/wййDцццwйец////йййAADг8йййAAPг/ййAPцццйDец///8йййADг//йййAAг/8ййAццц8йPец//8йййAAPг/8йййADг/wййDцццwйццгwйййййAPццццйййййAPц////ййAPцццйDццгйййййAAцццц/wйййййц////8ййAццц8йPццццц//8йййййAцццц//йййййDц////wййDцццwйццгwйййййDцццц//wййййAAAAAPц////ййAPцццйDццгйййййAPцццц//йййййц////8ййAццц8йPццццц//8йййййAцццц//8ййййAAAAADц////wййDцццwйццгwйййййцгwййййAAAAAPц////ййAPцццйDццгйййййDцг8ййййAAAAAц////8ййAццц8йPццццц//8йййййPцгwййййAAAADц////wййDцццwйццгwйййййцг/ййййAAAAAPц////ййAPцццйDццгйййййDцг8ййййAAAAAц////8ййAццц8йPццццц//8йййййPцццц//8ййййAAAAADц////wййDцццwйццгwйййййDцццц//wййййAAAAAPц////ййAPцццйDццгйййййAPцццц//йййййц////8ййAццц8йPццццц//8йййййAцццц//8ййййAAAAADц////wййDцццwйццгwйййййDцццц/8йййййPц////ййAPцццйDццгйййййAAцццц/wйййййц////8ййAццц8йPццццц//8йййййADццццwйййййDц////wййDцццwйец//йййAAAAг//wйййAPг/ййAPцццйDец///8йййADг//йййAAг/8ййAццц8йPец///wйййAAг/йййAADг/wййDцццwйец////йййAADгйййAAAPг/ййAPцццйDец///8йййAAAццц//8йййAAPг/8ййAццц8йPец////йййAAAPццц8йййAAAг//wййDцццwйец////8йййAAADцц/////8йййAAADг//ййAPцццйDец/////йййAAAAцц////8йййAAADг//8ййAццц8йPец////8йййAAAAAцц//йййAAAAAPг//wййDцццwйец/////wййййц/////wййййццццййAPцццйDец/////8ййййAц//8ййййAцццц8ййAццц8йPец/////wййййAAAA8PййййAAAADццццwййDцццwйецц8кйййAAADцццц/ййAPцццйDеццwкйййAAAPцццц8ййAццц8йPецц8кйййAAPцццц/wййDцццwйецц/wкйййAPцццц//ййAPцццйDецц/8кйййAцццц//8ййAццц8йPецц//кйййцгwййDцццwйецц//8кййAAAAADцгййAPцццйDецц/8кйййAцццц//8ййAццц8йPецц8кйййAAPцццц/wййDцццwйецц8кйййAAADцццц/ййAPцццйDец/////8кйййAAAAAцццц8ййAццц8йPец////8кййййPг//wййDцццwйец////8кййййADг//ййAPцццйDец///8кййййAAAг/8ййAццц8йPец//8кййййAAAAPгwййDцццwйец//8кййййAAAAADгййAPцццйDец/8кйййййAццц//8ййAццц8йPец8кйййййAAPццц/wййDцццwйец8кйййййAAADццц/ййAPцццйDецwййAAAA8йййййAAAAA8ййAAAAPццц8ййAццц8йPец8ййAAA//йййййAAAA//ййAAAPццц/wййDцццwйец//ййAA////йййййAP///wййAPццц//ййAPцццйDец//wййцййййAAAAц8ййPццц//8ййAццц8йPец//8йAAAAAц//ййййAPц//йAAAAAPгwййDцццwкййAAAPйAAAA8йAD/8йййAAAD/8Aц/wйAAAPг/ййAPцццкййAAAADwйAA8йAAAD//wййAAAAD///AADц/8йAAPг/8ййAццц8кййAAAAA8йA8ййP//8ййP//AAAAAPц//йAPг//wййDцццwкййAAAAAPй8ййAAADwйй/wйц///wAAAAAPццццййAPцццкйййDwAAAA8ййAAAAPййD8йDц///8AAAAPцццц8ййAццц8кйййA8AAA8ййAAAAA8ййPwйPц////AAAPцццц/wййDцццwкйййAPAA8ййAAAAADwйй/йAц/////wAPцццц//ййAPцццкйййAADw8йййPййD8йDц/////8Pцццц//8ййAццц8кйййAAA8йййA8ййPwйPе///wййDцццwйнуууууzMzMzwйй/йAе////ййAPцццйDMнуууууzMzPййD8йDе///8ййAццц8йMнуууууzMzM8ййPwйPе///wййDцццwйнуууууzMzMzwйй/йAе////ййAPцццйDMzMzMzйййййAууwAAAуzMAAAMzMzMzPййD8йDе///8ййAццц8йMzMzMwAццццц8AуzMzMAP//8AzMzMzAD///AMzMzM8ййPwйPе///wййDцццwйzMzMwPццццц//8MуzMD/////8MzMzAцDMzMzwйй/йAе////ййAPцццйDMzMwPццг/DMуDц/DMzAц/wzMwPййD8йDе///8ййAццц8йMzMzAццг/8MуwPц8MzMDц/DMzA8ййPwйPе///wййDцццwйzMzAеDMzMzMwPц//DMDц//wzA/wйй/йAе////ййAPцццйDMzMDццг//8MzMzMzAц//8MwPц//DMD/ййD8йDе///8ййAццц8йMzMwPццг//wуDц//wzAц//8MwP8ййPwйPе///wййDцццwйzMzAеDMzMzMwPц//DMDц//wzAцц///йAе////ййAPцццйDMzMDццг//8MzMzMzAц//8MwPц//DMDц//wуйDе///8ййAццц8йMzMzAццг/8MуwPц8MzMDц/DMzAц/wуwйPе///wййDцццwйzMzMDццг/wуzAц/wzMwPц8MzMDц/DMzMzMzйAе////ййAPцццйDMzMzAццгwуzMwP/////wzMzMD/////8MzMzAцDMуйDе///8ййAццц8йMzMzMwAццццц8AуzMzMAP//8AzMzMzAD///AMzMzMwA///wDMуwйPе///wййDцццwйуwйййййMууAAAMуzAAADMуwAAAуzMzйAе////ййAPцццйDMннууйDе///8ййAццц8йMннууwйPе///wййDцццwйннууwйAе////ййAPцццйAMннуzMzMwйADе///8ййAццц8ккййййAAPе///wййDцццwккййййAAе////ййAPцццккййййAADе///8ййAццц8ккййййAAPе///wййDцццwккййййAAе////ййAPццц8ккййййAе////8ййAццц/wккййййDе////wййDццц/8ккйййAAAAADе/////ййAPццц//8ккйййAAAец8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8кккккккккккккккккккккккккккккккккккккккккккккккййййAAADMннннууййAMннннууwййAннннууzййADMннннууййAMннннууwййAннннууzййADMннннууййAMннннууwййAннннууzййADMуzMккAAуууzMAAAAAMууzMAAAAAMууzMAAAAAMуzMййAMуzADее/8AууzMzMzAD/////AMуzMzMzAD/////AMуzMzMzAD/////AMуwййAуwAее////8AууzMwAц//AMуzMwAц//AMуzMwAц//AMzMzMzййADMzMzMwPеец8MууwPц////DMуwPц////DMуwPц////DMzMzMййAMzMzMwPеец//DMуzMzMwPц/////wуwPц/////wуwPц/////wzMzMwййAzMzMwPеец///wуzMzMwPцц8MzMzMwPцц8MzMzMwPцц8MzMzййADMzMzAеец////DMуzMzAцц/wzMzMzAцц/wzMzMzAцц/wzMzMййAMzMzAеец/////wуzMzAцц//8MzMzAцц//8MzMzAцц//8MzMwййAzMzMDеец/////DMуzMDцц//wzMzMDцц//wzMzMDцц//wzMzййADMzMDееццwуzMDцц///8MzMDцц///8MzMDцц///8MzMййAMzMwPееццDMуwPцц///wzMwPцц///wzMwPцц///wzMwййAzMzAеецц8MуzAцц////DMzAцц////DMzAцц////DMzййADMzMDееццwуzMDцц///8MzMDцц///8MzMDцц///8MzMййAMzMwPееццDMуwPцц///wzMwPцц///wzMwPцц///wzMwййAzMzAеецц8MуzAцц////DMzAцц////DMzAцц////DMzййADMzMDееццwуzMDцц///8MzMDцц///8MzMDцц///8MzMййAMzMwPееццDMуwPцц///wzMwPцц///wzMwPцц///wzMwййAzMzMDеец/////DMуzMDцц//wzMzMDцц//wzMzMDцц//wzMzййADMzMwPеец////8MуzMwPцц//DMzMwPцц//DMzMwPцц//DMzMййAMzMzMDеец///8MуzMzMDцц/DMzMzMDцц/DMzMzMDцц/DMzMwййAzMzMwPеец///wуzMzMwPцц8MzMzMwPцц8MzMzMwPцц8MzMzййADMzMzMDеец//wууDц/////8MуDц/////8MуDц/////8MzMzMййAMzMzMzAеец/wууzAц////8MуzAц////8MуzAц////8MzMzMwййAуwAее////8AууzMwAц//AMуzMwAц//AMуzMwAц//AMzMzMzййADMуwAее//AMууzMzMwA/////wDMуzMzMwA/////wDMуzMzMwA/////wDMуййAMуzMwккADMуууwAAAAAууzMwAAAAAууzMwAAAAAуzMwййAннннууzййADMннннууййAMннннууwййAннннууzййADMннннууййAAннннууwййAAMннннуzMzMwкккккккккккккккккккккккккккккккккккккккккккккккйййAAAD/gкAAB//4кAAAB/+кAAAAB/wкAAAAD+кAAAAAHwкAAAAAPкй4кAAAAABgкAAAAAEккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккAAIкAAAAABgкAAAAAHкй8кAAAAAD4кAAAAAfwкAAAAD/gкAAAAf/gкAAAH//gкAAB/w=="";
	|            str_Icon = str_Icon.Replace(""г"", ""ццц///"");
	|            str_Icon = str_Icon.Replace(""н"", ""уууууу"");
	|            str_Icon = str_Icon.Replace(""е"", ""цццццц"");
	|            str_Icon = str_Icon.Replace(""к"", ""йййййй"");
	|            str_Icon = str_Icon.Replace(""у"", ""zMzMzM"");
	|            str_Icon = str_Icon.Replace(""ц"", ""//////"");
	|            str_Icon = str_Icon.Replace(""й"", ""AAAAAA"");
	|            this.Icon = new System.Drawing.Icon((System.IO.Stream)new System.IO.MemoryStream(Convert.FromBase64String(str_Icon)));
	|            this.MainMenuStrip = this.menuStrip1;
	|            this.Margin = new System.Windows.Forms.Padding(4);
	|            this.Name = ""pDesignerMainFormPFL"";
	|            this.Text = ""Дизайнер форм для OneScriptForms"";
	|            this.Load += pDesignerMainForm_Load;
	|            //* 18.12.2021 perfolenta
	|            this.FormClosing += pDesignerMainForm_Closing;
	|            //***
	|            this.menuStrip1.ResumeLayout(false);
	|            this.menuStrip1.PerformLayout();
	|            this.pnl4Toolbox.ResumeLayout(false);
	|            this.ResumeLayout(false);
	|            this.PerformLayout();
	|
	|            // элемент управления: (pDesigner)pDesignerCore 
	|            IpDesignerCore = this.pDesignerCore as IpDesigner;
	|            pDesignerCore.Parent = this.pnl4pDesigner;
	|
	|            // Добавим элементы (toolboxItems) к будущей панели элементов (toolbox) указатель
	|            ToolboxItem toolPointer = new System.Drawing.Design.ToolboxItem();
	|            toolPointer.DisplayName = ""<Указатель>"";
	|            toolPointer.Bitmap = new System.Drawing.Bitmap(16, 16);
	|            listBox1.Items.Add(toolPointer);
	|
	|            // элементы управления
	|            ToolboxItem toolButton = new System.Drawing.Design.ToolboxItem(typeof(Button));
	|            toolButton.DisplayName = ""Кнопка (Button)"";
	|            listBox1.Items.Add(toolButton);
	|
	|            ToolboxItem toolCheckBox = new System.Drawing.Design.ToolboxItem(typeof(CheckBox));
	|            toolCheckBox.DisplayName = ""Флажок (CheckBox)"";
	|            listBox1.Items.Add(toolCheckBox);
	|
	|            ToolboxItem toolColorDialog = new System.Drawing.Design.ToolboxItem(typeof(ColorDialog));
	|            toolColorDialog.DisplayName = ""ДиалогВыбораЦвета (ColorDialog)"";
	|            listBox1.Items.Add(toolColorDialog);
	|
	|            ToolboxItem toolComboBox = new System.Drawing.Design.ToolboxItem(typeof(ComboBox));
	|            toolComboBox.DisplayName = ""ПолеВыбора (ComboBox)"";
	|            listBox1.Items.Add(toolComboBox);
	|
	|            ToolboxItem toolDataGrid = new System.Drawing.Design.ToolboxItem(typeof(DataGrid));
	|            toolDataGrid.DisplayName = ""СеткаДанных (DataGrid)"";
	|            listBox1.Items.Add(toolDataGrid);
	|
	|            ToolboxItem toolDateTimePicker = new System.Drawing.Design.ToolboxItem(typeof(DateTimePicker));
	|            toolDateTimePicker.DisplayName = ""ПолеКалендаря (DateTimePicker)"";
	|            listBox1.Items.Add(toolDateTimePicker);
	|
	|            ToolboxItem toolFileSystemWatcher = new System.Drawing.Design.ToolboxItem(typeof(FileSystemWatcher));
	|            toolFileSystemWatcher.DisplayName = ""НаблюдательФайловойСистемы (FileSystemWatcher)"";
	|            listBox1.Items.Add(toolFileSystemWatcher);
	|
	|            ToolboxItem toolFontDialog = new System.Drawing.Design.ToolboxItem(typeof(FontDialog));
	|            toolFontDialog.DisplayName = ""ДиалогВыбораШрифта (FontDialog)"";
	|            listBox1.Items.Add(toolFontDialog);
	|
	|            ToolboxItem toolFolderBrowserDialog = new System.Drawing.Design.ToolboxItem(typeof(FolderBrowserDialog));
	|            toolFolderBrowserDialog.DisplayName = ""ДиалогВыбораКаталога (FolderBrowserDialog)"";
	|            listBox1.Items.Add(toolFolderBrowserDialog);
	|
	|            ToolboxItem toolGroupBox = new System.Drawing.Design.ToolboxItem(typeof(GroupBox));
	|            toolGroupBox.DisplayName = ""РамкаГруппы (GroupBox)"";
	|            listBox1.Items.Add(toolGroupBox);
	|
	|            ToolboxItem toolHProgressBar = new System.Drawing.Design.ToolboxItem(typeof(HProgressBar));
	|            toolHProgressBar.DisplayName = ""ИндикаторГоризонтальный (HProgressBar)"";
	|            listBox1.Items.Add(toolHProgressBar);
	|
	|            ToolboxItem toolVProgressBar = new System.Drawing.Design.ToolboxItem(typeof(VProgressBar));
	|            toolVProgressBar.DisplayName = ""ИндикаторВертикальный (VProgressBar)"";
	|            listBox1.Items.Add(toolVProgressBar);
	|
	|            ToolboxItem toolHScrollBar = new System.Drawing.Design.ToolboxItem(typeof(HScrollBar));
	|            toolHScrollBar.DisplayName = ""ГоризонтальнаяПрокрутка (HScrollBar)"";
	|            listBox1.Items.Add(toolHScrollBar);
	|
	|            ToolboxItem toolImageList = new System.Drawing.Design.ToolboxItem(typeof(System.Windows.Forms.ImageList));
	|            toolImageList.DisplayName = ""СписокИзображений (ImageList)"";
	|            listBox1.Items.Add(toolImageList);
	|
	|            ToolboxItem toolLabel = new System.Drawing.Design.ToolboxItem(typeof(Label));
	|            toolLabel.DisplayName = ""Надпись (Label)"";
	|            listBox1.Items.Add(toolLabel);
	|
	|            ToolboxItem toolLinkLabel = new System.Drawing.Design.ToolboxItem(typeof(LinkLabel));
	|            toolLinkLabel.DisplayName = ""НадписьСсылка (LinkLabel)"";
	|            listBox1.Items.Add(toolLinkLabel);
	|
	|            ToolboxItem toolListBox = new System.Drawing.Design.ToolboxItem(typeof(ListBox));
	|            toolListBox.DisplayName = ""ПолеСписка (ListBox)"";
	|            listBox1.Items.Add(toolListBox);
	|
	|            ToolboxItem toolListView = new System.Drawing.Design.ToolboxItem(typeof(ListView));
	|            toolListView.DisplayName = ""СписокЭлементов (ListView)"";
	|            listBox1.Items.Add(toolListView);
	|
	|            ToolboxItem toolMainMenu = new System.Drawing.Design.ToolboxItem(typeof(System.Windows.Forms.MainMenu));
	|            toolMainMenu.DisplayName = ""ГлавноеМеню (MainMenu)"";
	|            listBox1.Items.Add(toolMainMenu);
	|
	|            ToolboxItem toolMonthCalendar = new System.Drawing.Design.ToolboxItem(typeof(MonthCalendar));
	|            toolMonthCalendar.DisplayName = ""Календарь (MonthCalendar)"";
	|            listBox1.Items.Add(toolMonthCalendar);
	|
	|            ToolboxItem toolNotifyIcon = new System.Drawing.Design.ToolboxItem(typeof(NotifyIcon));
	|            toolNotifyIcon.DisplayName = ""ЗначокУведомления (NotifyIcon)"";
	|            listBox1.Items.Add(toolNotifyIcon);
	|
	|            ToolboxItem toolNumericUpDown = new System.Drawing.Design.ToolboxItem(typeof(NumericUpDown));
	|            toolNumericUpDown.DisplayName = ""РегуляторВверхВниз (NumericUpDown)"";
	|            listBox1.Items.Add(toolNumericUpDown);
	|
	|            ToolboxItem toolOpenFileDialog = new System.Drawing.Design.ToolboxItem(typeof(OpenFileDialog));
	|            toolOpenFileDialog.DisplayName = ""ДиалогОткрытияФайла (OpenFileDialog)"";
	|            listBox1.Items.Add(toolOpenFileDialog);
	|
	|            ToolboxItem toolPanel = new System.Drawing.Design.ToolboxItem(typeof(Panel));
	|            toolPanel.DisplayName = ""Панель (Panel)"";
	|            listBox1.Items.Add(toolPanel);
	|
	|            ToolboxItem toolPictureBox = new System.Drawing.Design.ToolboxItem(typeof(PictureBox));
	|            toolPictureBox.DisplayName = ""ПолеКартинки (PictureBox)"";
	|            listBox1.Items.Add(toolPictureBox);
	|
	|            ToolboxItem toolPropertyGrid = new System.Drawing.Design.ToolboxItem(typeof(PropertyGrid));
	|            toolPropertyGrid.DisplayName = ""СеткаСвойств (PropertyGrid)"";
	|            listBox1.Items.Add(toolPropertyGrid);
	|
	|            ToolboxItem toolRadioButton = new System.Drawing.Design.ToolboxItem(typeof(RadioButton));
	|            toolRadioButton.DisplayName = ""Переключатель (RadioButton)"";
	|            listBox1.Items.Add(toolRadioButton);
	|
	|            ToolboxItem toolRichTextBox = new System.Drawing.Design.ToolboxItem(typeof(RichTextBox));
	|            toolRichTextBox.DisplayName = ""ФорматированноеПолеВвода (RichTextBox)"";
	|            listBox1.Items.Add(toolRichTextBox);
	|
	|            ToolboxItem toolSaveFileDialog = new System.Drawing.Design.ToolboxItem(typeof(SaveFileDialog));
	|            toolSaveFileDialog.DisplayName = ""ДиалогСохраненияФайла (SaveFileDialog)"";
	|            listBox1.Items.Add(toolSaveFileDialog);
	|
	|            ToolboxItem toolSplitter = new System.Drawing.Design.ToolboxItem(typeof(Splitter));
	|            toolSplitter.DisplayName = ""Разделитель (Splitter)"";
	|            listBox1.Items.Add(toolSplitter);
	|
	|            ToolboxItem toolStatusBar = new System.Drawing.Design.ToolboxItem(typeof(StatusBar));
	|            toolStatusBar.DisplayName = ""СтрокаСостояния (StatusBar)"";
	|            listBox1.Items.Add(toolStatusBar);
	|
	|            ToolboxItem toolTabControl = new System.Drawing.Design.ToolboxItem(typeof(TabControl));
	|            toolTabControl.DisplayName = ""ПанельВкладок (TabControl)"";
	|            listBox1.Items.Add(toolTabControl);
	|
	|            ToolboxItem toolTextBox = new System.Drawing.Design.ToolboxItem(typeof(TextBox));
	|            toolTextBox.DisplayName = ""ПолеВвода (TextBox)"";
	|            listBox1.Items.Add(toolTextBox);
	|
	|            ToolboxItem toolTimer = new System.Drawing.Design.ToolboxItem(typeof(Timer));
	|            toolTimer.DisplayName = ""Таймер (Timer)"";
	|            listBox1.Items.Add(toolTimer);
	|
	|            ToolboxItem toolToolBar = new System.Drawing.Design.ToolboxItem(typeof(ToolBar));
	|            toolToolBar.DisplayName = ""ПанельИнструментов (ToolBar)"";
	|            listBox1.Items.Add(toolToolBar);
	|
	|            ToolboxItem toolToolTip = new System.Drawing.Design.ToolboxItem(typeof(ToolTip));
	|            toolToolTip.DisplayName = ""Подсказка (ToolTip)"";
	|            listBox1.Items.Add(toolToolTip);
	|
	|            ToolboxItem toolTreeView = new System.Drawing.Design.ToolboxItem(typeof(TreeView));
	|            toolTreeView.DisplayName = ""Дерево (TreeView)"";
	|            listBox1.Items.Add(toolTreeView);
	|
	|            ToolboxItem toolUserControl = new System.Drawing.Design.ToolboxItem(typeof(UserControl));
	|            toolUserControl.DisplayName = ""ПользовательскийЭлементУправления (UserControl)"";
	|            listBox1.Items.Add(toolUserControl);
	|
	|            ToolboxItem toolVScrollBar = new System.Drawing.Design.ToolboxItem(typeof(VScrollBar));
	|            toolVScrollBar.DisplayName = ""ВертикальнаяПрокрутка (VScrollBar)"";
	|            listBox1.Items.Add(toolVScrollBar);
	|
	|            listBox1.Sorted = true;
	|            listBox1.HorizontalScrollbar = true;
	|            IpDesignerCore.Toolbox = listBox1;
	|        }
	|
	|        private void _run_Click(object sender, EventArgs e)
	|        {
	|            string strTempFile = String.Format(System.IO.Path.GetTempPath() + ""oscript_{0}_{1}.os"", DateTime.Now.ToString(""yyyyMMddHHmmssfff""), Guid.NewGuid().ToString().Replace(""-"", """"));
	|            System.IO.File.WriteAllText(strTempFile, SaveScript.GetScriptText(), System.Text.Encoding.UTF8);
	|
	|            System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo();
	|            psi.Arguments = strTempFile;
	|            psi.FileName = (string)Settings.Default[""osPath""];
	|            System.Diagnostics.Process.Start(psi);
	|        }
	|
	|        private void _settings_Click(object sender, EventArgs e)
	|        {
	|            settingsForm = new System.Windows.Forms.Form();
	|            settingsForm.Text = ""Параметры"";
	|            settingsForm.Width = 600;
	|            settingsForm.Height = 500;
	|            settingsForm.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
	|
	|            string str_settingsForm = ""AAABAAEAMjIAAAEAIADIKAAAFgAAACgAAAAyAAAAZAAAAAEAIеAoCgеееAAAAADцццццццццццццццццццццццццццццццццццццццццг/////AAAACAAAAHUAAAC4AAAAxAAAAI4AAAAcццг/wAAAAkAAADFAкAAOgAAADbAAAA/gAAAOsAAAAzццццццй//AAAAdgAAAP8ункAAO4AAAAzцццццц//8AAAC5AAAA5wAAAP8ункAAO4AAAAzцгййй///wAAAMYAAADYAннкAAO4AAAAzцгйй////AAAAkAAAAP4уннAAA8QAAAO4AAAAzцгй////8AAAAeAAAA7AAAAPEуннAAA8QAAAO4AAAAzцгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAP8уннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAP8уннкAAO8AAAA2цгй////8AAAAxAнннкAAO8AAAA2цгй////8AAAAxAнннкAAO8AAAA2цгй////8AAAAzAAAA7gAAAP8уннкAAO4AAABLAAAAawAAAKgAAADDAAAAxAAAAKsAAAB2AAAAJvгй//8AAAAzAAAA7gAAAPEунннAAA+gAAAOEAAADeAAAA+AAAAP8уAAArwAAACbг///8AAAAzAAAA7gAAAPEуннннкAAP8AAAD9AAAA9AAAAFPг///8AAAAzAAAA7gAAAPEуннннкAAP8AAADgAAAA/gAAAFXг///8AAAAzAAAA7gAAAP8уннннкAAP8AAADfAAAA9AAAACnг///8AAAAzAAAA7gAAAPEунннннAAAгй////8AAABLAннннннAAALPг///wAAAGwуннкAAO0уAAA9QAAAOUункAAP8AAADг/////AAAAqAAAAPkуннAAA0йй////wAAANcунAAA8QAAAPг////8AAADDAAAA4AAAAP8унAAA7QAAANbйййй//wAAANQукAAP8AAADWAAAAг/////wAAAMYAAADdAнкAAP8AAADц//wAAANMAAAD+AкAANsAAADг/////AAAArAAAAPYунAAAwgAAAPXцйwAAANUAAAD+AAAA/QAAAPг////8AAAB4AннAAA5fцй/////wAAANQуAAAг/////wAAACgункAAP8AAAD+AAAA1цййwAAANTгйй//wAAALIAAAD8AннAAA1vцццццц//AAAAKQAAAPUAAADdAннAAA1fцццццц//AAAAVgAAAP4уннAAA1fцццццц//AAAAWAAAAPYAAAD7AнкAAP8AAAD+AAAA1Pцццццц//AAAALAAAALcукAAPAAAADUAAAA2wAAAP0уAAA1Pццццццй/wAAAC8ункAAPццццццццццццццццццццццццццццццццццццццццццг//еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее=="";
	|            str_settingsForm = str_settingsForm.Replace(""г"", ""ццццйй"");
	|            str_settingsForm = str_settingsForm.Replace(""н"", ""кAAP8у"");
	|            str_settingsForm = str_settingsForm.Replace(""е"", ""AAAAAA"");
	|            str_settingsForm = str_settingsForm.Replace(""к"", ""AAA/wA"");
	|            str_settingsForm = str_settingsForm.Replace(""у"", ""AAAD/A"");
	|            str_settingsForm = str_settingsForm.Replace(""ц"", ""йййййй"");
	|            str_settingsForm = str_settingsForm.Replace(""й"", ""//////"");
	|            settingsForm.Icon = new System.Drawing.Icon((System.IO.Stream)new System.IO.MemoryStream(Convert.FromBase64String(str_settingsForm)));
	|
	|            tabControl = new System.Windows.Forms.TabControl();
	|            tabControl.Parent = settingsForm;
	|            tabControl.Left = 15;
	|            tabControl.Top = 15;
	|            tabControl.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right |
	|                System.Windows.Forms.AnchorStyles.Bottom;
	|            tabControl.Size = new System.Drawing.Size(settingsForm.Width - 120, settingsForm.Height - 50);
	|
	|            tabPage1 = new System.Windows.Forms.TabPage(""Файлы"");
	|            tabPage1.Parent = tabControl;
	|
	|            groupBox = new System.Windows.Forms.GroupBox();
	|            groupBox.Parent = tabPage1;
	|            groupBox.Text = ""Пути"";
	|            groupBox.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            groupBox.Left = 25;
	|            groupBox.Top = 25;
	|            groupBox.Width = 150;
	|            groupBox.Height = 170;
	|
	|            label_os = new System.Windows.Forms.Label();
	|            label_os.Parent = groupBox;
	|            label_os.Left = 10;
	|            label_os.Top = groupBox.Top;
	|            label_os.Width = 80;
	|            label_os.Text = ""oscript.exe:"";
	|            label_os.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
	|
	|            textBox_osPath = new System.Windows.Forms.TextBox();
	|            textBox_osPath.Parent = groupBox;
	|            textBox_osPath.Left = label_os.Left;
	|            textBox_osPath.Top = label_os.Bottom + 3;
	|            textBox_osPath.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            textBox_osPath.Text = (string)Settings.Default[""osPath""];
	|
	|            button_osPath = new System.Windows.Forms.Button();
	|            button_osPath.Parent = groupBox;
	|            button_osPath.Font = new System.Drawing.Font(groupBox.Font, System.Drawing.FontStyle.Bold);
	|            button_osPath.Text = ""..."";
	|            button_osPath.Left = 115;
	|            button_osPath.Top = textBox_osPath.Top;
	|            button_osPath.Width = 27;
	|            button_osPath.Anchor = System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            button_osPath.Click += button_osPath_Click;
	|
	|            label_dll = new System.Windows.Forms.Label();
	|            label_dll.Parent = groupBox;
	|            label_dll.Left = textBox_osPath.Left;
	|            label_dll.Top = textBox_osPath.Bottom + 10;
	|            label_dll.Width = 140;
	|            label_dll.Text = ""OneScriptForms.dll:"";
	|            label_dll.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
	|
	|            textBox_dllPath = new System.Windows.Forms.TextBox();
	|            textBox_dllPath.Parent = groupBox;
	|            textBox_dllPath.Left = label_dll.Left;
	|            textBox_dllPath.Top = label_dll.Bottom + 3;
	|            textBox_dllPath.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            textBox_dllPath.Text = (string)Settings.Default[""dllPath""];
	|
	|            button_dllPath = new System.Windows.Forms.Button();
	|            button_dllPath.Parent = groupBox;
	|            button_dllPath.Font = new System.Drawing.Font(groupBox.Font, System.Drawing.FontStyle.Bold);
	|            button_dllPath.Text = ""..."";
	|            button_dllPath.Left = 115;
	|            button_dllPath.Top = textBox_dllPath.Top;
	|            button_dllPath.Width = 27;
	|            button_dllPath.Anchor = System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            button_dllPath.Click += Button_dllPath_Click;
	|
	|            buttonOK = new System.Windows.Forms.Button();
	|            buttonOK.Parent = settingsForm;
	|            buttonOK.Text = ""OK"";
	|            buttonOK.Left = 507;
	|            buttonOK.Top = 387;
	|            buttonOK.Width = 75;
	|            buttonOK.Anchor = System.Windows.Forms.AnchorStyles.Right |
	|                System.Windows.Forms.AnchorStyles.Bottom;
	|            buttonOK.Click += ButtonOK_Click;
	|
	|            buttonCancel = new System.Windows.Forms.Button();
	|            buttonCancel.Parent = settingsForm;
	|            buttonCancel.Text = ""Отмена"";
	|            buttonCancel.Left = 507;
	|            buttonCancel.Top = 420;
	|            buttonCancel.Width = 75;
	|            buttonCancel.Anchor = System.Windows.Forms.AnchorStyles.Right |
	|                System.Windows.Forms.AnchorStyles.Bottom;
	|            buttonCancel.Click += ButtonCancel_Click;
	|
	|            settingsForm.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
	|
	|            if (settingsForm.ShowDialog() == System.Windows.Forms.DialogResult.OK)
	|            {
	|                // Записываем значения в Settings
	|                Settings.Default[""osPath""] = textBox_osPath.Text;
	|                Settings.Default[""dllPath""] = textBox_dllPath.Text;
	|                Settings.Default.Save();
	|            }
	|        }
	|
	|        private void Button_dllPath_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.InitialDirectory = ""C:\\"";
	|            OpenFileDialog1.Filter = ""DLL files (*.dll)|*.dll|All files (*.*)|*.*"";
	|            OpenFileDialog1.FilterIndex = 1;
	|            OpenFileDialog1.RestoreDirectory = true;
	|            OpenFileDialog1.Multiselect = false;
	|            OpenFileDialog1.SupportMultiDottedExtensions = true;
	|
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            textBox_dllPath.Text = OpenFileDialog1.FileName;
	|        }
	|
	|        private void ButtonCancel_Click(object sender, EventArgs e)
	|        {
	|            settingsForm.DialogResult = System.Windows.Forms.DialogResult.Cancel;
	|        }
	|
	|        private void ButtonOK_Click(object sender, EventArgs e)
	|        {
	|            settingsForm.DialogResult = System.Windows.Forms.DialogResult.OK;
	|        }
	|
	|        private void button_osPath_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.InitialDirectory = ""C:\\"";
	|            OpenFileDialog1.Filter = ""EXE files (*.exe)|*.exe|All files (*.*)|*.*"";
	|            OpenFileDialog1.FilterIndex = 1;
	|            OpenFileDialog1.RestoreDirectory = true;
	|            OpenFileDialog1.Multiselect = false;
	|            OpenFileDialog1.SupportMultiDottedExtensions = true;
	|
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            textBox_osPath.Text = OpenFileDialog1.FileName;
	|        }
	|
	|        private void _exit_Click(object sender, EventArgs e)
	|        {
	|            //* 18.12.2021 perfolenta
	|            this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
	|            this.Close();
	|            //***
	|        }
	|
	|        private void _saveForm_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.SaveFileDialog saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
	|            saveFileDialog1.RestoreDirectory = true;
	|            saveFileDialog1.OverwritePrompt = true;
	|
	|            saveFileDialog1.Filter = ""OSD files(*.osd)|*.osd|All files(*.*)|*.*"";
	|            if (saveFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            System.IO.File.WriteAllText(saveFileDialog1.FileName, SaveForm.GetScriptText(saveFileDialog1.FileName), Encoding.UTF8);
	|
	|            //System.IO.File.WriteAllText(""C:\\444\\Форма1сохран.osd"", SaveForm.GetScriptText(), Encoding.UTF8);
	|        }
	|
	|        private void _loadForm_Click(object sender, EventArgs e)
	|        {
	|            ////////////////////OneScriptFormsDesigner.loadForm = true;
	|
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.RestoreDirectory = true;
	|            OpenFileDialog1.Filter = ""OSD files(*.osd)|*.osd|All files(*.*)|*.*"";
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            string strOSD = File.ReadAllText(OpenFileDialog1.FileName);
	|            //////string strOSD = File.ReadAllText(""C:\\444\\Форма1сохран.osd"");
	|            strOSD = strOSD.Replace("" "", """");
	|
	|            string[] result = null;
	|            string[] stringSeparators = new string[] { Environment.NewLine };
	|            string ComponentBlok = null;
	|            string rootBlok = null;
	|
	|            // соберем из блока конструкторов имена компонентов в CompNames. ///////////////////////////////////////////////////////////////////////////////////////////
	|            List<string> CompNames = new List<string>();
	|            Dictionary<string, Component> dictComponents = new Dictionary<string, Component>();
	|            string ConstructorBlok = OneScriptFormsDesigner.ParseBetween(strOSD, @""[<Конструкторы]"", @""[Конструкторы>]"");
	|            result = ConstructorBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|            for (int i = 0; i < result.Length; i++)
	|            {
	|                string s = OneScriptFormsDesigner.ParseBetween(result[i], null, @""=Ф."");
	|                if (s != null && s.Contains(""МенюЗначкаУведомления""))
	|                {
	|                    continue;
	|                }
	|                if (s != null)
	|                {
	|                    if (s.Substring(0, 2) != @""//"")
	|                    {
	|                        CompNames.Add(s);
	|                        dictComponents.Add(s, null);
	|                    }
	|                }
	|            }
	|            result = null;
	|
	|            ////// добавим вкладку и создадим на ней загружаемую форму. ////////////////////////////////////////////////////////////////////////////////////////////////
	|            DesignSurfaceExt2 var1 = IpDesignerCore.AddDesignSurface<Form>(670, 600, AlignmentModeEnum.SnapLines, new Size(1, 1), CompNames[0]);
	|            Component rootComponent = (Component)var1.ComponentContainer.Components[0];
	|
	|            dictComponents[CompNames[0]] = rootComponent;
	|
	|            string formName = CompNames[0];
	|            rootComponent.GetType().GetProperty(""Text"").SetValue(rootComponent, formName);
	|            rootBlok = OneScriptFormsDesigner.ParseBetween(strOSD, @""[<"" + formName + @""]"", @""["" + formName + @"">]"");
	|            if (rootBlok != null)
	|            {
	|                // установим для формы свойства
	|                result = rootBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strCurrent = result[i1];
	|                    if (strCurrent.Length >= 2)
	|                    {
	|                        if (strCurrent.Substring(0, 2) != @""//"")
	|                        {
	|                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, formName + ""."", ""="");
	|                            if (displayName != ""КнопкаОтмена"" && displayName != ""КнопкаПринять"" && !strCurrent.Contains(""Подсказка""))
	|                            {
	|                                string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                PropValueConverter.SetPropValue(rootComponent, displayName, strPropertyValue);
	|                            }
	|                        }
	|                    }
	|                }
	|                propertyGrid1.Refresh();
	|                result = null;
	|            }
	|
	|            ////// создадим остальные компоненты но пока не устанавливаем для них свойства, так как могут быть не все родители созданы. ///////////////////////////////
	|            IDesignSurfaceExt surface = pDesigner.DSME.ActiveDesignSurface;
	|            for (int i = 1; i < CompNames.Count; i++)
	|            {
	|                string componentName = CompNames[i];
	|                string type_NameRu = componentName;
	|                for (int i1 = 0; i1 < 10; i1++)
	|                {
	|                    type_NameRu = type_NameRu.Replace(i1.ToString(), """");
	|                }
	|
	|                string type_NameEn = ""osfDesigner."" + osfDesigner.OneScriptFormsDesigner.namesRuEn[type_NameRu];
	|                System.Type type = Type.GetType(type_NameEn);
	|
	|                if (type == typeof(osfDesigner.ImageList))
	|                {
	|                    ToolboxItem toolImageList1 = new System.Drawing.Design.ToolboxItem(typeof(System.Windows.Forms.ImageList));
	|                    Component comp1 = (Component)toolImageList1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    //  для comp1 уже создан дублер, получим его
	|                    osfDesigner.ImageList SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(comp1);
	|                    dictComponents[componentName] = SimilarObj;
	|                }
	|                else if (type == typeof(osfDesigner.MainMenu))
	|                {
	|                    ToolboxItem toolMainMenu1 = new System.Drawing.Design.ToolboxItem(typeof(System.Windows.Forms.MainMenu));
	|                    Component comp1 = (Component)toolMainMenu1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    //  для comp1 уже создан дублер, получим его
	|                    osfDesigner.MainMenu SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(comp1);
	|                    dictComponents[componentName] = SimilarObj;
	|                }
	|                else if (type == typeof(osfDesigner.TabPage))
	|                {
	|                    System.Windows.Forms.MessageBox.Show(""osfDesigner.TabPage"");
	|
	|                    ////Component control = (Component)surface.CreateControl(type, new Size(200, 20), new Point(10, 200));
	|
	|                    //ToolboxItem toolTabPage1 = new System.Drawing.Design.ToolboxItem(typeof(System.Windows.Forms.TabPage));
	|                    //Component comp1 = (Component)toolTabPage1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    ////  для comp1 уже создан дублер, получим его
	|                    //osfDesigner.TabPage SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(comp1);
	|                    //SimilarObj.OriginalObj = (System.Windows.Forms.TabPage)comp1;
	|                    ////////////////////////OneScriptFormsDesigner.AddToHashtable(comp1, SimilarObj);
	|                    //// присвоим дублёру значения всех свойств исходного объекта
	|                    //OneScriptFormsDesigner.PassProperties(comp1, SimilarObj);//без этой строки компонент глючит
	|                    //dictComponents[componentName] = comp1;
	|
	|                }
	|                else if (type == typeof(osfDesigner.FileSystemWatcher) ||
	|                    type == typeof(osfDesigner.FolderBrowserDialog) ||
	|                    type == typeof(osfDesigner.ColorDialog) ||
	|                    type == typeof(osfDesigner.FontDialog) ||
	|                    type == typeof(osfDesigner.OpenFileDialog) ||
	|                    type == typeof(osfDesigner.SaveFileDialog) ||
	|                    type == typeof(osfDesigner.NotifyIcon) ||
	|                    type == typeof(osfDesigner.ToolTip) ||
	|                    type == typeof(osfDesigner.Timer))
	|                {
	|                    ToolboxItem toolComp1 = new ToolboxItem(type);
	|                    Component comp1 = (Component)toolComp1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    dictComponents[componentName] = comp1;
	|                }
	|                else
	|                {
	|                    Component control1 = surface.CreateControl(type, new Size(200, 20), new Point(10, 200));
	|                    dictComponents[componentName] = control1;
	|                }
	|                dictComponents[componentName].Site.Name = componentName;
	|            }
	|
	|            ////// установим для компонентов свойства. //////////////////////////////////////////////////////////////////////////////////////////////////////////////
	|            for (int i = 1; i < CompNames.Count; i++)
	|            {
	|                string componentName = CompNames[i];
	|                Component control = dictComponents[componentName];
	|                ComponentBlok = OneScriptFormsDesigner.ParseBetween(strOSD, @""[<"" + componentName + @""]"", @""["" + componentName + @"">]"");
	|                if (ComponentBlok != null)
	|                {
	|                    result = ComponentBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                    for (int i1 = 0; i1 < result.Length; i1++)
	|                    {
	|                        string strCurrent = result[i1];
	|                        if (strCurrent.Length >= 2)
	|                        {
	|                            if (strCurrent.Substring(0, 2) != @""//"")
	|                            {
	|                                if (componentName.Contains(""СписокИзображений""))
	|                                {
	|                                    if (strCurrent.Contains(""=""))
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                    }
	|                                    else
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""."");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""Ф.Картинка(\u0022"", ""\u0022)"");
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""Календарь""))
	|                                {
	|                                    if (strCurrent.Contains(""=""))
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                        Control parent = (Control)dictComponents[parentName];
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                    }
	|                                    else
	|                                    {
	|                                        //Календарь1.ВыделенныеДаты.Добавить(Дата(2021, 11, 01, 00, 00, 00));
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""."");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""Дата("", ""))"");
	|                                        string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                        Control parent = (Control)dictComponents[parentName];
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""ГлавноеМеню""))
	|                                {
	|                                    //Меню0 = ГлавноеМеню1.ЭлементыМеню.Добавить(Ф.ЭлементМеню(""Меню0""));
	|                                    //Меню1 = Меню0.ЭлементыМеню.Добавить(Ф.ЭлементМеню(""Меню1""));
	|                                    if (strCurrent.Contains("".ЭлементыМеню.Добавить(Ф.ЭлементМеню(""))// создаем элемент меню или подменю
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", "".Добавить(Ф.ЭлементМеню("");
	|                                        string strPropertyValue = strCurrent;
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                    }
	|                                }
	|                                else if (control.GetType() == typeof(osfDesigner.FileSystemWatcher) ||
	|                                    control.GetType() == typeof(osfDesigner.FolderBrowserDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.ColorDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.FontDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.OpenFileDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.SaveFileDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.NotifyIcon) ||
	|                                    control.GetType() == typeof(osfDesigner.ToolTip) ||
	|                                    control.GetType() == typeof(osfDesigner.Timer))
	|                                {
	|                                    string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                    string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                }
	|                                else if (strCurrent.Contains(""Подсказка""))
	|                                {
	|                                    //Подсказка1.УстановитьПодсказку(Форма_0, ""фор"");
	|
	|                                    string displayName = ""ToolTip на "" + OneScriptFormsDesigner.ParseBetween(strCurrent, null, "".УстановитьПодсказку"");
	|                                    string strPropertyValue = strCurrent;
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                }
	|
	|                                //else if (componentName.Contains(""НаблюдательФайловойСистемы""))
	|                                //{
	|                                //    string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                //    string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                //    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                //}
	|                                else if (componentName.Contains(""Дерево""))
	|                                {
	|                                    string header = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                    if (header.Contains(""Дерево""))// обрабатываем как свойство дерева
	|                                    {
	|                                        if (strCurrent.Contains(""Узлы""))
	|                                        {
	|                                            //Узел0 = Дерево1.Узлы.Добавить(""Узел0"");
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""."");
	|                                            PropValueConverter.SetPropValue(control, displayName, strCurrent, null);
	|                                        }
	|                                        else
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                            Control parent = (Control)dictComponents[parentName];
	|                                            PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                        }
	|                                    }
	|                                    else// обрабатываем как свойство узла
	|                                    {
	|                                        if (strCurrent.Contains(""Узлы""))
	|                                        {
	|                                            //Узел1 = Узел0.Узлы.Добавить(""Узел1"");
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""."");
	|                                            PropValueConverter.SetPropValue(control, displayName, strCurrent, null);
	|                                        }
	|                                        else
	|                                        {
	|                                            //Узел3.ШрифтУзла = Ф.Шрифт(""Microsoft Sans Serif"", 7.8, Ф.СтильШрифта.Жирный);
	|                                            string displayName = ""Узлы"";
	|                                            PropValueConverter.SetPropValue(control, displayName, strCurrent, null);
	|                                        }
	|                                    }
	|                                }
	|                                else
	|                                {
	|                                    string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                    string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                    string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                    Control parent = (Control)dictComponents[parentName];
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                }
	|                            }
	|                        }
	|                    }
	|                    propertyGrid1.Refresh();
	|                    result = null;
	|                    ComponentBlok = null;
	|                }
	|
	|                // если компонент Дерево, нужно найти узел с самым большим номером в имени и занести его в OneScriptFormsDesigner.hashtableNodeName
	|                // чтобы нумерация вновь создаваемых узлов не повторялась
	|                if (componentName.Contains(""Дерево""))
	|                {
	|                    string maxNodeName = ""Узел0"";
	|                    // найдем компонент по имени
	|                    osfDesigner.TreeView TreeView1 = null;
	|                    IDesignerEventService des = (IDesignerEventService)pDesigner.DSME.GetService(typeof(IDesignerEventService));
	|                    if (des != null)
	|                    {
	|                        ComponentCollection components1 = des.ActiveDesigner.Container.Components;
	|                        foreach (Component comp in components1)
	|                        {
	|                            if (comp.Site.Name == componentName)
	|                            {
	|                                TreeView1 = (osfDesigner.TreeView)comp;
	|                                break;
	|                            }
	|                        }
	|                        if (TreeView1 != null)
	|                        {
	|                            maxNodeName = MaxNodeSearch(TreeView1, ref maxNodeName, null);
	|                            string nodeName = """";
	|                            if (maxNodeName != ""Узел0"")
	|                            {
	|                                while (maxNodeName != nodeName)
	|                                {
	|                                    nodeName = OneScriptFormsDesigner.RevertNodeName(TreeView1);
	|                                }
	|                            }
	|                        }
	|                    }
	|                }
	|            }
	|
	|            // если для формы заданы КнопкаОтмена и/или КнопкаПринять, установим их
	|            if (rootBlok != null)
	|            {
	|                // Установим для формы свойства.
	|                result = rootBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strCurrent = result[i1];
	|                    if (strCurrent.Length >= 2)
	|                    {
	|                        if (strCurrent.Substring(0, 2) != @""//"")
	|                        {
	|                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, formName + ""."", ""="");
	|                            if (displayName == ""КнопкаОтмена"" || displayName == ""КнопкаПринять"")
	|                            {
	|                                string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                PropValueConverter.SetPropValue(rootComponent, displayName, strPropertyValue);
	|                            }
	|
	|                            if (strCurrent.Contains(""Подсказка""))
	|                            {
	|                                displayName = ""ToolTip на "" + OneScriptFormsDesigner.ParseBetween(strCurrent, null, "".УстановитьПодсказку"");
	|                                string strPropertyValue = strCurrent;
	|                                PropValueConverter.SetPropValue(rootComponent, displayName, strPropertyValue);
	|                            }
	|                        }
	|                    }
	|                }
	|                propertyGrid1.Refresh();
	|            }
	|
	|            ComponentCollection ctrlsExisting = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost().Container.Components;
	|            ISelectionService iSel = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost().GetService(typeof(ISelectionService)) as ISelectionService;
	|            if (iSel == null)
	|            {
	|                return;
	|            }
	|            iSel.SetSelectedComponents(new IComponent[] { ctrlsExisting[0] });
	|
	|            pDesigner.DSME.PropertyGridHost.ReloadTreeView();
	|            pDesigner.DSME.PropertyGridHost.ChangeSelectNode((Component)ctrlsExisting[0]);
	|
	|            //////////////////OneScriptFormsDesigner.loadForm = false;
	|        }
	|
	|        public static string MaxNodeSearch(osfDesigner.TreeView treeView, ref string maxNodeName, System.Windows.Forms.TreeNodeCollection treeNodes = null)
	|        {
	|            System.Windows.Forms.TreeNodeCollection _treeNodes;
	|            if (treeNodes == null)
	|            {
	|                _treeNodes = treeView.Nodes;
	|            }
	|            else
	|            {
	|                _treeNodes = treeNodes;
	|            }
	|            osfDesigner.MyTreeNode treeNode = null;
	|            for (int i = 0; i < _treeNodes.Count; i++)
	|            {
	|                treeNode = (osfDesigner.MyTreeNode)_treeNodes[i];
	|                int numTreeNodeName = Int32.Parse(treeNode.Name.Replace(""Узел"", """"));
	|                int num_maxNodeName = Int32.Parse(maxNodeName.Replace(""Узел"", """"));
	|                if (numTreeNodeName > num_maxNodeName)
	|                {
	|                    maxNodeName = treeNode.Name;
	|                }
	|                if (treeNode.Nodes.Count > 0)
	|                {
	|                    MaxNodeSearch(treeView, ref maxNodeName, treeNode.Nodes);
	|                }
	|            }
	|            return maxNodeName;
	|        }
	|
	|        private void _form_Click(object sender, EventArgs e)
	|        {
	|            osfDesigner.pDesigner.SplitterpDesigner.Visible = true;
	|            osfDesigner.pDesigner.CodePanel.Visible = false;
	|            this._edit.Enabled = true;//""Правка""
	|            this._tools.Enabled = true;//""Инструменты""
	|            osfDesigner.pDesigner.SplitterpDesigner.Panel2Collapsed = false;
	|            pnl4Toolbox.Visible = true;
	|            this._form.Enabled = false;
	|            this._code.Enabled = true;
	|            this._form.CheckState = System.Windows.Forms.CheckState.Checked;
	|            this._code.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|        }
	|
	|        private void _code_Click(object sender, EventArgs e)
	|        {
	|            SaveScript.comps.Clear();
	|            osfDesigner.pDesigner.SplitterpDesigner.Visible = false;
	|            osfDesigner.pDesigner.CodePanel.Visible = true;
	|            this._edit.Enabled = false;//""Правка""
	|            this._tools.Enabled = false;//""Инструменты""
	|            osfDesigner.pDesigner.SplitterpDesigner.Panel2Collapsed = true;
	|            pnl4Toolbox.Visible = false;
	|            this._form.Enabled = true;
	|            this._code.Enabled = false;
	|            this._form.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            this._code.CheckState = System.Windows.Forms.CheckState.Checked;
	|            osfDesigner.pDesigner.RichTextBox.Text = SaveScript.GetScriptText();
	|        }
	|
	|        public string Version
	|        {
	|            get
	|            {
	|                if (string.IsNullOrEmpty(_version))
	|                {
	|                    // Получение версии файла запущенной сборки
	|                    System.Diagnostics.FileVersionInfo FVI = System.Diagnostics.FileVersionInfo.GetVersionInfo(System.Reflection.Assembly.GetExecutingAssembly().Location);
	|                    _version = FVI.ProductVersion;
	|                }
	|                return _version;
	|            }
	|        }
	|
	|        // Очистка используемых ресурсов.
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing && (components != null))
	|            {
	|                components.Dispose();
	|            }
	|            base.Dispose(disposing);
	|        }
	|
	|        public void ChangeImage(bool change)
	|        {
	|            if (change)
	|            {
	|                _tabOrder1.CheckState = System.Windows.Forms.CheckState.Checked;
	|            }
	|            else
	|            {
	|                _tabOrder1.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            }
	|        }
	|
	|        public Control GetmainForm()
	|        {
	|            return this;
	|        }
	|
	|        private void pDesignerMainForm_Load(object sender, EventArgs e)
	|        {
	|            // таймер для обеспечения срабатывания по правой кнопке мыши сворачивания раскрытого свойства СписокИзображений
	|            this.timerLoad = new System.Windows.Forms.Timer();
	|            this.timerLoad.Enabled = true;
	|            this.timerLoad.Tick += new System.EventHandler(this.timerLoad_Tick);
	|        }
	|
	|        private void _generateScript_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.SaveFileDialog saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
	|            saveFileDialog1.RestoreDirectory = true;
	|            saveFileDialog1.OverwritePrompt = true;
	|
	|            saveFileDialog1.Filter = ""OS files(*.os)|*.os|All files(*.*)|*.*"";
	|            if (saveFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            SaveScript.comps.Clear();
	|            System.IO.File.WriteAllText(saveFileDialog1.FileName, SaveScript.GetScriptText());
	|        }
	|
	|        private void _unDo_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.UndoOnDesignSurface();
	|        }
	|
	|        private void _reDo_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.RedoOnDesignSurface();
	|        }
	|
	|        private void OnMenuClick(object sender, EventArgs e)
	|        {
	|            string cmd = (sender as ToolStripMenuItem).Text;
	|            if (cmd == ""Вырезать"")
	|            {
	|                IpDesignerCore.CutOnDesignSurface();
	|            }
	|            else if (cmd == ""Копировать"")
	|            {
	|                IpDesignerCore.CopyOnDesignSurface();
	|            }
	|            else if (cmd == ""Вставить"")
	|            {
	|                IpDesignerCore.PasteOnDesignSurface();
	|            }
	|            else if (cmd == ""Удалить"")
	|            {
	|                IpDesignerCore.DeleteOnDesignSurface();
	|            }
	|        }
	|
	|        private void _tabOrder_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.SwitchTabOrder();
	|
	|            if (_tabOrder.CheckState == System.Windows.Forms.CheckState.Unchecked)
	|            {
	|                _tabOrder.CheckState = System.Windows.Forms.CheckState.Checked;
	|            }
	|            else if (_tabOrder.CheckState == System.Windows.Forms.CheckState.Checked)
	|            {
	|                _tabOrder.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            }
	|        }
	|
	|        private void _about_Click(object sender, EventArgs e)
	|        {
	|            string str1 = ""Дизайнер форм от ahyahy "" + Environment.NewLine + ""Версия 1.0.0.0 "" + Environment.NewLine + ""(Создана на основе программы: "" + Environment.NewLine + ""picoFormDesigner coded by Paolo Foti "" + Environment.NewLine + ""Version is: "" + Version + "")"";
	|            MessageBox.Show(str1, ""Дизайнер форм для OneScriptForms"", MessageBoxButtons.OK, MessageBoxIcon.Question);
	|        }
	|
	|
	|        //* 17.12.2021 perfolenta
	|
	|        private bool ГотовоКЗакрытию()
	|        {
	|            if (pDesignerCore.Dirty)
	|            {
	|                string str1 = ""Редактируемая форма изменена! Изменения будут потеряны!\n\nВыйти из конструктора форм?"";
	|                if (MessageBox.Show(str1, ""Дизайнер форм для OneScriptForms"", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != System.Windows.Forms.DialogResult.Yes)
	|                    return false;
	|            }
	|            return true;
	|        }
	|
	|
	|        private void pDesignerMainForm_Closing(object sender, CancelEventArgs e)
	|        {
	|            if (!ГотовоКЗакрытию())
	|            {
	|                e.Cancel = true;
	|                return;
	|            }
	|
	|            if (DestroyDesignSurfaces())
	|                e.Cancel = false;
	|            else
	|                e.Cancel = true;
	|
	|        }
	|
	|        private bool DestroyDesignSurfaces()
	|        {
	|            //????????????? тут надо уничтожить все DesignSurfaces и вернуть успешность этой операции
	|
	|            return true;
	|        }
	|
	|        //***
	|
	|    }
	|
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\pDesignerMainFormPFL.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyFormMenuConverter : ReferenceConverter
	|    {
	|        public MyFormMenuConverter(Type type) : base(type)
	|        {
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == null)
	|            {
	|                throw new ArgumentNullException(""destinationType"");
	|            }
	|
	|            if (destinationType == typeof(string))
	|            {
	|                if (value != null)
	|                {
	|                    if (context != null)
	|                    {
	|                        IReferenceService refSvc = (IReferenceService)context.GetService(typeof(IReferenceService));
	|                        if (refSvc != null)
	|                        {
	|                            string name = refSvc.GetName(value);
	|                            if (name != null)
	|                            {
	|                                return name;
	|                            }
	|                        }
	|                    }
	|                    if (!System.Runtime.InteropServices.Marshal.IsComObject(value) && value is IComponent)
	|                    {
	|                        IComponent comp = (IComponent)value;
	|                        ISite site = comp.Site;
	|                        if (site != null)
	|                        {
	|                            string name = site.Name;
	|                            if (name != null)
	|                            {
	|                                return name;
	|                            }
	|                        }
	|                    }
	|                    return String.Empty;
	|                }
	|                return ""(отсутствует)"";
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyFormMenuConverter.cs");
	
	СтрВыгрузки = 
	"using System.Collections.Generic;
	|using System.Collections;
	|using System.ComponentModel.Design;
	|using System.ComponentModel;
	|using System.IO;
	|using System.Reflection;
	|using System.Windows.Forms;
	|using System;
	|
	|namespace osfDesigner
	|{
	|    public class SaveForm
	|    {
	|        public static System.Windows.Forms.TreeView TreeView1 = pDesigner.DSME.PropertyGridHost.TreeView;
	|        public static System.Windows.Forms.ToolBarButton ButtonSort1 = pDesigner.DSME.PropertyGridHost.ButtonSort;
	|
	|        public static Dictionary<string, Component> comps = new Dictionary<string, Component>();
	|        private static string Template1;
	|        private static readonly string TemplateOriginal =
	|@""[<Конструкторы]
	|[Конструкторы>]
	|[<Свойства]
	|[Свойства>]
	|"";
	|        private static string path;
	|
	|        public static string GetScriptText(string fileName)
	|        {
	|            // 1. Получить перечень текущих свойств формы и всех компонентов
	|            // 2. Выгрузить обязательные свойства согласно RequiredValues.
	|            // 3. Сравнить текущие свойства с DefaultValues и измененные выгрузить.
	|            // 4. Файл сохраненной формы состоит из разделов. Например раздел конструкторов заключен в ограничители [<Конструкторы] и [Конструкторы>]
	|
	|            path = fileName.Substring(0, fileName.LastIndexOf('\\') + 1);
	|
	|            comps.Clear();
	|            Template1 = TemplateOriginal;
	|            DesignSurfaceManagerExt DesignSurfaceManagerExt = pDesigner.DSME;
	|            IDesignerEventService des = (IDesignerEventService)DesignSurfaceManagerExt.GetService(typeof(IDesignerEventService));
	|            if (des != null)
	|            {
	|                string compName = """";
	|                ComponentCollection ctrls = des.ActiveDesigner.Container.Components;
	|                ArrayList ctrlsArray = new ArrayList();
	|                ArrayList ctrlsExisting = new ArrayList();
	|                for (int i = 0; i < ctrls.Count; i++)
	|                {
	|                    ctrlsExisting.Add(ctrls[i]);
	|                }
	|
	|                // Проверим наличие подсказок.
	|                bool toolTipPresent = false;
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    if (comp.Site.Name.Contains(""Подсказка""))
	|                    {
	|                        toolTipPresent = true;
	|                    }
	|                }
	|
	|                string strComp = """";
	|                // Запишем в выгрузку имена компонентов в раздел [<Конструкторы].
	|                // Раздел конструкторов будет определять очередность создания компонентов.
	|                for (int i = 0; i < ctrlsExisting.Count; i++)
	|                {
	|                    Component comp = (Component)ctrlsExisting[i];
	|                    compName = comp.Site.Name;
	|                    comps.Add(compName, comp); // Установим соответствие между именем компонента и компонентом.
	|                    string trimName = compName;
	|                    for (int i1 = 0; i1 < 10; i1++)
	|                    {
	|                        trimName = trimName.Replace(i1.ToString(), """");
	|                    }
	|                    strComp = compName;
	|                    if (comp.GetType() == typeof(Form))
	|                    {
	|                        strComp = compName + "" = Ф.Форма();"";
	|                        Template1 = Template1.Replace(@""[<Конструкторы]"", @""[<Конструкторы]"" + Environment.NewLine + strComp);
	|                    }
	|                    else
	|                    {
	|                        strComp = """" + compName + "" = Ф."" + trimName + ""();"";
	|                        Template1 = Template1.Replace(@""[Конструкторы>]"", strComp + Environment.NewLine + @""[Конструкторы>]"");
	|                    }
	|                }
	|                // Запишем в выгрузку свойства компонентов.
	|                // Последовательность возмем из древовидной структуры TreeView при сортировке ""В порядке создания"".
	|                bool stateSort = ButtonSort1.Pushed;
	|                ButtonSort1.Pushed = false;
	|                Component comp2 = OneScriptFormsDesigner.HighlightedComponent();
	|                pDesigner.DSME.PropertyGridHost.ReloadTreeView();
	|                if (comp2 != null)
	|                {
	|                    pDesigner.DSME.PropertyGridHost.ChangeSelectNode(comp2);
	|                }
	|
	|                ArrayList objArrayList2 = new ArrayList(); // Содержит имена компонентов в иерархии дерева компонентов.
	|                GetNodes1(TreeView1, ref objArrayList2);
	|                for (int i = 0; i < objArrayList2.Count; i++)
	|                {
	|                    Component comp = comps[(string)objArrayList2[i]];
	|                    Component comp1 = null;
	|                    if (comp.GetType() == typeof(System.Windows.Forms.TabPage))
	|                    {
	|                        try
	|                        {
	|                            comp1 = (Component)OneScriptFormsDesigner.RevertSimilarObj(comp);
	|                        }
	|                        catch { }
	|                        if (comp1 != null)
	|                        {
	|                            comp = comp1;
	|                        }
	|                    }
	|                    else if (comp.GetType() == typeof(System.Windows.Forms.ImageList))
	|                    {
	|                        try
	|                        {
	|                            comp1 = (Component)OneScriptFormsDesigner.RevertSimilarObj(comp);
	|                        }
	|                        catch { }
	|                        if (comp1 != null)
	|                        {
	|                            comp = comp1;
	|                        }
	|                    }
	|                    else if (comp.GetType() == typeof(System.Windows.Forms.MainMenu))
	|                    {
	|                        try
	|                        {
	|                            comp1 = (Component)OneScriptFormsDesigner.RevertSimilarObj(comp);
	|                        }
	|                        catch { }
	|                        if (comp1 != null)
	|                        {
	|                            comp = comp1;
	|                        }
	|                    }
	|                    compName = comp.Site.Name;
	|                    Template1 = Template1.Replace(@""[Свойства>]"", @""[<"" + compName + ""]"" + Environment.NewLine + @""[Свойства>]"");
	|
	|                    // Установим для элемента родителя.
	|                    string strParent = """";
	|                    try
	|                    {
	|                        if (comp.GetType() == typeof(osfDesigner.TabPage))
	|                        {
	|                            strParent = ((osfDesigner.TabPage)comp).OriginalObj.Parent.Name;
	|                        }
	|                        else
	|                        {
	|                            strParent = ((dynamic)comp).Parent.Name;
	|                        }
	|                    }
	|                    catch { }
	|                    if (strParent != """")
	|                    {
	|                        AddToScript(compName + "".Родитель = "" + strParent + "";"");
	|                    }
	|
	|                    if (compName.Contains(""ЗначокУведомления""))
	|                    {
	|                        if (comp.GetType().GetProperty(""Icon"").GetValue(comp) == null)
	|                        {
	|                            string strIcon = compName + "".Значок = Ф.Значок(\u0022"" + ""AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYAAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//"" + ""\u0022"" + ""); // обязательно назначить значок"";
	|                            AddToScript(strIcon);
	|                        }
	|                        string strVisible = compName + "".Отображать = Истина;"";
	|                        AddToScript(strVisible);
	|                    }
	|
	|                    PropertyInfo[] myPropertyInfo = comp.GetType().GetProperties();
	|                    for (int i1 = 0; i1 < myPropertyInfo.Length; i1++)
	|                    {
	|                        string valueName = OneScriptFormsDesigner.GetDisplayName(comp, myPropertyInfo[i1].Name);
	|                        if (valueName != """")
	|                        {
	|                            PropertyDescriptor pd = TypeDescriptor.GetProperties(comp)[myPropertyInfo[i1].Name];
	|                            try
	|                            {
	|                                string compValue = OneScriptFormsDesigner.ObjectConvertToString(pd.GetValue(comp));
	|                                RequiredDefaultValuesValues(comp, compName, valueName, compValue);
	|                            }
	|                            catch { }
	|                        }
	|                    }
	|
	|                    // Обработаем подсказку, если создана хоть одна подсказка.
	|                    if (toolTipPresent)
	|                    {
	|                        Hashtable Hashtable1 = null;
	|                        try
	|                        {
	|                            Hashtable1 = ((dynamic)comp).ToolTip;
	|                        }
	|                        catch { }
	|                        if (Hashtable1 != null)
	|                        {
	|                            foreach (DictionaryEntry de in Hashtable1)
	|                            {
	|                                string nameToolTip = (string)de.Key;
	|                                string compValue = (string)de.Value;
	|                                compValue = compValue.Replace(Environment.NewLine, ""\u0022 + Ф.Окружение().НоваяСтрока + \u0022"");
	|                                AddToScript(nameToolTip + "".УстановитьПодсказку("" + compName + "", \u0022"" + compValue + ""\u0022);"");
	|                            }
	|                        }
	|                    }
	|                    Template1 = Template1.Replace(@""[Свойства>]"", @""["" + compName + "">]"" + Environment.NewLine + @""[Свойства>]"");
	|                }
	|                ButtonSort1.Pushed = stateSort;
	|                Component comp3 = OneScriptFormsDesigner.HighlightedComponent();
	|                pDesigner.DSME.PropertyGridHost.ReloadTreeView();
	|                if (comp3 != null)
	|                {
	|                    pDesigner.DSME.PropertyGridHost.ChangeSelectNode(comp3);
	|                }
	|            }
	|            return ReSort(Template1);
	|        }
	|
	|        // Переформируем выгруженную форму.
	|        private static string ReSort(string Template1)
	|        {
	|            string[] stringSeparators = new string[] { Environment.NewLine };
	|            string str1 = Template1;
	|
	|            // Удалим повторы строк.
	|            string strProps = OneScriptFormsDesigner.ParseBetween(str1, @""[<Свойства]"", @""[Свойства>]"");
	|            ArrayList ArrayList2 = OneScriptFormsDesigner.StrFindBetween(strProps, @""[<"", @"">]"", false);
	|            ArrayList repeats = new ArrayList(); // Массив строк без повторов.
	|            string strBefore;
	|            string strAfter;
	|            for (int i = 0; i < ArrayList2.Count; i++)
	|            {
	|                strBefore = """";
	|                strAfter = """";
	|                repeats.Clear();
	|                string fragment1 = (string)ArrayList2[i];
	|                string[] result = fragment1.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strCurrent = result[i1];
	|                    if (!strCurrent.Contains(@""// блок""))
	|                    {
	|                        strBefore = strBefore + strCurrent + System.Environment.NewLine;
	|                        if (!repeats.Contains(strCurrent))
	|                        {
	|                            repeats.Add(strCurrent);
	|                        }
	|                    }
	|                }
	|                for (int i2 = 0; i2 < repeats.Count; i2++)
	|                {
	|                    strAfter = strAfter + repeats[i2] + System.Environment.NewLine;
	|                }
	|                if (strBefore != strAfter && strBefore.Length != 0)
	|                {
	|                    str1 = str1.Replace(strBefore, strAfter);
	|                }
	|            }
	|
	|            // Зададим порядок свойств во фрагментах.
	|            strProps = OneScriptFormsDesigner.ParseBetween(str1, @""[<Свойства]"", @""[Свойства>]"");
	|            ArrayList2 = OneScriptFormsDesigner.StrFindBetween(strProps, @""[<"", @"">]"", false);
	|            for (int i = 0; i < ArrayList2.Count; i++)
	|            {
	|                string fragment1 = (string)ArrayList2[i];
	|                string namecomp = OneScriptFormsDesigner.ParseBetween(fragment1, @""[<"", @""]"");
	|
	|                string fragment2 = """";
	|                SortedList SortedList1 = new SortedList();
	|                SortedList1.Capacity = 1000;
	|                string[] result = fragment1.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strResult = result[i1];
	|                    if (i1 == 0)
	|                    {
	|                        SortedList1.Add(i1, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Родитель =""))
	|                    {
	|                        SortedList1.Add(1, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Стыковка =""))
	|                    {
	|                        SortedList1.Add(2, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Размер =""))
	|                    {
	|                        SortedList1.Add(3, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""ПорядокОбхода =""))
	|                    {
	|                        SortedList1.Add(4, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Флажки =""))
	|                    {
	|                        SortedList1.Add(5, strResult);
	|                    }
	|                    else
	|                    {
	|                        SortedList1.Add(i1 + 500, strResult);
	|                    }
	|                }
	|                ArrayList ArrayList3 = new ArrayList();
	|                for (int i1 = 0; i1 < SortedList1.Capacity; i1++)
	|                {
	|                    if (SortedList1[i1] != null)
	|                    {
	|                        ArrayList3.Add(SortedList1[i1]);
	|                    }
	|                }
	|                for (int i4 = 0; i4 < ArrayList3.Count; i4++)
	|                {
	|                    string strArrayList = ((string)ArrayList3[i4]).Replace(Environment.NewLine, """").Trim();
	|                    if (i4 == 0)
	|                    {
	|                        fragment2 = fragment2 + strArrayList;
	|                    }
	|                    else
	|                    {
	|                        fragment2 = fragment2 + Environment.NewLine + strArrayList;
	|                    }
	|
	|                }
	|                str1 = str1.Replace(fragment1, fragment2);
	|            }
	|            comps.Clear();
	|            return str1;
	|        }
	|
	|        private static void RequiredDefaultValuesValues(dynamic comp, string compName, string valueName, string compValue)
	|        {
	|            if (valueName == ""ДвойнаяБуферизация"" ||
	|                valueName == ""РежимАвтоМасштабирования"" ||
	|                valueName == ""DoubleBuffered"")
	|            {
	|                return;
	|            }
	|
	|            if (comp.RequiredValues.Contains(valueName + "" ==""))
	|            {
	|                TextToScript(compName, valueName, compValue, comp);
	|            }
	|            else
	|            {
	|                if (!comp.DefaultValues.Contains(valueName + "" == "" + compValue))
	|                {
	|                    try
	|                    {
	|                        TextToScript(compName, valueName, compValue, comp);
	|                    }
	|                    catch
	|                    {
	|                        System.Windows.Forms.MessageBox.Show(""Не обработано: на компоненте = "" + compName + "" valueName="" + valueName + "" compValue="" + compValue);
	|                    }
	|                }
	|            }
	|        }
	|
	|        private static void TextToScript(string compName, string valueName, string compValue, dynamic val = null)
	|        {
	|            // Пропустим некоторые свойства.
	|            if (val.GetType() == typeof(osfDesigner.StatusBar) && (valueName == ""Положение"" || valueName == ""Размер""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.Splitter) && (valueName == ""Курсор"" || valueName == ""Положение""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.MenuItemEntry) && (valueName == ""Текст""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.MyTreeNode) && (valueName == ""ПолныйПуть""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridTableStyle) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridTextBoxColumn) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridBoolColumn) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|	
	|            if (val.GetType() == typeof(osfDesigner.Form) && (valueName == ""Стыковка""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.Form) && (valueName == ""Якорь""))
	|            {
	|                return;
	|            }
	|            // Закончили пропуск свойств.
	|
	|            if (compValue == ""Ложь"" || compValue == ""Истина"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ЭлементыМеню"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.Menu.MenuItemCollection MenuItemCollection1 = (System.Windows.Forms.Menu.MenuItemCollection)val.MenuItems;
	|                    if (MenuItemCollection1.Count > 0)
	|                    {
	|                        MenuItemEntry MenuItemEntry1;
	|                        for (int i = 0; i < MenuItemCollection1.Count; i++)
	|                        {
	|                            MenuItemEntry1 = OneScriptFormsDesigner.RevertSimilarObj(MenuItemCollection1[i]);
	|                            string strName = MenuItemEntry1.Name.Contains(""Сепаратор"") ? ""-"" : MenuItemEntry1.Text;
	|                            AddToScript(MenuItemEntry1.Name + "" = "" + compName + "".ЭлементыМеню.Добавить(Ф.ЭлементМеню(\u0022"" + strName + ""\u0022));"");
	|                            PropComponent(MenuItemEntry1);
	|                            if (MenuItemEntry1.MenuItems.Count > 0)
	|                            {
	|                                GetMenuItems((MenuItemEntry)MenuItemEntry1);
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Меню"")
	|            {
	|                if (compValue != null)
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + compValue + "";"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""ОбластьСсылки"")
	|            {
	|                if (val != null)
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ОбластьСсылки("" + compValue.Replace("";"", "","") + "");"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""Подэлементы"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ListViewItem.ListViewSubItemCollection ListViewSubItemCollection1 = (System.Windows.Forms.ListViewItem.ListViewSubItemCollection)val.SubItems;
	|                    if (ListViewSubItemCollection1.Count > 0)
	|                    {
	|                        osfDesigner.ListViewSubItem ListViewSubItem1;
	|                        for (int i = 1; i < ListViewSubItemCollection1.Count; i++) // Первый индекс должен быть 1, а не 0.
	|                        {
	|                            ListViewSubItem1 = (osfDesigner.ListViewSubItem)ListViewSubItemCollection1[i];
	|                            AddToScript(ListViewSubItem1.Name + "" = Ф.ПодэлементСпискаЭлементов();"");
	|                            PropComponent(ListViewSubItem1);
	|                            AddToScript(compName + "".Подэлементы.Добавить("" + ListViewSubItem1.Name + "");"");
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Элементы"")
	|            {
	|                if (val != null)
	|                {
	|                    if (val.GetType() == typeof(osfDesigner.ComboBox))
	|                    {
	|                        System.Windows.Forms.ComboBox.ObjectCollection ComboBoxObjectCollection1 = (System.Windows.Forms.ComboBox.ObjectCollection)val.Items;
	|                        if (ComboBoxObjectCollection1.Count > 0)
	|                        {
	|                            osfDesigner.ListItemComboBox ListItemComboBox1;
	|                            string strValue = """";
	|                            for (int i = 0; i < ComboBoxObjectCollection1.Count; i++)
	|                            {
	|                                ListItemComboBox1 = (osfDesigner.ListItemComboBox)ComboBoxObjectCollection1[i];
	|                                if (ListItemComboBox1.ValueType == osfDesigner.DataType.Строка)
	|                                {
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, \u0022"" + ListItemComboBox1.Text + ""\u0022));"";
	|                                }
	|                                else if (ListItemComboBox1.ValueType == osfDesigner.DataType.Дата)
	|                                {
	|                                    DateTime DateTime1 = ListItemComboBox1.ValueDateTime;
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, "" +
	|                                        ""Дата("" +
	|                                        DateTime1.ToString(""yyyy"") + "", "" +
	|                                        DateTime1.ToString(""MM"") + "", "" +
	|                                        DateTime1.ToString(""dd"") + "", "" +
	|                                        DateTime1.ToString(""HH"") + "", "" +
	|                                        DateTime1.ToString(""mm"") + "", "" +
	|                                        DateTime1.ToString(""ss"") + "")"" + ""));"";
	|                                }
	|                                else if (ListItemComboBox1.ValueType == osfDesigner.DataType.Булево)
	|                                {
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, "" + ListItemComboBox1.Text + ""));"";
	|                                }
	|                                else if (ListItemComboBox1.ValueType == osfDesigner.DataType.Число)
	|                                {
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, "" + ListItemComboBox1.Text + ""));"";
	|                                }
	|                                if (i == 0)
	|                                {
	|                                    strValue = strValue.TrimStart(' ');
	|                                }
	|                                if (i < (ComboBoxObjectCollection1.Count - 1))
	|                                {
	|                                    strValue = strValue + Environment.NewLine;
	|                                }
	|                            }
	|                            AddToScript(strValue);
	|                        }
	|                    }
	|                    else if (val.GetType() == typeof(osfDesigner.ListBox))
	|                    {
	|                        System.Windows.Forms.ListBox.ObjectCollection ListBoxObjectCollection1 = (System.Windows.Forms.ListBox.ObjectCollection)val.Items;
	|                        if (ListBoxObjectCollection1.Count > 0)
	|                        {
	|                            osfDesigner.ListItemListBox ListItemListBox1;
	|                            string strValue = """";
	|                            for (int i = 0; i < ListBoxObjectCollection1.Count; i++)
	|                            {
	|                                ListItemListBox1 = (osfDesigner.ListItemListBox)ListBoxObjectCollection1[i];
	|                                if (ListItemListBox1.ValueType == osfDesigner.DataType.Строка)
	|                                {
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, \u0022"" + ListItemListBox1.Text + ""\u0022));"";
	|                                }
	|                                else if (ListItemListBox1.ValueType == osfDesigner.DataType.Дата)
	|                                {
	|                                    DateTime DateTime1 = ListItemListBox1.ValueDateTime;
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, "" +
	|                                        ""Дата("" +
	|                                        DateTime1.ToString(""yyyy"") + "", "" +
	|                                        DateTime1.ToString(""MM"") + "", "" +
	|                                        DateTime1.ToString(""dd"") + "", "" +
	|                                        DateTime1.ToString(""HH"") + "", "" +
	|                                        DateTime1.ToString(""mm"") + "", "" +
	|                                        DateTime1.ToString(""ss"") + "")"" + ""));"";
	|                                }
	|                                else if (ListItemListBox1.ValueType == osfDesigner.DataType.Булево)
	|                                {
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, "" + ListItemListBox1.Text + ""));"";
	|                                }
	|                                else if (ListItemListBox1.ValueType == osfDesigner.DataType.Число)
	|                                {
	|                                    strValue = strValue + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, "" + ListItemListBox1.Text + ""));"";
	|                                }
	|                                if (i == 0)
	|                                {
	|                                    strValue = strValue.TrimStart(' ');
	|                                }
	|                                if (i < (ListBoxObjectCollection1.Count - 1))
	|                                {
	|                                    strValue = strValue + Environment.NewLine;
	|                                }
	|                            }
	|                            AddToScript(strValue);
	|                        }
	|                    }
	|                    else if (val.GetType() == typeof(osfDesigner.ListView))
	|                    {
	|                        System.Windows.Forms.ListView.ListViewItemCollection ListViewItemCollection1 = (System.Windows.Forms.ListView.ListViewItemCollection)val.Items;
	|                        if (ListViewItemCollection1.Count > 0)
	|                        {
	|                            osfDesigner.ListViewItem ListViewItem1;
	|                            for (int i = 0; i < ListViewItemCollection1.Count; i++)
	|                            {
	|                                ListViewItem1 = (osfDesigner.ListViewItem)ListViewItemCollection1[i];
	|                                AddToScript(ListViewItem1.Name + "" = Ф.ЭлементСпискаЭлементов();"");
	|                                PropComponent(ListViewItem1);
	|                                AddToScript(compName + "".Элементы.Добавить("" + ListViewItem1.Name + "");"");
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Панели"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.StatusBar.StatusBarPanelCollection StatusBarPanelCollection1 = (System.Windows.Forms.StatusBar.StatusBarPanelCollection)val.Panels;
	|                    if (StatusBarPanelCollection1.Count > 0)
	|                    {
	|                        osfDesigner.StatusBarPanel StatusBarPanel1;
	|                        for (int i = 0; i < StatusBarPanelCollection1.Count; i++)
	|                        {
	|                            StatusBarPanel1 = (osfDesigner.StatusBarPanel)StatusBarPanelCollection1[i];
	|                            AddToScript(StatusBarPanel1.Name + "" = Ф.ПанельСтрокиСостояния();"");
	|                            AddToScript(compName + "".Панели.Добавить("" + StatusBarPanel1.Name + "");"");
	|                            PropComponent(StatusBarPanel1);
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Колонки"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ListView.ColumnHeaderCollection ColumnHeaderCollection1 = (System.Windows.Forms.ListView.ColumnHeaderCollection)val.Columns;
	|                    if (ColumnHeaderCollection1.Count > 0)
	|                    {
	|                        osfDesigner.ColumnHeader ColumnHeader1;
	|                        for (int i = 0; i < ColumnHeaderCollection1.Count; i++)
	|                        {
	|                            ColumnHeader1 = (osfDesigner.ColumnHeader)ColumnHeaderCollection1[i];
	|                            AddToScript(ColumnHeader1.Name + "" = Ф.Колонка();"");
	|                            PropComponent(ColumnHeader1);
	|                            AddToScript(compName + "".Колонки.Добавить("" + ColumnHeader1.Name + "");"");
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""СтилиКолонкиСеткиДанных"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.GridColumnStylesCollection GridColumnStylesCollection1 = (System.Windows.Forms.GridColumnStylesCollection)val.GridColumnStyles;
	|                    if (GridColumnStylesCollection1.Count > 0)
	|                    {
	|                        for (int i = 0; i < GridColumnStylesCollection1.Count; i++)
	|                        {
	|                            dynamic Style1 = GridColumnStylesCollection1[i];
	|                            if (Style1.GetType() == typeof(osfDesigner.DataGridBoolColumn))
	|                            {
	|                                osfDesigner.DataGridBoolColumn GridColumnStyle1 = (osfDesigner.DataGridBoolColumn)Style1;
	|                                AddToScript(GridColumnStyle1.NameStyle + "" = Ф.СтильКолонкиБулево();"" + Environment.NewLine +
	|                                    GridColumnStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + GridColumnStyle1.MappingName + ""\u0022;"");
	|                                PropComponent(GridColumnStyle1);
	|                                AddToScript(compName + "".СтилиКолонкиСеткиДанных.Добавить("" + GridColumnStyle1.NameStyle + "");"");
	|                            }
	|                            else if (Style1.GetType() == typeof(osfDesigner.DataGridTextBoxColumn))
	|                            {
	|                                osfDesigner.DataGridTextBoxColumn GridColumnStyle1 = (osfDesigner.DataGridTextBoxColumn)Style1;
	|                                AddToScript(GridColumnStyle1.NameStyle + "" = Ф.СтильКолонкиПолеВвода();"" + Environment.NewLine +
	|                                    GridColumnStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + GridColumnStyle1.MappingName + ""\u0022;"");
	|                                PropComponent(GridColumnStyle1);
	|                                AddToScript(compName + "".СтилиКолонкиСеткиДанных.Добавить("" + GridColumnStyle1.NameStyle + "");"");
	|                            }
	|                            else if (Style1.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle))
	|                            {
	|                                osfDesigner.DataGridComboBoxColumnStyle GridColumnStyle1 = (osfDesigner.DataGridComboBoxColumnStyle)Style1;
	|                                AddToScript(GridColumnStyle1.NameStyle + "" = Ф.СтильКолонкиПолеВыбора();"" + Environment.NewLine +
	|                                    GridColumnStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + GridColumnStyle1.MappingName + ""\u0022;"");
	|                                PropComponent(GridColumnStyle1);
	|                                AddToScript(compName + "".СтилиКолонкиСеткиДанных.Добавить("" + GridColumnStyle1.NameStyle + "");"");
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""СтилиТаблицы"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.GridTableStylesCollection GridTableStylesCollection1 = (System.Windows.Forms.GridTableStylesCollection)val.TableStyles;
	|                    if (GridTableStylesCollection1.Count > 0)
	|                    {
	|                        osfDesigner.DataGridTableStyle DataGridTableStyle1;
	|                        for (int i = 0; i < GridTableStylesCollection1.Count; i++)
	|                        {
	|                            System.Windows.Forms.DataGridTableStyle OriginalObj = GridTableStylesCollection1[i];
	|                            DataGridTableStyle1 = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|                            AddToScript(DataGridTableStyle1.NameStyle + "" = Ф.СтильТаблицыСеткиДанных();"" + Environment.NewLine +
	|                                DataGridTableStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + DataGridTableStyle1.MappingName + ""\u0022;"" + Environment.NewLine +
	|                                compName + "".СтилиТаблицы.Добавить("" + DataGridTableStyle1.NameStyle + "");"");
	|                            PropComponent(DataGridTableStyle1);
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Кнопки"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ToolBar.ToolBarButtonCollection ToolBarButtonCollection1 = (System.Windows.Forms.ToolBar.ToolBarButtonCollection)val.Buttons;
	|                    if (ToolBarButtonCollection1.Count > 0)
	|                    {
	|                        osfDesigner.ToolBarButton ToolBarButton1;
	|                        for (int i = 0; i < ToolBarButtonCollection1.Count; i++)
	|                        {
	|                            ToolBarButton1 = (osfDesigner.ToolBarButton)ToolBarButtonCollection1[i].Tag;
	|                            AddToScript(ToolBarButton1.Name + "" = "" + compName + "".Кнопки.Добавить(Ф.КнопкаПанелиИнструментов());"");
	|                            PropComponent(ToolBarButton1);
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Узлы"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.TreeNodeCollection TreeNodeCollection1 = (System.Windows.Forms.TreeNodeCollection)val.Nodes;
	|                    if (TreeNodeCollection1.Count > 0)
	|                    {
	|                        osfDesigner.MyTreeNode MyTreeNode1;
	|                        for (int i = 0; i < TreeNodeCollection1.Count; i++)
	|                        {
	|                            MyTreeNode1 = (osfDesigner.MyTreeNode)TreeNodeCollection1[i];
	|                            AddToScript(MyTreeNode1.Name + "" = "" + compName + "".Узлы.Добавить(\u0022"" + MyTreeNode1.Name + ""\u0022);"");
	|                            PropComponent(MyTreeNode1);
	|                            if (MyTreeNode1.Nodes.Count > 0)
	|                            {
	|                                GetNodes(MyTreeNode1);
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Шрифт"" || valueName == ""ШрифтУзла"" || valueName == ""ШрифтЗаголовков"")
	|            {
	|                string FontName = """";
	|                string FontSize = """";
	|                string FontStyle = """";
	|
	|                string[] separators = new string[] { "";"" };
	|                string[] result = compValue.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        FontName = result[0];
	|                    }
	|                    if (i == 1)
	|                    {
	|                        FontSize = result[1].TrimStart(' ');
	|                        FontSize = FontSize.Replace(""pt"", """");
	|                        FontSize = FontSize.Replace("","", ""."");
	|                    }
	|                    if (i == 2)
	|                    {
	|                        FontStyle = result[2].Trim(' ');
	|                        FontStyle = FontStyle.Replace(""стиль="", ""Ф.СтильШрифта."");
	|                        FontStyle = FontStyle.Replace("", "", "" + Ф.СтильШрифта."");
	|                    }
	|                }
	|                AddToScript(compName + ""."" + valueName + "" = Ф.Шрифт(\u0022"" + FontName + ""\u0022, "" + FontSize + "", "" + FontStyle + "");"");
	|                return;
	|            }
	|            if (valueName == ""ВыделенныеДаты"")
	|            {
	|                if (val != null)
	|                {
	|                    MyBoldedDatesList MyBoldedDatesList1 = (MyBoldedDatesList)val.BoldedDates_osf;
	|                    string strDateTimes = """";
	|                    if (MyBoldedDatesList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyBoldedDatesList1.Count; i1++)
	|                        {
	|                            strDateTimes = strDateTimes + compName + ""."" + valueName + "".Добавить(Дата("" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""yyyy"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""MM"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""dd"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""HH"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""mm"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""ss"") + ""));"";
	|                            if (i1 == 0)
	|                            {
	|                                strDateTimes = strDateTimes.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyBoldedDatesList1.Count - 1))
	|                            {
	|                                strDateTimes = strDateTimes + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(strDateTimes);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""ЕжегодныеДаты"")
	|            {
	|                if (val != null)
	|                {
	|                    MyAnnuallyBoldedDatesList MyAnnuallyBoldedDatesList1 = (MyAnnuallyBoldedDatesList)val.AnnuallyBoldedDates_osf;
	|                    string strDateTimes = """";
	|                    if (MyAnnuallyBoldedDatesList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyAnnuallyBoldedDatesList1.Count; i1++)
	|                        {
	|                            strDateTimes = strDateTimes + compName + ""."" + valueName + "".Добавить(Дата("" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""yyyy"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""MM"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""dd"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""HH"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""mm"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""ss"") + ""));"";
	|                            if (i1 == 0)
	|                            {
	|                                strDateTimes = strDateTimes.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyAnnuallyBoldedDatesList1.Count - 1))
	|                            {
	|                                strDateTimes = strDateTimes + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(strDateTimes);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""ЕжемесячныеДаты"")
	|            {
	|                if (val != null)
	|                {
	|                    MyMonthlyBoldedDatesList MyMonthlyBoldedDatesList1 = (MyMonthlyBoldedDatesList)val.MonthlyBoldedDates_osf;
	|                    string strDateTimes = """";
	|                    if (MyMonthlyBoldedDatesList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyMonthlyBoldedDatesList1.Count; i1++)
	|                        {
	|                            strDateTimes = strDateTimes + compName + ""."" + valueName + "".Добавить(Дата("" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""yyyy"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""MM"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""dd"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""HH"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""mm"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""ss"") + ""));"";
	|                            if (i1 == 0)
	|                            {
	|                                strDateTimes = strDateTimes.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyMonthlyBoldedDatesList1.Count - 1))
	|                            {
	|                                strDateTimes = strDateTimes + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(strDateTimes);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Изображения"")
	|            {
	|                if (val != null)
	|                {
	|                    osfDesigner.MyList MyList1 = (osfDesigner.MyList)val.Images;
	|                    string str1 = """";
	|                    if (MyList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyList1.Count; i1++)
	|                        {
	|                            string newFileName = MyList1[i1].Path.Substring(MyList1[i1].Path.LastIndexOf('\\') + 1);
	|                            string newPath = path + newFileName;
	|                            if (!File.Exists(newPath))
	|                            {
	|                                File.Copy(MyList1[i1].Path, newPath);
	|                            }
	|
	|                            str1 = str1 + compName + "".Изображения.Добавить(Ф.Картинка(\u0022"" + newPath + ""\u0022));"";
	|                            if (i1 == 0)
	|                            {
	|                                str1 = str1.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyList1.Count - 1))
	|                            {
	|                                str1 = str1 + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(str1);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""СписокИзображений"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ImageList ImageList1 = (System.Windows.Forms.ImageList)val.ImageList;
	|                    ImageList SimilarObj = (ImageList)OneScriptFormsDesigner.RevertSimilarObj(ImageList1);
	|                    AddToScript(compName + "".СписокИзображений = "" + compValue + "";"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""СписокБольшихИзображений"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ImageList ImageList1 = (System.Windows.Forms.ImageList)val.LargeImageList;
	|                    ImageList SimilarObj = (ImageList)OneScriptFormsDesigner.RevertSimilarObj(ImageList1);
	|                    AddToScript(compName + "".СписокБольшихИзображений = "" + compValue + "";"" + Environment.NewLine);
	|                }
	|                return;
	|            }
	|            if (valueName == ""СписокМаленькихИзображений"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ImageList ImageList1 = (System.Windows.Forms.ImageList)val.SmallImageList;
	|                    ImageList SimilarObj = (ImageList)OneScriptFormsDesigner.RevertSimilarObj(ImageList1);
	|                    AddToScript(compName + "".СписокМаленькихИзображений = "" + compValue + "";"" + Environment.NewLine);
	|                }
	|                return;
	|            }
	|            if (valueName == ""Изображение"" || valueName == ""ФоновоеИзображение"")
	|            {
	|                if (compValue != ""Bitmap ()"")
	|                {
	|                    string FileName = OneScriptFormsDesigner.ParseBetween(compValue, ""("", "")"");
	|                    string newFileName = FileName.Substring(FileName.LastIndexOf('\\') + 1);
	|                    string newPath = path + newFileName;
	|                    if (!File.Exists(newPath))
	|                    {
	|                        File.Copy(FileName, newPath);
	|                    }
	|                    AddToScript(compName + ""."" + valueName + "" = Ф.Картинка(\u0022"" + newPath + ""\u0022);"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""ВыделенныйДиапазон"")
	|            {
	|                if (val != null)
	|                {
	|                    SelectionRange SelectionRange1 = (SelectionRange)val.SelectionRange;
	|                    string str1 = compName + ""."" + valueName + "" = "" + ""Ф.ВыделенныйДиапазон(Дата("" +
	|                                                        SelectionRange1.Start.ToString(""yyyy"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""MM"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""dd"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""HH"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""mm"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""ss"") + ""), "" +
	|                                                        ""Дата("" +
	|                                                        SelectionRange1.End.ToString(""yyyy"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""MM"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""dd"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""HH"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""mm"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""ss"") + ""));"";
	|                    AddToScript(str1);
	|                }
	|                return;
	|            }
	|            // Если это цвет.
	|            if (valueName == ""ОсновнойЦвет"" ||
	|                valueName == ""ОсновнойЦветЗаголовков"" ||
	|                valueName == ""ПрозрачныйЦвет"" ||
	|                valueName == ""Цвет"" ||
	|                valueName == ""ЦветАктивнойСсылки"" ||
	|                valueName == ""ЦветПосещеннойСсылки"" ||
	|                valueName == ""ЦветСетки"" ||
	|                valueName == ""ЦветСсылки"" ||
	|                valueName == ""ЦветФона"" ||
	|                valueName == ""ЦветФонаЗаголовка"" ||
	|                valueName == ""ЦветФонаЗаголовков"" ||
	|                valueName == ""ЦветФонаНечетныхСтрок"" ||
	|                valueName == ""ЦветФонаСеткиДанных"")
	|            {
	|                string str1 = """";
	|                if (val != null)
	|                {
	|                    if (val.ToString() == ""Color [Empty]"")
	|                    {
	|                        str1 = compName + ""."" + valueName + "" = Ф.Цвет(0, 0, 0);"";
	|                    }
	|                    else if (compValue.Contains("";""))
	|                    {
	|                        str1 = compName + ""."" + valueName + "" = Ф.Цвет("" + compValue.Replace("";"", "","") + "");"";
	|                    }
	|                    else
	|                    {
	|                        str1 = compName + ""."" + valueName + "" = Ф.Цвет(\u0022"" + compValue + ""\u0022);"";
	|                    }
	|                }
	|                AddToScript(str1);
	|                return;
	|            }
	|            // Если это контрол.
	|            if (valueName == ""КнопкаОтмена"" ||
	|                valueName == ""КнопкаПринять"" ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.UserControl)) ||
	|                valueName == ""ВыбранныйОбъект"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + compValue + "";"");
	|                return;
	|            }
	|            // Если это строка для ФорматированноеПолеВвода (RichTextBox).
	|            if (valueName == ""Текст"" && val.GetType() == typeof(osfDesigner.RichTextBox))
	|            {
	|                compValue = compValue.Replace(""\n"", ""\u0022 + Ф.Окружение().НоваяСтрока + \u0022"");
	|                AddToScript(compName + ""."" + valueName + "" = \u0022"" + compValue + ""\u0022;"");
	|                return;
	|            }
	|            // Если это событие.
	|            if (valueName == ""ВыбранныйЭлементСеткиИзменен"" ||
	|                valueName == ""ВыделениеИзменено"" ||
	|                valueName == ""ДатаВыбрана"" ||
	|                valueName == ""ДатаИзменена"" ||
	|                valueName == ""ДвойноеНажатие"" ||
	|                valueName == ""Закрыта"" ||
	|                valueName == ""ЗначениеИзменено"" ||
	|                valueName == ""ЗначениеСвойстваИзменено"" ||
	|                valueName == ""ИндексВыбранногоИзменен"" ||
	|                valueName == ""КлавишаВверх"" ||
	|                valueName == ""КлавишаВниз"" ||
	|                valueName == ""КлавишаНажата"" ||
	|                valueName == ""КолонкаНажатие"" ||
	|                valueName == ""МышьНадЭлементом"" ||
	|                valueName == ""МышьПокинулаЭлемент"" ||
	|                valueName == ""Нажатие"" ||
	|                valueName == ""ПередРазвертыванием"" ||
	|                valueName == ""ПередРедактированиемНадписи"" ||
	|                valueName == ""ПоложениеИзменено"" ||
	|                valueName == ""ПометкаИзменена"" ||
	|                valueName == ""ПослеВыбора"" ||
	|                valueName == ""ПослеРедактированияНадписи"" ||
	|                valueName == ""ПриАктивизации"" ||
	|                valueName == ""ПриАктивизацииЭлемента"" ||
	|                valueName == ""ПриВходе"" ||
	|                valueName == ""ПриВыпадении"" ||
	|                valueName == ""ПриДеактивации"" ||
	|                valueName == ""ПриЗагрузке"" ||
	|                valueName == ""ПриЗадержкеМыши"" ||
	|                valueName == ""ПриЗакрытии"" ||
	|                valueName == ""ПриИзменении"" ||
	|                valueName == ""ПриНажатииКнопки"" ||
	|                valueName == ""ПриНажатииКнопкиМыши"" ||
	|                valueName == ""ПриОтпусканииМыши"" ||
	|                valueName == ""ПриПереименовании"" ||
	|                valueName == ""ПриПеремещении"" ||
	|                valueName == ""ПриПеремещенииМыши"" ||
	|                valueName == ""ПриПерерисовке"" ||
	|                valueName == ""ПриПотереФокуса"" ||
	|                valueName == ""ПриПрокручивании"" ||
	|                valueName == ""ПриСоздании"" ||
	|                valueName == ""ПриСрабатыванииТаймера"" ||
	|                valueName == ""ПриУдалении"" ||
	|                valueName == ""ПриУходе"" ||
	|                valueName == ""РазмерИзменен"" ||
	|                valueName == ""СсылкаНажата"" ||
	|                valueName == ""ТекстИзменен"" ||
	|                valueName == ""ТекущаяЯчейкаИзменена"" ||
	|                valueName == ""ЭлементДобавлен"" ||
	|                valueName == ""ЭлементПомечен"" ||
	|                valueName == ""ЭлементУдален"")
	|            {
	|                string strNameProc = compValue.Replace(""("", """").Replace("")"", """");
	|                AddToScript(compName + ""."" + valueName + "" = \u0022"" + strNameProc + ""\u0022;"");
	|                return;
	|            }
	|            // Если это Строка.
	|            if (valueName == ""ВыбранныйПуть"" ||
	|                valueName == ""Заголовок"" ||
	|                valueName == ""ИмяСтиля"" ||
	|                valueName == ""ИмяФайла"" ||
	|                valueName == ""НачальныйКаталог"" ||
	|                valueName == ""Описание"" ||
	|                valueName == ""ПолныйПуть"" ||
	|                valueName == ""ПользовательскийФормат"" ||
	|                valueName == ""Путь"" ||
	|                valueName == ""РазделительПути"" ||
	|                valueName == ""РасширениеПоУмолчанию"" ||
	|                valueName == ""СимволПароля"" ||
	|                valueName == ""Текст"" ||
	|                valueName == ""ТекстЗаголовка"" ||
	|                valueName == ""ТекстПодсказки"" ||
	|                valueName == ""Фильтр"")
	|            {
	|                compValue = compValue.Replace(Environment.NewLine, ""\u0022 + Ф.Окружение().НоваяСтрока + \u0022"");
	|                AddToScript(compName + ""."" + valueName + "" = \u0022"" + compValue + ""\u0022;"");
	|                return;
	|            }
	|            // Если это Число.
	|            if (valueName == ""АвтоЗадержка"" ||
	|                valueName == ""АвтоЗадержкаПоказа"" ||
	|                valueName == ""БольшоеИзменение"" ||
	|                valueName == ""ВысотаЭлемента"" ||
	|                valueName == ""ГоризонтальнаяМера"" ||
	|                valueName == ""ЗадержкаОчередногоПоказа"" ||
	|                valueName == ""ЗадержкаПоявления"" ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.HProgressBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.VProgressBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.HScrollBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.VScrollBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.NumericUpDown)) ||
	|                (valueName == ""Индекс"" && val.GetType() != typeof(osfDesigner.MyTreeNode)) ||
	|                valueName == ""ИндексВыбранногоИзображения"" ||
	|                valueName == ""ИндексИзображения"" ||
	|                valueName == ""ИндексФильтра"" ||
	|                valueName == ""Интервал"" ||
	|                valueName == ""МаксимальнаяДлина"" ||
	|                valueName == ""Максимум"" ||
	|                valueName == ""МаксимумВыбранных"" ||
	|                valueName == ""МаксимумЭлементов"" ||
	|                valueName == ""МалоеИзменение"" ||
	|                valueName == ""Масштаб"" ||
	|                valueName == ""МинимальнаяШирина"" ||
	|                valueName == ""МинимальноеРасстояние"" ||
	|                (valueName == ""МинимальныйРазмер"" && compName.Contains(""Splitter"")) ||
	|                valueName == ""Минимум"" ||
	|                valueName == ""Отступ"" ||
	|                valueName == ""ОтступМаркера"" ||
	|                valueName == ""ПорядокОбхода"" ||
	|                valueName == ""ПорядокСлияния"" ||
	|                valueName == ""ПравоеОграничение"" ||
	|                valueName == ""ПредпочтительнаяВысотаСтрок"" ||
	|                valueName == ""ПредпочтительнаяШиринаСтолбцов"" ||
	|                valueName == ""Разрядность"" ||
	|                valueName == ""Увеличение"" ||
	|                valueName == ""Ширина"" ||
	|                valueName == ""ШиринаВыпадающегоСписка"" ||
	|                valueName == ""ШиринаЗаголовковСтрок"" ||
	|                valueName == ""ШиринаКолонки"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + compValue.Replace("","", ""."") + "";"");
	|                return;
	|            }
	|            // Если это Размер.
	|            if (valueName == ""МаксимальныйРазмер"" ||
	|                valueName == ""МинимальныйРазмер"" ||
	|                valueName == ""Размер"" ||
	|                valueName == ""РазмерИзображения"" ||
	|                valueName == ""РазмерКнопки"" ||
	|                valueName == ""РазмерПоляАвтоПрокрутки"" ||
	|                valueName == ""РазмерЭлемента"")
	|            {
	|                if (compName.Contains(""Календарь"") ||
	|                    compName.Contains(""Вкладка""))
	|                {
	|                    return;
	|                }
	|                string str1 = compValue.Replace(""{Ширина="", """");
	|                str1 = str1.Replace(""Высота="", """");
	|                str1 = str1.Replace(""}"", """");
	|                string[] separators = new string[] { "", "" };
	|                string[] result = str1.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                str1 = ""Ф.Размер("" + result[0] + "", "" + result[1] + "");"";
	|                AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                return;
	|            }
	|            // Если это Точка.
	|            if (valueName == ""Положение"")
	|            {
	|                if (val.GetType() == typeof(Form))
	|                {
	|                    if (((Form)val).StartPosition == FormStartPosition.Вручную)
	|                    {
	|                        string str1 = compValue.Replace(""{Икс="", """");
	|                        str1 = str1.Replace(""Игрек="", """");
	|                        str1 = str1.Replace(""}"", """");
	|                        string[] separators = new string[] { "", "" };
	|                        string[] result = str1.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                        str1 = ""Ф.Точка("" + result[0] + "", "" + result[1] + "");"";
	|                        AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                    }
	|                }
	|                else
	|                {
	|                    string str1 = compValue.Replace(""{Икс="", """");
	|                    str1 = str1.Replace(""Игрек="", """");
	|                    str1 = str1.Replace(""}"", """");
	|                    string[] separators = new string[] { "", "" };
	|                    string[] result = str1.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                    str1 = ""Ф.Точка("" + result[0] + "", "" + result[1] + "");"";
	|                    AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                }
	|                return;
	|            }
	|            // Если это Перечисление.
	|            if (valueName == ""ТипСлияния"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СлияниеМеню."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""АвтоРазмер"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.АвтоРазмерПанелиСтрокиСостояния."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Якорь"")
	|            {
	|                string str1 = """";
	|                string[] separators = new string[] { "", "" };
	|                string[] result = compValue.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    str1 = str1 + ""Ф.СтилиПривязки."" + result[i] + "" + "";
	|                }
	|                str1 = str1 + "";"";
	|                str1 = str1.Replace("" + ;"", "";"");
	|                AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                return;
	|            }
	|            if (valueName == ""НачальноеПоложение"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.НачальноеПоложениеФормы."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Формат"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ФорматПоляКалендаря."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Курсор"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.Курсоры()."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ГлубинаЦвета"" || valueName == ""СочетаниеКлавиш"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф."" + valueName + ""."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Стиль"")
	|            {
	|                AddToScript(compName + "".Стиль = Ф.СтильКнопокПанелиИнструментов."" + compValue + "";"");
	|                return;
	|            }
	|            if ((valueName == ""Оформление"" && (val.GetType() == typeof(osfDesigner.RadioButton) || val.GetType() == typeof(osfDesigner.CheckBox))) ||
	|                valueName == ""ПлоскийСтиль"" ||
	|                valueName == ""ПоведениеСсылки"" ||
	|                valueName == ""ПолосыПрокрутки"" ||
	|                valueName == ""РегистрСимволов"" ||
	|                valueName == ""РежимВыбора"" ||
	|                valueName == ""РежимОтображения"" ||
	|                valueName == ""РежимРисования"" ||
	|                valueName == ""РезультатДиалога"" ||
	|                valueName == ""СортировкаСвойств"" ||
	|                valueName == ""СостояниеФлажка"" ||
	|                valueName == ""СтильГраницыФормы"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф."" + valueName + ""."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""СтильГраницы"")
	|            {
	|                if (val.GetType() == typeof(osfDesigner.StatusBarPanel))
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильГраницыПанелиСтрокиСостояния."" + compValue + "";"");
	|                }
	|                else
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + ""Ф."" + valueName + ""."" + compValue + "";"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""Сортировка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ПорядокСортировки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""СтильЗаголовка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильЗаголовкаКолонки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Активация"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.АктивацияЭлемента."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""РазмещениеФоновогоИзображения"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.РазмещениеИзображения."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеПриРаскрытии"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ЛевоеПравоеВыравнивание."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""СтильВыпадающегоСписка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильПоляВыбора."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеПометки"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеСодержимого."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""РежимМасштабирования"" && val.GetType() == typeof(osfDesigner.PictureBox))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.РежимРазмераПоляКартинки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""РежимМасштабирования"" && val.GetType() == typeof(osfDesigner.TabControl))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.РежимРазмераВкладок."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Оформление"" && val.GetType() == typeof(osfDesigner.ToolBar))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ОформлениеПанелиИнструментов."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Выравнивание"" && val.GetType() == typeof(osfDesigner.TabControl))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеВкладок."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Выравнивание"" && val.GetType() == typeof(osfDesigner.ListView))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеВСпискеЭлементов."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Выравнивание"" && (val.GetType() == typeof(osfDesigner.DataGridBoolColumn) ||
	|                val.GetType() == typeof(osfDesigner.DataGridTextBoxColumn) ||
	|                val.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle)))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ГоризонтальноеВыравнивание."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ФильтрУведомлений"")
	|            {
	|                string str1 = """";
	|                string[] separators = new string[] { "", "" };
	|                string[] result = compValue.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    str1 = str1 + ""Ф.ФильтрыУведомления."" + result[i] + "" + "";
	|                }
	|                str1 = str1 + "";"";
	|                str1 = str1.Replace("" + ;"", "";"");
	|                AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеТекста"" && val.GetType() == typeof(osfDesigner.ColumnHeader))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ГоризонтальноеВыравнивание."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеТекста"" && val.GetType() == typeof(osfDesigner.ToolBar))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеТекстаВПанелиИнструментов."" + compValue + "";"");
	|                return;
	|            }
	|            if ((valueName == ""ВыравниваниеИзображения"" ||
	|                valueName == ""ВыравниваниеТекста""
	|               ) && (
	|                val.GetType() == typeof(osfDesigner.Button) ||
	|                val.GetType() == typeof(osfDesigner.RadioButton) ||
	|                val.GetType() == typeof(osfDesigner.CheckBox) ||
	|                val.GetType() == typeof(osfDesigner.Label)))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеСодержимого."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ПервыйДеньНедели"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.День."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""КорневойКаталог"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ОсобаяПапка."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Стыковка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильСтыковки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Значок"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.Значок(\u0022"" + compValue + ""\u0022);"");
	|                return;
	|            }
	|            if (valueName == ""МаксимальнаяДата"" ||
	|                valueName == ""МинимальнаяДата"" ||
	|                valueName == ""ТекущаяДата"")
	|            {
	|                DateTime DateTime1 = DateTime.Parse(compValue);
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Дата("" +
	|                    DateTime1.ToString(""yyyy"") + "", "" +
	|                    DateTime1.ToString(""MM"") + "", "" +
	|                    DateTime1.ToString(""dd"") + "", "" +
	|                    DateTime1.ToString(""HH"") + "", "" +
	|                    DateTime1.ToString(""mm"") + "", "" +
	|                    DateTime1.ToString(""ss"") + "");"");
	|                return;
	|            }
	|        }
	|        
	|        private static void AddToScript(string str)
	|        {
	|            Template1 = Template1.Replace(@""[Свойства>]"", str + Environment.NewLine + @""[Свойства>]"");
	|        }
	|
	|        private static void GetNodes(osfDesigner.MyTreeNode treeNode)
	|        {
	|            osfDesigner.MyTreeNode MyTreeNode1;
	|            for (int i = 0; i < treeNode.Nodes.Count; i++)
	|            {
	|                MyTreeNode1 = (osfDesigner.MyTreeNode)treeNode.Nodes[i];
	|                AddToScript(MyTreeNode1.Name + "" = "" + treeNode.Name + "".Узлы.Добавить(\u0022"" + MyTreeNode1.Name + ""\u0022);"");
	|                PropComponent(MyTreeNode1);
	|                if (MyTreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes(MyTreeNode1);
	|                }
	|            }
	|        }
	|
	|        private static void GetNodes1(System.Windows.Forms.TreeView TreeView, ref System.Collections.ArrayList objArrayList2)
	|        {
	|            for (int i = 0; i < TreeView.Nodes.Count; i++)
	|            {
	|                System.Windows.Forms.TreeNode TreeNode1 = TreeView.Nodes[i];
	|                objArrayList2.Add(TreeNode1.Name);
	|                if (TreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes2(TreeNode1, ref objArrayList2);
	|                }
	|            }
	|        }
	|
	|        private static void GetNodes2(System.Windows.Forms.TreeNode treeNode, ref System.Collections.ArrayList objArrayList2)
	|        {
	|            for (int i = 0; i < treeNode.Nodes.Count; i++)
	|            {
	|                System.Windows.Forms.TreeNode TreeNode1 = treeNode.Nodes[i];
	|                objArrayList2.Add(TreeNode1.Name);
	|                if (TreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes2(TreeNode1, ref objArrayList2);
	|                }
	|            }
	|        }
	|
	|        private static void GetMenuItems(MenuItemEntry menuItem)
	|        {
	|            MenuItemEntry MenuItemEntry1;
	|            for (int i = 0; i < menuItem.MenuItems.Count; i++)
	|            {
	|                MenuItemEntry1 = OneScriptFormsDesigner.RevertSimilarObj(menuItem.MenuItems[i]);
	|                PropertyDescriptor pd = TypeDescriptor.GetProperties(MenuItemEntry1.Parent)[""Name""];
	|                string strParent = (string)pd.GetValue(MenuItemEntry1.Parent);
	|
	|                string strName = MenuItemEntry1.Name.Contains(""Сепаратор"") ? ""-"" : MenuItemEntry1.Text;
	|                AddToScript(MenuItemEntry1.Name + "" = "" + strParent + "".ЭлементыМеню.Добавить(Ф.ЭлементМеню(\u0022"" + strName + ""\u0022));"");
	|                PropComponent(MenuItemEntry1);
	|                if (MenuItemEntry1.MenuItems.Count > 0)
	|                {
	|                    GetMenuItems(MenuItemEntry1);
	|                }
	|            }
	|        }
	|
	|        private static void PropComponent(dynamic comp)
	|        {
	|            PropertyInfo[] myPropertyInfo = comp.GetType().GetProperties();
	|            for (int i = 0; i < myPropertyInfo.Length; i++)
	|            {
	|                string valueName = OneScriptFormsDesigner.GetDisplayName(comp, myPropertyInfo[i].Name);
	|                if (valueName != """" && !((valueName == ""(Name)"") || (valueName == ""Прямоугольник"")))
	|                {
	|                    PropertyDescriptor pd = TypeDescriptor.GetProperties(comp)[myPropertyInfo[i].Name];
	|                    try
	|                    {
	|                        string compValue = OneScriptFormsDesigner.ObjectConvertToString(pd.GetValue(comp));
	|                        if (comp.GetType() == typeof(osfDesigner.DataGridTableStyle) ||
	|                            comp.GetType() == typeof(osfDesigner.DataGridBoolColumn) ||
	|                            comp.GetType() == typeof(osfDesigner.DataGridTextBoxColumn) ||
	|                            comp.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle))
	|                        {
	|                            RequiredDefaultValuesValues(comp, comp.NameStyle, valueName, compValue);
	|                        }
	|                        else
	|                        {
	|                            RequiredDefaultValuesValues(comp, comp.Name, valueName, compValue);
	|                        }
	|                    }
	|                    catch { }
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\SaveForm.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.ComponentModel;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|
	|namespace osfDesigner
	|{
	|    class MyNotifyFiltersEditor : CursorEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
	|
	|            if (wfes != null)
	|            {
	|                TypeConverter Converter1 = TypeDescriptor.GetConverter(typeof(osfDesigner.NotifyFilters));
	|                frmNotifyFilters _frmNotifyFilters = new frmNotifyFilters(Converter1.ConvertToString(value), (int)value);
	|                _frmNotifyFilters._value = (int)value;
	|
	|                wfes.DropDownControl(_frmNotifyFilters);
	|                value = _frmNotifyFilters.Value;
	|            }
	|
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.DropDown;
	|        }
	|
	|        public override bool IsDropDownResizable
	|        {
	|            get
	|            {
	|                return true;
	|            }
	|        }
	|
	|        private class frmNotifyFilters : System.Windows.Forms.ListBox
	|        {
	|            public int _value;
	|            public int oldValue;
	|            public string _strvalue;
	|
	|            public frmNotifyFilters(string strvalue, int value)
	|            {
	|                Height = 180;
	|                ItemHeight = Font.Height + 4;
	|                DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
	|                BorderStyle = System.Windows.Forms.BorderStyle.None;
	|                SelectionMode = System.Windows.Forms.SelectionMode.MultiSimple;
	|                _strvalue = strvalue;
	|                oldValue = value;
	|                Type enumType = Type.GetType(""osfDesigner.NotifyFilters"");
	|                var names = Enum.GetNames(enumType);
	|                for (int i = 0; i < names.Length; i++)
	|                {
	|                    int index = Items.Add(names[i]);
	|                    if (_strvalue.Contains(names[i]))
	|                    {
	|                        this.SetSelected(index, true);
	|                    }
	|                }
	|            }
	|
	|            public object Value
	|            {
	|                get
	|                {
	|                    return _value;
	|                }
	|            }
	|
	|            protected override void OnClick(EventArgs e)
	|            {
	|                int num = 0;
	|                System.Windows.Forms.ListBox.SelectedObjectCollection SelectedObjectCollection1 = this.SelectedItems;
	|                for (int i = 0; i < SelectedObjectCollection1.Count; i++)
	|                {
	|                    string str = (string)SelectedObjectCollection1[i];
	|                    num = num + (int)Enum.Parse(typeof(osfDesigner.NotifyFilters), (string)SelectedObjectCollection1[i]);
	|                }
	|                if (SelectedObjectCollection1.Count > 0)
	|                {
	|                    _value = num;
	|                }
	|                else
	|                {
	|                    _value = oldValue;
	|                }
	|            }
	|
	|            protected override void OnDrawItem(DrawItemEventArgs e)
	|            {
	|                if (e.Index != -1)
	|                {
	|                    string text = (string)Items[e.Index];
	|                    Font font = e.Font;
	|                    Brush brushText = new SolidBrush(e.ForeColor);
	|                    e.DrawBackground();
	|                    e.Graphics.DrawString(text, font, brushText, e.Bounds.X, e.Bounds.Y);
	|                    brushText.Dispose();
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyNotifyFiltersEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.IO;
	|using System.Windows.Forms;
	|using System.Drawing;
	|using System.Reflection;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|
	|namespace osfDesigner
	|{
	|    public class PropValueConverter
	|    {
	|        public static void SetPropValue(
	|            object component,
	|            string displayName, 
	|            string valProp, 
	|            Control parent = null)
	|        {
	|            dynamic control = null;
	|            if (component.GetType().ToString() == ""osfDesigner.ColorDialog"" ||
	|                component.GetType().ToString() == ""osfDesigner.ColumnHeader"" ||
	|                component.GetType().ToString() == ""osfDesigner.DataGridBoolColumn"" ||
	|                component.GetType().ToString() == ""osfDesigner.DataGridComboBoxColumnStyle"" ||
	|                component.GetType().ToString() == ""osfDesigner.DataGridTableStyle"" ||
	|                component.GetType().ToString() == ""osfDesigner.DataGridTextBoxColumn"" ||
	|                component.GetType().ToString() == ""osfDesigner.FileSystemWatcher"" ||
	|                component.GetType().ToString() == ""osfDesigner.FolderBrowserDialog"" ||
	|                component.GetType().ToString() == ""osfDesigner.FontDialog"" ||
	|                component.GetType().ToString() == ""osfDesigner.ImageList"" ||
	|                component.GetType().ToString() == ""osfDesigner.ListViewItem"" ||
	|                component.GetType().ToString() == ""osfDesigner.ListViewSubItem"" ||
	|                component.GetType().ToString() == ""osfDesigner.MainMenu"" ||
	|                component.GetType().ToString() == ""osfDesigner.MenuItemEntry"" ||
	|                component.GetType().ToString() == ""osfDesigner.NotifyIcon"" ||
	|                component.GetType().ToString() == ""osfDesigner.OpenFileDialog"" ||
	|                component.GetType().ToString() == ""osfDesigner.SaveFileDialog"" ||
	|                component.GetType().ToString() == ""osfDesigner.StatusBarPanel"" ||
	|                component.GetType().ToString() == ""osfDesigner.Timer"" ||
	|                component.GetType().ToString() == ""osfDesigner.ToolBarButton"" ||
	|                component.GetType().ToString() == ""osfDesigner.ToolTip"")
	|            {
	|                control = component;
	|            }
	|            else
	|            {
	|                control = (Control)component;
	|            }
	|
	|            if (displayName == ""Родитель"")
	|            {
	|                if (parent != null)
	|                {
	|                    control.Parent = parent;
	|                }
	|            }
	|            if (valProp == ""Истина"")
	|            {
	|                bool rez = true;
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                pi.SetValue(control, rez);
	|            }
	|            if (valProp == ""Ложь"")
	|            {
	|                bool rez = false;
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                pi.SetValue(control, rez);
	|            }
	|            if (displayName.Contains(""ToolTip на""))
	|            {
	|                string toolTipName = OneScriptFormsDesigner.ParseBetween(valProp, null, "".УстановитьПодсказку"");
	|                System.Windows.Forms.ToolTip ToolTip1 = (System.Windows.Forms.ToolTip)OneScriptFormsDesigner.GetComponentByName(toolTipName);
	|                string caption = OneScriptFormsDesigner.ParseBetween(valProp, ""\u0022"", ""\u0022);"");
	|                ToolTip1.SetToolTip(control, caption);
	|                control.ToolTip[toolTipName] = caption;
	|            }
	|            if (displayName == ""ОбластьСсылки"")
	|            {
	|                if (valProp != null)
	|                {
	|                    int start = Int32.Parse(OneScriptFormsDesigner.ParseBetween(valProp, ""Ф.ОбластьСсылки("", "",""));
	|                    int length = Int32.Parse(OneScriptFormsDesigner.ParseBetween(valProp, "","", "")""));
	|                    System.Windows.Forms.LinkArea LinkArea1 = new LinkArea(start, length);
	|
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                    pi.SetValue(control, LinkArea1);
	|                }
	|                return;
	|            }
	|            if (displayName == ""Узлы"")
	|            {
	|                string nameNode = OneScriptFormsDesigner.ParseBetween(valProp, ""Добавить(\u0022"", ""\u0022)"");
	|                if (nameNode != null) // Нужно добавить узел.
	|                {
	|                    string nameNodeParent = OneScriptFormsDesigner.ParseBetween(valProp, ""="", ""."");
	|                    if (nameNodeParent == control.Name)
	|                    {
	|                        osfDesigner.MyTreeNode MyTreeNode1 = new MyTreeNode();
	|                        MyTreeNode1.DefaultValues = @""Текст == 
	|ШрифтУзла == 
	|Индекс == 0
	|ИндексВыбранногоИзображения == -1
	|ИндексИзображения == -1
	|Помечен == Ложь
	|ПолныйПуть == 
	|(Name) == "";
	|                        MyTreeNode1.Text = nameNode;
	|                        MyTreeNode1.Name = nameNode;
	|                        ((osfDesigner.TreeView)control).Nodes.Add(MyTreeNode1);
	|                    }
	|                    else
	|                    {
	|                        osfDesigner.MyTreeNode MyTreeNode2 = null;
	|                        NodeSearch(((osfDesigner.TreeView)control), nameNodeParent, ref MyTreeNode2, null);
	|                        osfDesigner.MyTreeNode MyTreeNode1 = new MyTreeNode();
	|                        MyTreeNode1.DefaultValues = @""Текст == 
	|ШрифтУзла == 
	|Индекс == 0
	|ИндексВыбранногоИзображения == -1
	|ИндексИзображения == -1
	|Помечен == Ложь
	|ПолныйПуть == 
	|(Name) == "";
	|                        MyTreeNode1.Text = nameNode;
	|                        MyTreeNode1.Name = nameNode;
	|                        MyTreeNode2.Nodes.Add(MyTreeNode1);
	|                    }
	|                }
	|                else // Нужно обработать свойство узла.
	|                {
	|                    // Найдем узел и установим для него свойство.
	|                    string nameNode2 = OneScriptFormsDesigner.ParseBetween(valProp, null, ""."");
	|                    osfDesigner.MyTreeNode MyTreeNode3 = null;
	|                    NodeSearch(((osfDesigner.TreeView)control), nameNode2, ref MyTreeNode3, null);
	|
	|                    string nodeDisplayName = OneScriptFormsDesigner.ParseBetween(valProp, ""."", ""="");
	|                    string strNodePropertyValue = OneScriptFormsDesigner.ParseBetween(valProp, ""="", "";"");
	|
	|                    SetNodePropValue(MyTreeNode3, nodeDisplayName, strNodePropertyValue);
	|                }
	|                return;
	|            }
	|            if (displayName == ""Шрифт"" || displayName == ""ШрифтУзла"" || displayName == ""ШрифтЗаголовков"")
	|            {
	|                string[] result = valProp.Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|
	|                string FontName;
	|                float FontSize;
	|                if (control.GetType() == typeof(osfDesigner.ListViewItem) || control.GetType() == typeof(osfDesigner.ListViewSubItem))
	|                {
	|                    FontName = """";
	|                    FontSize = float.Parse(""10,2"");
	|                }
	|                else
	|                {
	|                    FontName = control.Parent.Font.Name;
	|                    FontSize = control.Parent.Font.Size;
	|                }
	|                int Style1 = 0;
	|
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        try
	|                        {
	|                            FontName = OneScriptFormsDesigner.ParseBetween(result[0], ""\u0022"", null).Replace(""\u0022"", """").Trim();
	|                        }
	|                        catch { }
	|                    }
	|                    if (i == 1)
	|                    {
	|                        try
	|                        {
	|
	|                            FontSize = Single.Parse(result[1].Trim());
	|                        }
	|                        catch
	|                        {
	|                            try
	|                            {
	|                                FontSize = Single.Parse(result[1].Trim().Replace(""."", "",""));
	|                            }
	|                            catch { }
	|                        }
	|                    }
	|                    if (i == 2)
	|                    {
	|                        if (result[2].Contains(""Жирный""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Bold;
	|                        }
	|                        if (result[2].Contains(""Зачеркнутый""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Strikeout;
	|                        }
	|                        if (result[2].Contains(""Курсив""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Italic;
	|                        }
	|                        if (result[2].Contains(""Подчеркнутый""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Underline;
	|                        }
	|                    }
	|                }
	|                control.Font = new Font(FontName, FontSize, (FontStyle)Style1);
	|                return;
	|            }
	|            if (displayName == ""ВыделенныеДаты"")
	|            {
	|                osfDesigner.MonthCalendar MonthCalendar1 = (osfDesigner.MonthCalendar)control;
	|                string[] result = valProp.Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                DateTime rez = new DateTime();
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        rez = rez.AddYears(Int32.Parse(result[0]) - 1);
	|                    }
	|                    if (i == 1)
	|                    {
	|                        rez = rez.AddMonths(Int32.Parse(result[1]) - 1);
	|                    }
	|                    if (i == 2)
	|                    {
	|                        rez = rez.AddDays(Int32.Parse(result[2]) - 1);
	|                    }
	|                    if (i == 3)
	|                    {
	|                        rez = rez.AddHours(Int32.Parse(result[3]));
	|                    }
	|                    if (i == 4)
	|                    {
	|                        rez = rez.AddMinutes(Int32.Parse(result[4]));
	|                    }
	|                    if (i == 5)
	|                    {
	|                        rez = rez.AddSeconds(Int32.Parse(result[5]));
	|                    }
	|                }
	|
	|                osfDesigner.MyBoldedDatesList MyBoldedDatesList1 = MonthCalendar1.BoldedDates_osf;
	|                MyBoldedDatesList1.Add(new DateEntry(rez));
	|
	|                int count1 = MyBoldedDatesList1.Count;
	|                DateTime[] DateTime1 = new DateTime[count1];
	|                for (int i = 0; i < MyBoldedDatesList1.Count; i++)
	|                {
	|                    DateTime1[i] = MyBoldedDatesList1[i].Value;
	|                }
	|                MonthCalendar1.BoldedDates = DateTime1;
	|                return;
	|            }
	|            if (displayName == ""ЕжегодныеДаты"")
	|            {
	|                osfDesigner.MonthCalendar MonthCalendar1 = (osfDesigner.MonthCalendar)control;
	|                string[] result = valProp.Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                DateTime rez = new DateTime();
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        rez = rez.AddYears(Int32.Parse(result[0]) - 1);
	|                    }
	|                    if (i == 1)
	|                    {
	|                        rez = rez.AddMonths(Int32.Parse(result[1]) - 1);
	|                    }
	|                    if (i == 2)
	|                    {
	|                        rez = rez.AddDays(Int32.Parse(result[2]) - 1);
	|                    }
	|                    if (i == 3)
	|                    {
	|                        rez = rez.AddHours(Int32.Parse(result[3]));
	|                    }
	|                    if (i == 4)
	|                    {
	|                        rez = rez.AddMinutes(Int32.Parse(result[4]));
	|                    }
	|                    if (i == 5)
	|                    {
	|                        rez = rez.AddSeconds(Int32.Parse(result[5]));
	|                    }
	|                }
	|
	|                osfDesigner.MyAnnuallyBoldedDatesList MyAnnuallyBoldedDatesList1 = MonthCalendar1.AnnuallyBoldedDates_osf;
	|                MyAnnuallyBoldedDatesList1.Add(new DateEntry(rez));
	|
	|                int count1 = MyAnnuallyBoldedDatesList1.Count;
	|                DateTime[] DateTime1 = new DateTime[count1];
	|                for (int i = 0; i < MyAnnuallyBoldedDatesList1.Count; i++)
	|                {
	|                    DateTime1[i] = MyAnnuallyBoldedDatesList1[i].Value;
	|                }
	|                MonthCalendar1.AnnuallyBoldedDates = DateTime1;
	|                return;
	|            }
	|            if (displayName == ""ЕжемесячныеДаты"")
	|            {
	|                osfDesigner.MonthCalendar MonthCalendar1 = (osfDesigner.MonthCalendar)control;
	|                string[] result = valProp.Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                DateTime rez = new DateTime();
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        rez = rez.AddYears(Int32.Parse(result[0]) - 1);
	|                    }
	|                    if (i == 1)
	|                    {
	|                        rez = rez.AddMonths(Int32.Parse(result[1]) - 1);
	|                    }
	|                    if (i == 2)
	|                    {
	|                        rez = rez.AddDays(Int32.Parse(result[2]) - 1);
	|                    }
	|                    if (i == 3)
	|                    {
	|                        rez = rez.AddHours(Int32.Parse(result[3]));
	|                    }
	|                    if (i == 4)
	|                    {
	|                        rez = rez.AddMinutes(Int32.Parse(result[4]));
	|                    }
	|                    if (i == 5)
	|                    {
	|                        rez = rez.AddSeconds(Int32.Parse(result[5]));
	|                    }
	|                }
	|
	|                osfDesigner.MyMonthlyBoldedDatesList MyMonthlyBoldedDatesList1 = MonthCalendar1.MonthlyBoldedDates_osf;
	|                MyMonthlyBoldedDatesList1.Add(new DateEntry(rez));
	|
	|                int count1 = MyMonthlyBoldedDatesList1.Count;
	|                DateTime[] DateTime1 = new DateTime[count1];
	|                for (int i = 0; i < MyMonthlyBoldedDatesList1.Count; i++)
	|                {
	|                    DateTime1[i] = MyMonthlyBoldedDatesList1[i].Value;
	|                }
	|                MonthCalendar1.MonthlyBoldedDates = DateTime1;
	|                return;
	|            }
	|            if (displayName == ""Изображения"")
	|            {
	|                if (File.Exists(valProp))
	|                {
	|                    ImageEntry ImageEntry1 = new ImageEntry();
	|                    Bitmap Bitmap1 = new Bitmap(valProp);
	|                    Bitmap1.Tag = valProp;
	|                    ImageEntry1.Image = Bitmap1;
	|                    ImageEntry1.Path = valProp;
	|                    ImageEntry1.FileName = valProp;
	|                    ((dynamic)component).Images.Add(ImageEntry1);
	|                    ((dynamic)component).OriginalObj.Images.Add(ImageEntry1.Image);
	|                }
	|                else
	|                {
	|                    System.Windows.Forms.MessageBox.Show(""Не найден файл "" + valProp);
	|                }
	|                return;
	|            }
	|            if (displayName == ""СписокИзображений"" || displayName == ""СписокБольшихИзображений"" || displayName == ""СписокМаленькихИзображений"")
	|            {
	|                IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|                ComponentCollection ctrlsExisting = host.Container.Components;
	|
	|                System.Windows.Forms.ImageList ImageList1 = null;
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    if (comp.Site.Name == valProp)
	|                    {
	|                        ImageList1 = (System.Windows.Forms.ImageList)comp;
	|                        break;
	|                    }
	|                }
	|
	|                if (ImageList1 != null)
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                    pi.SetValue(control, ImageList1);
	|                }
	|                return;
	|            }
	|            if (displayName == ""Изображение"" || displayName == ""ФоновоеИзображение"")
	|            {
	|                Bitmap Bitmap = null;
	|                string rez = valProp.Replace(""\u0022"", """");
	|                rez = OneScriptFormsDesigner.ParseBetween(rez, ""("", "")"");
	|                try
	|                {
	|                    Bitmap = new Bitmap(rez);
	|                }
	|                catch { }
	|                if (Bitmap != null)
	|                {
	|                    ImageEntry ImageEntry1 = new ImageEntry();
	|                    ImageEntry1.Image = Bitmap;
	|                    ImageEntry1.Path = rez;
	|                    Bitmap.Tag = rez;
	|
	|                    if (control.GetType() == typeof(osfDesigner.TabPage))
	|                    {
	|                        string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                        control = OneScriptFormsDesigner.RevertOriginalObj(control);
	|                        PropertyInfo pi = control.GetType().BaseType.GetProperty(propertyName);
	|                        pi.SetValue(control, Bitmap);
	|                    }
	|                    else
	|                    {
	|                        string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                        PropertyInfo pi = control.GetType().BaseType.GetProperty(propertyName);
	|                        pi.SetValue(control, Bitmap);
	|                    }
	|                }
	|                else
	|                {
	|                    System.Windows.Forms.MessageBox.Show(""Не найден файл "" + rez);
	|                }
	|                return;
	|            }
	|            if (displayName == ""ВыделенныйДиапазон"")
	|            {
	|                DateTime rez1 = new DateTime();
	|                DateTime rez2 = new DateTime();
	|
	|                string[] result1 = OneScriptFormsDesigner.ParseBetween(valProp, ""Ф.ВыделенныйДиапазон(Дата("", ""),Дата("").Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                string[] result2 = OneScriptFormsDesigner.ParseBetween(valProp, ""),Дата("", ""))"").Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|
	|                for (int i = 0; i < result1.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        rez1 = rez1.AddYears(Int32.Parse(result1[0]) - 1);
	|                    }
	|                    if (i == 1)
	|                    {
	|                        rez1 = rez1.AddMonths(Int32.Parse(result1[1]) - 1);
	|                    }
	|                    if (i == 2)
	|                    {
	|                        rez1 = rez1.AddDays(Int32.Parse(result1[2]) - 1);
	|                    }
	|                    if (i == 3)
	|                    {
	|                        rez1 = rez1.AddHours(Int32.Parse(result1[3]));
	|                    }
	|                    if (i == 4)
	|                    {
	|                        rez1 = rez1.AddMinutes(Int32.Parse(result1[4]));
	|                    }
	|                    if (i == 5)
	|                    {
	|                        rez1 = rez1.AddSeconds(Int32.Parse(result1[5]));
	|                    }
	|                }
	|
	|                for (int i = 0; i < result2.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        rez2 = rez2.AddYears(Int32.Parse(result2[0]) - 1);
	|                    }
	|                    if (i == 1)
	|                    {
	|                        rez2 = rez2.AddMonths(Int32.Parse(result2[1]) - 1);
	|                    }
	|                    if (i == 2)
	|                    {
	|                        rez2 = rez2.AddDays(Int32.Parse(result2[2]) - 1);
	|                    }
	|                    if (i == 3)
	|                    {
	|                        rez2 = rez2.AddHours(Int32.Parse(result2[3]));
	|                    }
	|                    if (i == 4)
	|                    {
	|                        rez2 = rez2.AddMinutes(Int32.Parse(result2[4]));
	|                    }
	|                    if (i == 5)
	|                    {
	|                        rez2 = rez2.AddSeconds(Int32.Parse(result2[5]));
	|                    }
	|                }
	|
	|                System.Windows.Forms.SelectionRange sr = new System.Windows.Forms.SelectionRange(rez1, rez2);
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                pi.SetValue(control, sr);
	|                return;
	|            }
	|            // Если это цвет.
	|            if (displayName == ""ОсновнойЦвет"" ||
	|                displayName == ""ОсновнойЦветЗаголовков"" ||
	|                displayName == ""ПрозрачныйЦвет"" ||
	|                displayName == ""Цвет"" ||
	|                displayName == ""ЦветАктивнойСсылки"" ||
	|                displayName == ""ЦветПосещеннойСсылки"" ||
	|                displayName == ""ЦветСетки"" ||
	|                displayName == ""ЦветСсылки"" ||
	|                displayName == ""ЦветФона"" ||
	|                displayName == ""ЦветФонаЗаголовка"" ||
	|                displayName == ""ЦветФонаЗаголовков"" ||
	|                displayName == ""ЦветФонаНечетныхСтрок"" ||
	|                displayName == ""ЦветФонаСеткиДанных"")
	|            {
	|                Color Color1 = Color.Empty;
	|                string strColor = valProp.Replace(""\u0022"", """");
	|                strColor = OneScriptFormsDesigner.ParseBetween(strColor, ""("", "")"");
	|                if (strColor.Contains("",""))
	|                {
	|                    string[] result = strColor.Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                    if (result.Length == 3)
	|                    {
	|                        Color1 = Color.FromArgb(Int32.Parse(result[0]), Int32.Parse(result[1]), Int32.Parse(result[2]));
	|                    }
	|                }
	|                else
	|                {
	|                    Color1 = Color.FromName(OneScriptFormsDesigner.colors[strColor]);
	|                }
	|                if (Color1 != Color.Empty)
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                    pi.SetValue(control, Color1);
	|                }
	|                return;
	|            }
	|            // Если это КнопкаОтмена или КнопкаПринять.
	|            if (displayName == ""КнопкаОтмена"" ||
	|                displayName == ""КнопкаПринять"")
	|            {
	|                IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|                ComponentCollection ctrlsExisting = host.Container.Components;
	|
	|                IButtonControl IButtonControl1 = null;
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    if (comp.Site.Name == valProp)
	|                    {
	|                        IButtonControl1 = (IButtonControl)comp;
	|                        break;
	|                    }
	|                }
	|
	|                if (IButtonControl1 != null)
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                    pi.SetValue(control, IButtonControl1);
	|                }
	|                return;
	|            }
	|            // Если это ВыбранныйОбъект для сетки свойств.
	|            if (displayName == ""ВыбранныйОбъект"")
	|            {
	|                IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|                ComponentCollection ctrlsExisting = host.Container.Components;
	|
	|                Control Control1 = null;
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    if (comp.Site.Name == valProp)
	|                    {
	|                        Control1 = (Control)comp;
	|                        break;
	|                    }
	|                }
	|
	|                if (Control1 != null)
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                    pi.SetValue(control, Control1);
	|                }
	|                return;
	|            }
	|            // Если это событие.
	|            if (displayName == ""ВыбранныйЭлементСеткиИзменен"" ||
	|                displayName == ""ВыделениеИзменено"" ||
	|                displayName == ""ДатаВыбрана"" ||
	|                displayName == ""ДатаИзменена"" ||
	|                displayName == ""ДвойноеНажатие"" ||
	|                displayName == ""Закрыта"" ||
	|                displayName == ""ЗначениеИзменено"" ||
	|                displayName == ""ЗначениеСвойстваИзменено"" ||
	|                displayName == ""ИндексВыбранногоИзменен"" ||
	|                displayName == ""КлавишаВверх"" ||
	|                displayName == ""КлавишаВниз"" ||
	|                displayName == ""КлавишаНажата"" ||
	|                displayName == ""КолонкаНажатие"" ||
	|                displayName == ""МышьНадЭлементом"" ||
	|                displayName == ""МышьПокинулаЭлемент"" ||
	|                displayName == ""Нажатие"" ||
	|                displayName == ""ПередРазвертыванием"" ||
	|                displayName == ""ПередРедактированиемНадписи"" ||
	|                displayName == ""ПоложениеИзменено"" ||
	|                displayName == ""ПометкаИзменена"" ||
	|                displayName == ""ПослеВыбора"" ||
	|                displayName == ""ПослеРедактированияНадписи"" ||
	|                displayName == ""ПриАктивизации"" ||
	|                displayName == ""ПриАктивизацииЭлемента"" ||
	|                displayName == ""ПриВходе"" ||
	|                displayName == ""ПриВыпадении"" ||
	|                displayName == ""ПриДеактивации"" ||
	|                displayName == ""ПриЗагрузке"" ||
	|                displayName == ""ПриЗадержкеМыши"" ||
	|                displayName == ""ПриЗакрытии"" ||
	|                displayName == ""ПриИзменении"" ||
	|                displayName == ""ПриНажатииКнопки"" ||
	|                displayName == ""ПриНажатииКнопкиМыши"" ||
	|                displayName == ""ПриОтпусканииМыши"" ||
	|                displayName == ""ПриПереименовании"" ||
	|                displayName == ""ПриПеремещении"" ||
	|                displayName == ""ПриПеремещенииМыши"" ||
	|                displayName == ""ПриПерерисовке"" ||
	|                displayName == ""ПриПотереФокуса"" ||
	|                displayName == ""ПриПрокручивании"" ||
	|                displayName == ""ПриСоздании"" ||
	|                displayName == ""ПриСрабатыванииТаймера"" ||
	|                displayName == ""ПриУдалении"" ||
	|                displayName == ""ПриУходе"" ||
	|                displayName == ""РазмерИзменен"" ||
	|                displayName == ""СсылкаНажата"" ||
	|                displayName == ""ТекстИзменен"" ||
	|                displayName == ""ТекущаяЯчейкаИзменена"" ||
	|                displayName == ""ЭлементДобавлен"" ||
	|                displayName == ""ЭлементПомечен"" ||
	|                displayName == ""ЭлементУдален"")
	|            {
	|                string rez = valProp.Replace(""\u0022"", """").Replace(""("", """").Replace("")"", """");
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                pi.SetValue(control, rez);
	|                return;
	|            }
	|            // Если это Строка.
	|            if (displayName == ""ВыбранныйПуть"" ||
	|                displayName == ""Заголовок"" ||
	|                displayName == ""ИмяОтображаемого"" ||
	|                displayName == ""ИмяСтиля"" ||
	|                displayName == ""ИмяФайла"" ||
	|                displayName == ""НачальныйКаталог"" ||
	|                displayName == ""Описание"" ||
	|                displayName == ""ПолныйПуть"" ||
	|                displayName == ""ПользовательскийФормат"" ||
	|                displayName == ""Путь"" ||
	|                displayName == ""РазделительПути"" ||
	|                displayName == ""РасширениеПоУмолчанию"" ||
	|                displayName == ""СимволПароля"" ||
	|                displayName == ""Текст"" ||
	|                displayName == ""ТекстЗаголовка"" ||
	|                displayName == ""ТекстПодсказки"" ||
	|                displayName == ""Фильтр"")
	|            {
	|                if (valProp.Contains(""Ф.Окружение().НоваяСтрока""))
	|                {
	|                    valProp = valProp.Replace(""\u0022"", """");
	|                    valProp = valProp.Replace(""+Ф.Окружение().НоваяСтрока+"", Environment.NewLine);
	|                }
	|                else
	|                {
	|                    valProp = valProp.Replace(""\u0022"", """");
	|                }
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                control.GetType().GetProperty(propertyName).SetValue(control, valProp);
	|                return;
	|            }
	|            // Если это Число.
	|            if (displayName == ""АвтоЗадержка"" ||
	|                displayName == ""АвтоЗадержкаПоказа"" ||
	|                displayName == ""БольшоеИзменение"" ||
	|                displayName == ""ВысотаЭлемента"" ||
	|                displayName == ""ГоризонтальнаяМера"" ||
	|                displayName == ""ЗадержкаОчередногоПоказа"" ||
	|                displayName == ""ЗадержкаПоявления"" ||
	|                (displayName == ""Значение"" && control.GetType() == typeof(osfDesigner.HProgressBar)) ||
	|                (displayName == ""Значение"" && control.GetType() == typeof(osfDesigner.VProgressBar)) ||
	|                (displayName == ""Значение"" && control.GetType() == typeof(osfDesigner.HScrollBar)) ||
	|                (displayName == ""Значение"" && control.GetType() == typeof(osfDesigner.VScrollBar)) ||
	|                (displayName == ""Значение"" && control.GetType() == typeof(osfDesigner.NumericUpDown)) ||
	|                displayName == ""Индекс"" ||
	|                displayName == ""ИндексВыбранногоИзображения"" ||
	|                displayName == ""ИндексИзображения"" ||
	|                displayName == ""ИндексФильтра"" ||
	|                displayName == ""Интервал"" ||
	|                displayName == ""МаксимальнаяДлина"" ||
	|                displayName == ""Максимум"" ||
	|                displayName == ""МаксимумВыбранных"" ||
	|                displayName == ""МаксимумЭлементов"" ||
	|                displayName == ""МалоеИзменение"" ||
	|                displayName == ""Масштаб"" ||
	|                displayName == ""МинимальнаяШирина"" ||
	|                displayName == ""МинимальноеРасстояние"" ||
	|                (displayName == ""МинимальныйРазмер"" && control.GetType() == typeof(osfDesigner.Splitter)) ||
	|                displayName == ""Минимум"" ||
	|                displayName == ""Отступ"" ||
	|                displayName == ""ОтступМаркера"" ||
	|                displayName == ""ПорядокОбхода"" ||
	|                displayName == ""ПорядокСлияния"" ||
	|                displayName == ""ПравоеОграничение"" ||
	|                displayName == ""ПредпочтительнаяВысотаСтрок"" ||
	|                displayName == ""ПредпочтительнаяШиринаСтолбцов"" ||
	|                displayName == ""Разрядность"" ||
	|                displayName == ""Увеличение"" ||
	|                displayName == ""Ширина"" ||
	|                displayName == ""ШиринаВыпадающегоСписка"" ||
	|                displayName == ""ШиринаЗаголовковСтрок"" ||
	|                displayName == ""ШиринаКолонки"")
	|            {
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                try
	|                {
	|                    control.GetType().GetProperty(propertyName).SetValue(control, Decimal.Parse(valProp.Replace(""."", "","")));
	|                }
	|                catch
	|                {
	|                    control.GetType().GetProperty(propertyName).SetValue(control, Int32.Parse(valProp));
	|                }
	|                return;
	|            }
	|            // Если это Размер.
	|            if (displayName == ""МаксимальныйРазмер"" ||
	|                displayName == ""МинимальныйРазмер"" ||
	|                displayName == ""Размер"" ||
	|                displayName == ""РазмерИзображения"" ||
	|                displayName == ""РазмерКнопки"" ||
	|                displayName == ""РазмерПоляАвтоПрокрутки"" ||
	|                displayName == ""РазмерЭлемента"")
	|            {
	|                Size Size1 = new Size();
	|                Size1.Width = Int32.Parse(OneScriptFormsDesigner.ParseBetween(valProp, ""Ф.Размер("", "",""));
	|                Size1.Height = Int32.Parse(OneScriptFormsDesigner.ParseBetween(valProp, "","", "")""));
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                control.GetType().GetProperty(propertyName).SetValue(control, Size1);
	|                return;
	|            }
	|            // Если это Точка.
	|            if (displayName == ""Положение"")
	|            {
	|                Point Point1 = new Point();
	|                Point1.X = Int32.Parse(OneScriptFormsDesigner.ParseBetween(valProp, ""Ф.Точка("", "",""));
	|                Point1.Y = Int32.Parse(OneScriptFormsDesigner.ParseBetween(valProp, "","", "")""));
	|
	|                try
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                    pi.SetValue(control, Point1);
	|                }
	|                catch
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                    PropertyInfo pi = control.GetType().BaseType.GetProperty(propertyName);
	|                    pi.SetValue(control, Point1);
	|                }
	|                return;
	|            }
	|            if (displayName == ""Курсор"")
	|            {
	|                string propNameRu = OneScriptFormsDesigner.ParseBetween(valProp, ""Ф.Курсоры()."", null);
	|                System.Windows.Forms.Cursor cursor = null;
	|
	|                PropertyInfo[] myPropertyInfo = typeof(System.Windows.Forms.Cursors).GetProperties();
	|                for (int i = 0; i < myPropertyInfo.Length; i++)
	|                {
	|                    if (propNameRu == OneScriptFormsDesigner.namesCursorEnRu[myPropertyInfo[i].Name])
	|                    {
	|                        cursor = OneScriptFormsDesigner.namesCursorRuEn[propNameRu];
	|                        break;
	|                    }
	|                }
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                PropertyInfo pi = control.GetType().BaseType.GetProperty(propertyName);
	|                pi.SetValue(control, cursor);
	|                return;
	|            }
	|
	|            // Если это Перечисление.
	|            if (displayName == ""АвтоРазмер"" ||
	|                displayName == ""Активация"" ||
	|                displayName == ""Выравнивание"" ||
	|                displayName == ""ВыравниваниеИзображения"" ||
	|                displayName == ""ВыравниваниеПометки"" ||
	|                displayName == ""ВыравниваниеПриРаскрытии"" ||
	|                displayName == ""ВыравниваниеТекста"" ||
	|                displayName == ""ГлубинаЦвета"" ||
	|                displayName == ""КорневойКаталог"" ||
	|                displayName == ""НачальноеПоложение"" ||
	|                displayName == ""Оформление"" ||
	|                displayName == ""ПервыйДеньНедели"" ||
	|                displayName == ""ПлоскийСтиль"" ||
	|                displayName == ""ПоведениеСсылки"" ||
	|                displayName == ""ПолосыПрокрутки"" ||
	|                displayName == ""РазмещениеФоновогоИзображения"" ||
	|                displayName == ""РегистрСимволов"" ||
	|                displayName == ""РежимВыбора"" ||
	|                displayName == ""РежимМасштабирования"" ||
	|                displayName == ""РежимОтображения"" ||
	|                displayName == ""РежимРисования"" ||
	|                displayName == ""РезультатДиалога"" ||
	|                displayName == ""Сортировка"" ||
	|                displayName == ""СортировкаСвойств"" ||
	|                displayName == ""СостояниеФлажка"" ||
	|                displayName == ""СочетаниеКлавиш"" ||
	|                displayName == ""Стиль"" ||
	|                displayName == ""СтильВыпадающегоСписка"" ||
	|                displayName == ""СтильГраницы"" ||
	|                displayName == ""СтильГраницыФормы"" ||
	|                displayName == ""СтильЗаголовка"" ||
	|                displayName == ""Стыковка"" ||
	|                displayName == ""ТипСлияния"" ||
	|                displayName == ""ФильтрУведомлений"" ||
	|                displayName == ""Формат"" ||
	|                displayName == ""Якорь"")
	|            {
	|                string enumName = OneScriptFormsDesigner.ParseBetween(valProp, ""Ф."", ""."");
	|                string type_Name = ""osfDesigner."" + OneScriptFormsDesigner.namesEnum[enumName];
	|                Type enumType = Type.GetType(type_Name);
	|                var names = Enum.GetNames(enumType);
	|                int rez = 0;
	|                foreach (var name in names)
	|                {
	|                    if (valProp.Contains(name))
	|                    {
	|                        rez = rez + (int)Enum.Parse(enumType, name);
	|                    }
	|                    var num = (int)Enum.Parse(enumType, name);
	|                }
	|
	|                try
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(component, displayName);
	|                    PropertyInfo pi = component.GetType().GetProperty(propertyName);
	|                    pi.SetValue(component, rez);
	|                }
	|                catch
	|                {
	|                    string propertyName = OneScriptFormsDesigner.GetPropName(component, displayName);
	|                    PropertyInfo pi = component.GetType().BaseType.GetProperty(propertyName);
	|                    pi.SetValue(component, rez);
	|                }
	|                if ((displayName == ""Стыковка"" && component.GetType() != typeof(osfDesigner.ToolBar)) ||
	|                    (displayName == ""Стыковка"" && component.GetType() != typeof(osfDesigner.Splitter)) ||
	|                    (displayName == ""Стыковка"" && component.GetType() != typeof(osfDesigner.StatusBar)))
	|                {
	|                    ((Control)component).BringToFront();
	|                }
	|                return;
	|            }
	|            if (displayName == ""Значок"")
	|            {
	|                string rez = null;
	|                osfDesigner.MyIcon MyIcon1 = null;
	|                rez = valProp.Replace(""\u0022"", """");
	|                rez = OneScriptFormsDesigner.ParseBetween(rez, ""("", "")"");
	|                try
	|                {
	|                    MyIcon1 = new osfDesigner.MyIcon(rez);
	|                    MyIcon1.Path = rez;
	|                }
	|                catch { }
	|
	|                if (control.GetType() == typeof(osfDesigner.Form))
	|                {
	|                    ((osfDesigner.Form)control).Icon = MyIcon1;
	|                }
	|                else if (control.GetType() == typeof(osfDesigner.NotifyIcon))
	|                {
	|                    if (rez != ""AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYAAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//"")
	|                    {
	|                        ((osfDesigner.NotifyIcon)control).Icon = MyIcon1;
	|                    }
	|                }
	|                return;
	|            }
	|            if (displayName == ""МаксимальнаяДата"" ||
	|                displayName == ""МинимальнаяДата"" ||
	|                displayName == ""ТекущаяДата"")
	|            {
	|                string[] result = valProp.Replace(""Дата("", """").Replace("")"", """").Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                DateTime rez = new DateTime();
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        rez = rez.AddYears(Int32.Parse(result[0]) - 1);
	|                    }
	|                    if (i == 1)
	|                    {
	|                        rez = rez.AddMonths(Int32.Parse(result[1]) - 1);
	|                    }
	|                    if (i == 2)
	|                    {
	|                        rez = rez.AddDays(Int32.Parse(result[2]) - 1);
	|                    }
	|                    if (i == 3)
	|                    {
	|                        rez = rez.AddHours(Int32.Parse(result[3]));
	|                    }
	|                    if (i == 4)
	|                    {
	|                        rez = rez.AddMinutes(Int32.Parse(result[4]));
	|                    }
	|                    if (i == 5)
	|                    {
	|                        rez = rez.AddSeconds(Int32.Parse(result[5]));
	|                    }
	|                }
	|
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                PropertyInfo pi = control.GetType().GetProperty(propertyName);
	|                pi.SetValue(control, rez);
	|                return;
	|            }
	|        }
	|
	|        public static void NodeSearch(osfDesigner.TreeView treeView, string nameNodeParent, ref osfDesigner.MyTreeNode node, System.Windows.Forms.TreeNodeCollection treeNodes = null)
	|        {
	|            System.Windows.Forms.TreeNodeCollection _treeNodes;
	|            if (treeNodes == null)
	|            {
	|                _treeNodes = treeView.Nodes;
	|            }
	|            else
	|            {
	|                _treeNodes = treeNodes;
	|            }
	|            osfDesigner.MyTreeNode treeNode = null;
	|            for (int i = 0; i < _treeNodes.Count; i++)
	|            {
	|                treeNode = (osfDesigner.MyTreeNode)_treeNodes[i];
	|                if (treeNode.Name == nameNodeParent)
	|                {
	|                    node = treeNode;
	|                    break;
	|                }
	|                if (treeNode.Nodes.Count > 0)
	|                {
	|                    NodeSearch(treeView, nameNodeParent, ref node, treeNode.Nodes);
	|                }
	|            }
	|        }
	|
	|        public static void SelectedNodeSearch(System.Windows.Forms.TreeView treeView, string nameNodeParent, ref System.Windows.Forms.TreeNode node, System.Windows.Forms.TreeNodeCollection treeNodes = null)
	|        {
	|            System.Windows.Forms.TreeNodeCollection _treeNodes;
	|            if (treeNodes == null)
	|            {
	|                _treeNodes = treeView.Nodes;
	|            }
	|            else
	|            {
	|                _treeNodes = treeNodes;
	|            }
	|            System.Windows.Forms.TreeNode treeNode = null;
	|            for (int i = 0; i < _treeNodes.Count; i++)
	|            {
	|                treeNode = (System.Windows.Forms.TreeNode)_treeNodes[i];
	|                if (((MenuItemEntry)treeNode.Tag).Name == nameNodeParent)
	|                {
	|                    node = treeNode;
	|                    break;
	|                }
	|                if (treeNode.Nodes.Count > 0)
	|                {
	|                    SelectedNodeSearch(treeView, nameNodeParent, ref node, treeNode.Nodes);
	|                }
	|            }
	|        }
	|
	|        public static void SetNodePropValue(osfDesigner.MyTreeNode control, string displayName, string valProp)
	|        {
	|            if (displayName == ""Помечен"")
	|            {
	|                bool bool1 = false;
	|                if (valProp == ""Истина"")
	|                {
	|                    bool1 = true;
	|                }
	|                control.Checked = bool1;
	|            }
	|            // Если это Число.
	|            if (displayName == ""Индекс"" ||
	|                displayName == ""ИндексВыбранногоИзображения"" ||
	|                displayName == ""ИндексИзображения"")
	|            {
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                control.GetType().GetProperty(propertyName).SetValue(control, Int32.Parse(valProp));
	|            }
	|            // Если это Строка.
	|            if (displayName == ""ПолныйПуть"" ||
	|                displayName == ""Текст"")
	|            {
	|                if (valProp.Contains(""Ф.Окружение().НоваяСтрока""))
	|                {
	|                    valProp = valProp.Replace(""\u0022"", """");
	|                    valProp = valProp.Replace(""+Ф.Окружение().НоваяСтрока+"", Environment.NewLine);
	|                }
	|                else
	|                {
	|                    valProp = valProp.Replace(""\u0022"", """");
	|                }
	|                string propertyName = OneScriptFormsDesigner.GetPropName(control, displayName);
	|                control.GetType().GetProperty(propertyName).SetValue(control, valProp);
	|            }
	|            if (displayName == ""ШрифтУзла"")
	|            {
	|                string[] result = valProp.Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|
	|                string FontName = """";
	|                float FontSize = 0f;
	|                int Style1 = 0;
	|
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        try
	|                        {
	|                            FontName = OneScriptFormsDesigner.ParseBetween(result[0], ""\u0022"", null).Replace(""\u0022"", """").Trim();
	|                        }
	|                        catch { }
	|                    }
	|                    if (i == 1)
	|                    {
	|                        try
	|                        {
	|                            FontSize = Single.Parse(result[1].Trim());
	|                        }
	|                        catch
	|                        {
	|                            try
	|                            {
	|                                FontSize = Single.Parse(result[1].Trim().Replace(""."", "",""));
	|                            }
	|                            catch { }
	|                        }
	|                    }
	|                    if (i == 2)
	|                    {
	|                        if (result[2].Contains(""Жирный""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Bold;
	|                        }
	|                        if (result[2].Contains(""Зачеркнутый""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Strikeout;
	|                        }
	|                        if (result[2].Contains(""Курсив""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Italic;
	|                        }
	|                        if (result[2].Contains(""Подчеркнутый""))
	|                        {
	|                            Style1 = Style1 + (int)FontStyle.Underline;
	|                        }
	|                    }
	|                }
	|                control.NodeFont = new Font(FontName, FontSize, (FontStyle)Style1);
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\PropValueConverter.cs");
	
	СтрВыгрузки = 
	"using osfDesigner.Properties;
	|using System.Collections.Generic;
	|using System.Collections;
	|using System.ComponentModel.Design;
	|using System.ComponentModel;
	|using System.IO;
	|using System.Reflection;
	|using System.Windows.Forms;
	|using System;
	|
	|namespace osfDesigner
	|{
	|    public class SaveScript
	|    {
	|        public static System.Windows.Forms.TreeView TreeView1 = pDesigner.DSME.PropertyGridHost.TreeView;
	|        public static System.Windows.Forms.ToolBarButton ButtonSort1 = pDesigner.DSME.PropertyGridHost.ButtonSort;
	|
	|        public static Dictionary<string, Component> comps = new Dictionary<string, Component>();
	|        private static string Template1;
	|        private static readonly string TemplateOriginal =
	|@""Перем Ф;
	|// конец Перем
	|
	|Процедура ПодготовкаКомпонентов()
	|    ПодключитьВнешнююКомпоненту("" + ""\u0022"" + Settings.Default[""dllPath""] + ""\u0022"" + @"");
	|    Ф = Новый ФормыДляОдноСкрипта();
	|
	|    // блок КонецКонструкторы
	|
	|    // блок КонецСвойства
	|КонецПроцедуры
	|
	|ПодготовкаКомпонентов();
	|
	|// ...
	|
	|Ф.ЗапуститьОбработкуСобытий();
	|"";
	|        private static string path = null;
	|
	|        public static string GetScriptText(string fileName = null)
	|        {
	|            // 1. Получить перечень текущих свойств формы и всех компонентов
	|            // 2. Выгрузить обязательные свойства согласно RequiredValues.
	|            // 3. Сравнить текущие свойства с DefaultValues и измененные заполнить.
	|
	|            if (fileName != null)
	|            {
	|                path = fileName.Substring(0, fileName.LastIndexOf('\\') + 1);
	|            }
	|
	|            comps.Clear();
	|            Template1 = TemplateOriginal;
	|            DesignSurfaceManagerExt DesignSurfaceManagerExt = pDesigner.DSME;
	|            IDesignerEventService des = (IDesignerEventService)DesignSurfaceManagerExt.GetService(typeof(IDesignerEventService));
	|            if (des != null)
	|            {
	|                string compName = """";
	|                ComponentCollection ctrlsExisting = des.ActiveDesigner.Container.Components;
	|
	|                // Проверим наличие подсказок.
	|                bool toolTipPresent = false;
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    if (comp.Site.Name.Contains(""Подсказка""))
	|                    {
	|                        toolTipPresent = true;
	|                    }
	|                }
	|
	|                string strForm = """";
	|                // Запишем в скрипт создание компонентов.
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    compName = comp.Site.Name;
	|                    comps.Add(compName, comp); // Установим соответствие между именем компонента и компонентом.
	|                    string trimName = compName;
	|                    for (int i = 0; i < 10; i++)
	|                    {
	|                        trimName = trimName.Replace(i.ToString(), """");
	|                    }
	|                    if (comp.GetType() == typeof(Form))
	|                    {
	|                        strForm = ""// блок Форма"" + Environment.NewLine +
	|                                ""    "" + comp.Site.Name + "" = Ф.Форма();"" + Environment.NewLine +
	|                                ""    "" + comp.Site.Name + "".Отображать = Истина;"" + Environment.NewLine +
	|                                ""    "" + comp.Site.Name + "".Показать();"" + Environment.NewLine +
	|                                ""    "" + comp.Site.Name + "".Активизировать();"" + Environment.NewLine +
	|                                ""    // блок конецФорма"";
	|                    }
	|                    else
	|                    {
	|                        strForm = """" + compName + "" = Ф."" + trimName + ""();"";
	|                    }
	|
	|                    if (compName.Contains(""ИндикаторВертикальный""))
	|                    {
	|                        Template1 = Template1.Replace(""// блок КонецКонструкторы"", """" + compName + "" = Ф.Индикатор(Истина);"" + Environment.NewLine + ""    // блок КонецКонструкторы"");
	|                    }
	|                    else if (compName.Contains(""ИндикаторГоризонтальный""))
	|                    {
	|                        Template1 = Template1.Replace(""// блок КонецКонструкторы"", """" + compName + "" = Ф.Индикатор(Ложь);"" + Environment.NewLine + ""    // блок КонецКонструкторы"");
	|                    }
	|                    else
	|                    {
	|                        Template1 = Template1.Replace(""// блок КонецКонструкторы"", strForm + Environment.NewLine + ""    // блок КонецКонструкторы"");
	|                        Template1 = Template1.Replace(""// конец Перем"", ""Перем "" + compName + "";"" + Environment.NewLine + ""// конец Перем"");
	|                    }
	|                }
	|                // Запишем в скрипте свойства компонентов.
	|                // Последовательность возмем из древовидной структуры TreeView при сортировке ""В порядке создания"".
	|                bool stateSort = ButtonSort1.Pushed;
	|                ButtonSort1.Pushed = false;
	|                Component comp2 = OneScriptFormsDesigner.HighlightedComponent();
	|                pDesigner.DSME.PropertyGridHost.ReloadTreeView();
	|                if (comp2 != null)
	|                {
	|                    pDesigner.DSME.PropertyGridHost.ChangeSelectNode(comp2);
	|                }
	|
	|                ArrayList objArrayList2 = new ArrayList(); // Содержит имена компонентов.
	|                GetNodes1(TreeView1, ref objArrayList2);
	|
	|                for (int i = 0; i < objArrayList2.Count; i++)
	|                {
	|                    Component comp = comps[(string)objArrayList2[i]];
	|                    Component comp1 = null;
	|                    if (comp.GetType() == typeof(System.Windows.Forms.TabPage))
	|                    {
	|                        try
	|                        {
	|                            comp1 = (Component)OneScriptFormsDesigner.RevertSimilarObj(comp);
	|                        }
	|                        catch { }
	|                        if (comp1 != null)
	|                        {
	|                            comp = comp1;
	|                        }
	|                    }
	|                    else if (comp.GetType() == typeof(System.Windows.Forms.ImageList))
	|                    {
	|                        try
	|                        {
	|                            comp1 = (Component)OneScriptFormsDesigner.RevertSimilarObj(comp);
	|                        }
	|                        catch { }
	|                        if (comp1 != null)
	|                        {
	|                            comp = comp1;
	|                        }
	|                    }
	|                    else if (comp.GetType() == typeof(System.Windows.Forms.MainMenu))
	|                    {
	|                        try
	|                        {
	|                            comp1 = (Component)OneScriptFormsDesigner.RevertSimilarObj(comp);
	|                        }
	|                        catch { }
	|                        if (comp1 != null)
	|                        {
	|                            comp = comp1;
	|                        }
	|                    }
	|                    compName = comp.Site.Name;
	|                    Template1 = Template1.Replace(""// блок КонецСвойства"", ""// блок "" + compName + ""."" + Environment.NewLine + ""    // блок КонецСвойства"");
	|
	|                    // Установим для элемента родителя.
	|                    string strParent = """";
	|                    try
	|                    {
	|                        if (comp.GetType() == typeof(osfDesigner.TabPage))
	|                        {
	|                            strParent = ((osfDesigner.TabPage)comp).OriginalObj.Parent.Name;
	|                        }
	|                        else
	|                        {
	|                            strParent = ((dynamic)comp).Parent.Name;
	|                        }
	|                    }
	|                    catch { }
	|                    if (strParent != """")
	|                    {
	|                        AddToScript(compName + "".Родитель = "" + strParent + "";"");
	|                    }
	|
	|                    if (compName.Contains(""ЗначокУведомления""))
	|                    {
	|                        if (comp.GetType().GetProperty(""Icon"").GetValue(comp) == null)
	|                        {
	|                            string strIcon = compName + "".Значок = Ф.Значок(\u0022"" + ""AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYAAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//AAD//wAA//8AAP//"" + ""\u0022"" + ""); // обязательно назначить значок"";
	|                            AddToScript(strIcon);
	|                        }
	|                        string strVisible = compName + "".Отображать = Истина;"";
	|                        AddToScript(strVisible);
	|                    }
	|
	|                    PropertyInfo[] myPropertyInfo = comp.GetType().GetProperties();
	|                    for (int i1 = 0; i1 < myPropertyInfo.Length; i1++)
	|                    {
	|                        string valueName = OneScriptFormsDesigner.GetDisplayName(comp, myPropertyInfo[i1].Name);
	|                        if (valueName != """")
	|                        {
	|                            PropertyDescriptor pd = TypeDescriptor.GetProperties(comp)[myPropertyInfo[i1].Name];
	|                            try
	|                            {
	|                                string compValue = OneScriptFormsDesigner.ObjectConvertToString(pd.GetValue(comp));
	|                                RequiredDefaultValuesValues(comp, compName, valueName, compValue);
	|                            }
	|                            catch { }
	|                        }
	|                    }
	|
	|                    // Обработаем подсказку, если создана хоть одна подсказка.
	|                    if (toolTipPresent)
	|                    {
	|                        Hashtable Hashtable1 = null;
	|                        try
	|                        {
	|                            Hashtable1 = ((dynamic)comp).ToolTip;
	|                        }
	|                        catch { }
	|                        if (Hashtable1 != null)
	|                        {
	|                            foreach (DictionaryEntry de in Hashtable1)
	|                            {
	|                                string nameToolTip = (string)de.Key;
	|                                string compValue = (string)de.Value;
	|                                compValue = compValue.Replace(Environment.NewLine, ""\u0022 + Ф.Окружение().НоваяСтрока + \u0022"");
	|                                AddToScript(nameToolTip + "".УстановитьПодсказку("" + compName + "", \u0022"" + compValue + ""\u0022);"");
	|                            }
	|                        }
	|                    }
	|                    if (compName.Contains(""ПанельИнструментов"") ||
	|                        compName.Contains(""Разделитель"") ||
	|                        compName.Contains(""СтрокаСостояния""))
	|                    {
	|                        AddToScript(compName + "".НаПереднийПлан();"");
	|                    }
	|                }
	|                ButtonSort1.Pushed = stateSort;
	|                Component comp3 = OneScriptFormsDesigner.HighlightedComponent();
	|                pDesigner.DSME.PropertyGridHost.ReloadTreeView();
	|                if (comp3 != null)
	|                {
	|                    pDesigner.DSME.PropertyGridHost.ChangeSelectNode(comp3);
	|                }
	|            }
	|
	|            string script = ReSort(Template1);
	|            string newScript = """";
	|            string[] result = script.Split(new string[] { Environment.NewLine }, StringSplitOptions.None);
	|            for (int i1 = 0; i1 < result.Length; i1++)
	|            {
	|                string strCurrent = result[i1];
	|
	|                if (strCurrent.Contains(@""// блок КонецКонструкторы"") || strCurrent.Contains(@""// конец Перем"") || strCurrent.Contains(@""// блок Форма""))
	|                {
	|                }
	|                else if (strCurrent.Contains(@""// блок""))
	|                {
	|                    newScript = newScript + Environment.NewLine;
	|                }
	|                else if (strCurrent.Trim() == """")
	|                {
	|                    newScript = newScript + Environment.NewLine;
	|                }
	|                else
	|                {
	|                    newScript = newScript + strCurrent + Environment.NewLine;
	|                }
	|            }
	|            return newScript;
	|        }
	|
	|        // Переформируем скрипт.
	|        private static string ReSort(string Template1)
	|        {
	|            string[] stringSeparators = new string[] { Environment.NewLine };
	|
	|            string str1 = Template1;
	|
	|            // Для удобочитаемости сделаем сортировку в разделе объявления переменных.
	|            string strPerem = (string)OneScriptFormsDesigner.StrFindBetween(str1, @""Перем Ф;"", @""// конец Перем"")[0];
	|            string[] peremArray = strPerem.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|            SortedList<string, string> slPerem = new SortedList<string, string>();
	|            for (int i = 0; i < peremArray.Length; i++)
	|            {
	|                string strnum = peremArray[i].Replace("";"", """");
	|                string trimName = strnum;
	|                for (int i1 = 0; i1 < 10; i1++)
	|                {
	|                    trimName = trimName.Replace(i1.ToString(), """");
	|                }
	|                strnum = strnum.Replace(trimName, """");
	|                int capacity = 10; // Разрядность для сортировки.
	|                // Только форма может не иметь в конце имени нумерации, учтем это.
	|                if (strnum.Length == 0) // Это переименованная форма без цифр на конце.
	|                {
	|                    strnum = ""0"";
	|                    for (int i1 = 0; i1 < capacity - strnum.Length; i1++)
	|                    {
	|                        strnum = ""0"" + strnum;
	|                    }
	|                }
	|                else
	|                {
	|                    for (int i1 = 0; i1 < capacity - strnum.Length; i1++)
	|                    {
	|                        strnum = ""0"" + strnum;
	|                    }
	|                }
	|                slPerem.Add(trimName + strnum, peremArray[i]);
	|            }
	|            List<string> PeremList = new List<string>();
	|            IList<string> listKeyPerem = slPerem.Keys;
	|            for (int i = 0; i < listKeyPerem.Count; i++)
	|            {
	|                PeremList.Add(slPerem[listKeyPerem[i]]);
	|            }
	|
	|            string newPerem = """";
	|            for (int i = 0; i < PeremList.Count; i++)
	|            {
	|                if (i == (PeremList.Count - 1))
	|                {
	|                    newPerem = newPerem + Environment.NewLine + PeremList[i] + Environment.NewLine;
	|                }
	|                else
	|                {
	|                    newPerem = newPerem + Environment.NewLine + PeremList[i];
	|                }
	|            }
	|            str1 = str1.Replace(strPerem, newPerem);
	|
	|            // Подправим код для подсказок.
	|            string strDuplicate = str1;
	|            string[] result2 = strDuplicate.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|            for (int i = 0; i < result2.Length; i++)
	|            {
	|                string strCurrent = result2[i];
	|                if (strCurrent.Contains("".УстановитьПодсказку(""))
	|                {
	|                    string nameToolTip = OneScriptFormsDesigner.ParseBetween(strCurrent, null, "".УстановитьПодсказку("").Trim();
	|                    str1 = str1.Replace(strCurrent + Environment.NewLine, """");
	|                    str1 = str1.Replace(@""// блок "" + nameToolTip + ""."", @""// блок "" + nameToolTip + ""."" + Environment.NewLine + strCurrent);
	|                }
	|            }
	|
	|            // Удалим повторы строк.
	|            ArrayList ArrayList2 = OneScriptFormsDesigner.StrFindBetween(str1, @""// блок"", @""    // блок"", false);
	|            ArrayList repeats = new ArrayList(); // Массив строк без повторов.
	|            string strBefore;
	|            string strAfter;
	|            for (int i = 0; i < ArrayList2.Count; i++)
	|            {
	|                strBefore = """";
	|                strAfter = """";
	|                repeats.Clear();
	|                string fragment1 = (string)ArrayList2[i];
	|                string[] result = fragment1.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strCurrent = result[i1];
	|                    if (!strCurrent.Contains(@""// блок""))
	|                    {
	|                        strBefore = strBefore + strCurrent + System.Environment.NewLine;
	|                        if (!repeats.Contains(strCurrent))
	|                        {
	|                            repeats.Add(strCurrent);
	|                        }
	|                    }
	|                }
	|                for (int i2 = 0; i2 < repeats.Count; i2++)
	|                {
	|                    strAfter = strAfter + repeats[i2] + System.Environment.NewLine;
	|                }
	|                if (strBefore != strAfter && strBefore.Length != 0)
	|                {
	|                    str1 = str1.Replace(strBefore, strAfter);
	|                }
	|            }
	|
	|            // Зададим порядок свойств во фрагментах.
	|            ArrayList2 = OneScriptFormsDesigner.StrFindBetween(str1, @""// блок"", @""    // блок"", false);
	|            for (int i = 0; i < ArrayList2.Count; i++)
	|            {
	|                string fragment1 = (string)ArrayList2[i];
	|                string namecomp = OneScriptFormsDesigner.ParseBetween(fragment1, @""[<"", @""]"");
	|
	|                string fragment2 = """";
	|                SortedList SortedList1 = new SortedList();
	|                SortedList1.Capacity = 1000;
	|                string[] result = fragment1.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strResult = result[i1];
	|                    if (i1 == 0)
	|                    {
	|                        SortedList1.Add(i1, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Родитель =""))
	|                    {
	|                        SortedList1.Add(1, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Стыковка =""))
	|                    {
	|                        SortedList1.Add(2, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + "".НаПереднийПлан();""))
	|                    {
	|                        SortedList1.Add(3, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Размер =""))
	|                    {
	|                        SortedList1.Add(4, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""ПорядокОбхода =""))
	|                    {
	|                        SortedList1.Add(5, strResult);
	|                    }
	|                    else if (strResult.Contains(namecomp + ""."" + ""Флажки =""))
	|                    {
	|                        SortedList1.Add(6, strResult);
	|                    }
	|                    else
	|                    {
	|                        SortedList1.Add(i1 + 500, strResult);
	|                    }
	|                }
	|                ArrayList ArrayList3 = new ArrayList();
	|                for (int i1 = 0; i1 < SortedList1.Capacity; i1++)
	|                {
	|                    if (SortedList1[i1] != null)
	|                    {
	|                        ArrayList3.Add(SortedList1[i1]);
	|                    }
	|                }
	|                for (int i4 = 0; i4 < ArrayList3.Count; i4++)
	|                {
	|                    string strArrayList = ((string)ArrayList3[i4]).Replace(Environment.NewLine, """").Trim();
	|                    if (i4 == 0)
	|                    {
	|                        fragment2 = fragment2 + strArrayList;
	|                    }
	|                    else
	|                    {
	|                        fragment2 = fragment2 + Environment.NewLine + ""    "" + strArrayList;
	|                    }
	|                }
	|                str1 = str1.Replace(fragment1, fragment2);
	|            }
	|            comps.Clear();
	|            return str1;
	|        }
	|
	|        private static void RequiredDefaultValuesValues(dynamic comp, string compName, string valueName, string compValue)
	|        {
	|            if (valueName == ""ДвойнаяБуферизация"" ||
	|                valueName == ""РежимАвтоМасштабирования"" ||
	|                valueName == ""DoubleBuffered"")
	|            {
	|                return;
	|            }
	|
	|            if (comp.RequiredValues.Contains(valueName + "" ==""))
	|            {
	|                TextToScript(compName, valueName, compValue, comp);
	|            }
	|            else
	|            {
	|                if (!comp.DefaultValues.Contains(valueName + "" == "" + compValue))
	|                {
	|                    try
	|                    {
	|                        TextToScript(compName, valueName, compValue, comp);
	|                    }
	|                    catch
	|                    {
	|                        System.Windows.Forms.MessageBox.Show(""Не обработано: на компоненте = "" + compName + "" valueName="" + valueName + "" compValue="" + compValue);
	|                    }
	|                }
	|            }
	|        }
	|
	|        private static void TextToScript(string compName, string valueName, string compValue, dynamic val = null)
	|        {
	|            // Пропустим некоторые свойства.
	|            if (val.GetType() == typeof(osfDesigner.StatusBar) && (valueName == ""Положение"" || valueName == ""Размер""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.Splitter) && (valueName == ""Курсор"" || valueName == ""Положение""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.MenuItemEntry) && (valueName == ""Текст""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.MyTreeNode) && (valueName == ""ПолныйПуть""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridTableStyle) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridTextBoxColumn) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.DataGridBoolColumn) && (valueName == ""ИмяСтиля""))
	|            {
	|                return;
	|            }
	|	
	|            if (val.GetType() == typeof(osfDesigner.Form) && (valueName == ""Стыковка""))
	|            {
	|                return;
	|            }
	|            if (val.GetType() == typeof(osfDesigner.Form) && (valueName == ""Якорь""))
	|            {
	|                return;
	|            }
	|            // закончили пропуск свойств
	|
	|            if (compValue == ""Ложь"" || compValue == ""Истина"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ЭлементыМеню"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.Menu.MenuItemCollection MenuItemCollection1 = (System.Windows.Forms.Menu.MenuItemCollection)val.MenuItems;
	|                    if (MenuItemCollection1.Count > 0)
	|                    {
	|                        MenuItemEntry MenuItemEntry1;
	|                        for (int i = 0; i < MenuItemCollection1.Count; i++)
	|                        {
	|                            MenuItemEntry1 = OneScriptFormsDesigner.RevertSimilarObj(MenuItemCollection1[i]);
	|                            string strName = MenuItemEntry1.Name.Contains(""Сепаратор"") ? ""-"" : MenuItemEntry1.Text;
	|                            AddToScript(MenuItemEntry1.Name + "" = "" + compName + "".ЭлементыМеню.Добавить(Ф.ЭлементМеню(\u0022"" + strName + ""\u0022));"");
	|                            PropComponent(MenuItemEntry1);
	|                            if (MenuItemEntry1.MenuItems.Count > 0)
	|                            {
	|                                GetMenuItems((MenuItemEntry)MenuItemEntry1);
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Меню"")
	|            {
	|                if (compValue != null)
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + compValue + "";"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""ОбластьСсылки"")
	|            {
	|                if (val != null)
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ОбластьСсылки("" + compValue.Replace("";"", "","") + "");"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""Подэлементы"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ListViewItem.ListViewSubItemCollection ListViewSubItemCollection1 = (System.Windows.Forms.ListViewItem.ListViewSubItemCollection)val.SubItems;
	|                    if (ListViewSubItemCollection1.Count > 0)
	|                    {
	|                        osfDesigner.ListViewSubItem ListViewSubItem1;
	|                        for (int i = 1; i < ListViewSubItemCollection1.Count; i++) // Первый индекс должен быть 1, а не 0.
	|                        {
	|                            ListViewSubItem1 = (osfDesigner.ListViewSubItem)ListViewSubItemCollection1[i];
	|                            AddToScript(ListViewSubItem1.Name + "" = Ф.ПодэлементСпискаЭлементов();"");
	|                            PropComponent(ListViewSubItem1);
	|                            AddToScript(compName + "".Подэлементы.Добавить("" + ListViewSubItem1.Name + "");"");
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Элементы"")
	|            {
	|                if (val != null)
	|                {
	|                    if (val.GetType() == typeof(osfDesigner.ComboBox))
	|                    {
	|                        System.Windows.Forms.ComboBox.ObjectCollection ComboBoxObjectCollection1 = (System.Windows.Forms.ComboBox.ObjectCollection)val.Items;
	|                        if (ComboBoxObjectCollection1.Count > 0)
	|                        {
	|                            osfDesigner.ListItemComboBox ListItemComboBox1;
	|                            string strValue = """";
	|                            for (int i = 0; i < ComboBoxObjectCollection1.Count; i++)
	|                            {
	|                                ListItemComboBox1 = (osfDesigner.ListItemComboBox)ComboBoxObjectCollection1[i];
	|                                if (ListItemComboBox1.ValueType == osfDesigner.DataType.Строка)
	|                                {
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, \u0022"" + ListItemComboBox1.Text + ""\u0022));"";
	|                                }
	|                                else if (ListItemComboBox1.ValueType == osfDesigner.DataType.Дата)
	|                                {
	|                                    DateTime DateTime1 = ListItemComboBox1.ValueDateTime;
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, "" +
	|                                        ""Дата("" +
	|                                        DateTime1.ToString(""yyyy"") + "", "" +
	|                                        DateTime1.ToString(""MM"") + "", "" +
	|                                        DateTime1.ToString(""dd"") + "", "" +
	|                                        DateTime1.ToString(""HH"") + "", "" +
	|                                        DateTime1.ToString(""mm"") + "", "" +
	|                                        DateTime1.ToString(""ss"") + "")"" + ""));"";
	|                                }
	|                                else if (ListItemComboBox1.ValueType == osfDesigner.DataType.Булево)
	|                                {
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, "" + ListItemComboBox1.Text + ""));"";
	|                                }
	|                                else if (ListItemComboBox1.ValueType == osfDesigner.DataType.Число)
	|                                {
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemComboBox1.Text + ""\u0022, "" + ListItemComboBox1.Text + ""));"";
	|                                }
	|                                if (i == 0)
	|                                {
	|                                    strValue = strValue.TrimStart(' ');
	|                                }
	|                                if (i < (ComboBoxObjectCollection1.Count - 1))
	|                                {
	|                                    strValue = strValue + Environment.NewLine;
	|                                }
	|                            }
	|                            AddToScript(strValue);
	|                        }
	|                    }
	|                    else if (val.GetType() == typeof(osfDesigner.ListBox))
	|                    {
	|                        System.Windows.Forms.ListBox.ObjectCollection ListBoxObjectCollection1 = (System.Windows.Forms.ListBox.ObjectCollection)val.Items;
	|                        if (ListBoxObjectCollection1.Count > 0)
	|                        {
	|                            osfDesigner.ListItemListBox ListItemListBox1;
	|                            string strValue = """";
	|                            for (int i = 0; i < ListBoxObjectCollection1.Count; i++)
	|                            {
	|                                ListItemListBox1 = (osfDesigner.ListItemListBox)ListBoxObjectCollection1[i];
	|                                if (ListItemListBox1.ValueType == osfDesigner.DataType.Строка)
	|                                {
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, \u0022"" + ListItemListBox1.Text + ""\u0022));"";
	|                                }
	|                                else if (ListItemListBox1.ValueType == osfDesigner.DataType.Дата)
	|                                {
	|                                    DateTime DateTime1 = ListItemListBox1.ValueDateTime;
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, "" +
	|                                        ""Дата("" +
	|                                        DateTime1.ToString(""yyyy"") + "", "" +
	|                                        DateTime1.ToString(""MM"") + "", "" +
	|                                        DateTime1.ToString(""dd"") + "", "" +
	|                                        DateTime1.ToString(""HH"") + "", "" +
	|                                        DateTime1.ToString(""mm"") + "", "" +
	|                                        DateTime1.ToString(""ss"") + "")"" + ""));"";
	|                                }
	|                                else if (ListItemListBox1.ValueType == osfDesigner.DataType.Булево)
	|                                {
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, "" + ListItemListBox1.Text + ""));"";
	|                                }
	|                                else if (ListItemListBox1.ValueType == osfDesigner.DataType.Число)
	|                                {
	|                                    strValue = strValue + ""    "" + compName + "".Элементы.Добавить(Ф.ЭлементСписка(\u0022"" + ListItemListBox1.Text + ""\u0022, "" + ListItemListBox1.Text + ""));"";
	|                                }
	|                                if (i == 0)
	|                                {
	|                                    strValue = strValue.TrimStart(' ');
	|                                }
	|                                if (i < (ListBoxObjectCollection1.Count - 1))
	|                                {
	|                                    strValue = strValue + Environment.NewLine;
	|                                }
	|                            }
	|                            AddToScript(strValue);
	|                        }
	|                    }
	|                    else if (val.GetType() == typeof(osfDesigner.ListView))
	|                    {
	|                        System.Windows.Forms.ListView.ListViewItemCollection ListViewItemCollection1 = (System.Windows.Forms.ListView.ListViewItemCollection)val.Items;
	|                        if (ListViewItemCollection1.Count > 0)
	|                        {
	|                            osfDesigner.ListViewItem ListViewItem1;
	|                            for (int i = 0; i < ListViewItemCollection1.Count; i++)
	|                            {
	|                                ListViewItem1 = (osfDesigner.ListViewItem)ListViewItemCollection1[i];
	|                                AddToScript(ListViewItem1.Name + "" = Ф.ЭлементСпискаЭлементов();"");
	|                                PropComponent(ListViewItem1);
	|                                AddToScript(compName + "".Элементы.Добавить("" + ListViewItem1.Name + "");"");
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Панели"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.StatusBar.StatusBarPanelCollection StatusBarPanelCollection1 = (System.Windows.Forms.StatusBar.StatusBarPanelCollection)val.Panels;
	|                    if (StatusBarPanelCollection1.Count > 0)
	|                    {
	|                        osfDesigner.StatusBarPanel StatusBarPanel1;
	|                        for (int i = 0; i < StatusBarPanelCollection1.Count; i++)
	|                        {
	|                            StatusBarPanel1 = (osfDesigner.StatusBarPanel)StatusBarPanelCollection1[i];
	|                            AddToScript(StatusBarPanel1.Name + "" = Ф.ПанельСтрокиСостояния();"");
	|                            AddToScript(compName + "".Панели.Добавить("" + StatusBarPanel1.Name + "");"");
	|                            PropComponent(StatusBarPanel1);
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Колонки"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ListView.ColumnHeaderCollection ColumnHeaderCollection1 = (System.Windows.Forms.ListView.ColumnHeaderCollection)val.Columns;
	|                    if (ColumnHeaderCollection1.Count > 0)
	|                    {
	|                        osfDesigner.ColumnHeader ColumnHeader1;
	|                        for (int i = 0; i < ColumnHeaderCollection1.Count; i++)
	|                        {
	|                            ColumnHeader1 = (osfDesigner.ColumnHeader)ColumnHeaderCollection1[i];
	|                            AddToScript(ColumnHeader1.Name + "" = Ф.Колонка();"");
	|                            PropComponent(ColumnHeader1);
	|                            AddToScript(compName + "".Колонки.Добавить("" + ColumnHeader1.Name + "");"");
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""СтилиКолонкиСеткиДанных"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.GridColumnStylesCollection GridColumnStylesCollection1 = (System.Windows.Forms.GridColumnStylesCollection)val.GridColumnStyles;
	|                    if (GridColumnStylesCollection1.Count > 0)
	|                    {
	|                        for (int i = 0; i < GridColumnStylesCollection1.Count; i++)
	|                        {
	|                            dynamic Style1 = GridColumnStylesCollection1[i];
	|                            if (Style1.GetType() == typeof(osfDesigner.DataGridBoolColumn))
	|                            {
	|                                osfDesigner.DataGridBoolColumn GridColumnStyle1 = (osfDesigner.DataGridBoolColumn)Style1;
	|                                AddToScript(GridColumnStyle1.NameStyle + "" = Ф.СтильКолонкиБулево();"" + Environment.NewLine +
	|                                    ""    "" + GridColumnStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + GridColumnStyle1.MappingName + ""\u0022;"");
	|                                PropComponent(GridColumnStyle1);
	|                                AddToScript(compName + "".СтилиКолонкиСеткиДанных.Добавить("" + GridColumnStyle1.NameStyle + "");"");
	|                            }
	|                            else if (Style1.GetType() == typeof(osfDesigner.DataGridTextBoxColumn))
	|                            {
	|                                osfDesigner.DataGridTextBoxColumn GridColumnStyle1 = (osfDesigner.DataGridTextBoxColumn)Style1;
	|                                AddToScript(GridColumnStyle1.NameStyle + "" = Ф.СтильКолонкиПолеВвода();"" + Environment.NewLine +
	|                                    ""    "" + GridColumnStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + GridColumnStyle1.MappingName + ""\u0022;"");
	|                                PropComponent(GridColumnStyle1);
	|                                AddToScript(compName + "".СтилиКолонкиСеткиДанных.Добавить("" + GridColumnStyle1.NameStyle + "");"");
	|                            }
	|                            else if (Style1.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle))
	|                            {
	|                                osfDesigner.DataGridComboBoxColumnStyle GridColumnStyle1 = (osfDesigner.DataGridComboBoxColumnStyle)Style1;
	|                                AddToScript(GridColumnStyle1.NameStyle + "" = Ф.СтильКолонкиПолеВыбора();"" + Environment.NewLine +
	|                                    ""    "" + GridColumnStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + GridColumnStyle1.MappingName + ""\u0022;"");
	|                                PropComponent(GridColumnStyle1);
	|                                AddToScript(compName + "".СтилиКолонкиСеткиДанных.Добавить("" + GridColumnStyle1.NameStyle + "");"");
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""СтилиТаблицы"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.GridTableStylesCollection GridTableStylesCollection1 = (System.Windows.Forms.GridTableStylesCollection)val.TableStyles;
	|                    if (GridTableStylesCollection1.Count > 0)
	|                    {
	|                        osfDesigner.DataGridTableStyle DataGridTableStyle1;
	|                        for (int i = 0; i < GridTableStylesCollection1.Count; i++)
	|                        {
	|                            System.Windows.Forms.DataGridTableStyle OriginalObj = GridTableStylesCollection1[i];
	|                            DataGridTableStyle1 = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|                            AddToScript(DataGridTableStyle1.NameStyle + "" = Ф.СтильТаблицыСеткиДанных();"" + Environment.NewLine +
	|                                ""    "" + DataGridTableStyle1.NameStyle + "".ИмяОтображаемого = \u0022"" + DataGridTableStyle1.MappingName + ""\u0022;"" + Environment.NewLine +
	|                                ""    "" + compName + "".СтилиТаблицы.Добавить("" + DataGridTableStyle1.NameStyle + "");"");
	|                            PropComponent(DataGridTableStyle1);
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Кнопки"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ToolBar.ToolBarButtonCollection ToolBarButtonCollection1 = (System.Windows.Forms.ToolBar.ToolBarButtonCollection)val.Buttons;
	|                    if (ToolBarButtonCollection1.Count > 0)
	|                    {
	|                        osfDesigner.ToolBarButton ToolBarButton1;
	|                        for (int i = 0; i < ToolBarButtonCollection1.Count; i++)
	|                        {
	|                            ToolBarButton1 = (osfDesigner.ToolBarButton)ToolBarButtonCollection1[i].Tag;
	|                            AddToScript(ToolBarButton1.Name + "" = "" + compName + "".Кнопки.Добавить(Ф.КнопкаПанелиИнструментов());"");
	|                            PropComponent(ToolBarButton1);
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Узлы"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.TreeNodeCollection TreeNodeCollection1 = (System.Windows.Forms.TreeNodeCollection)val.Nodes;
	|                    if (TreeNodeCollection1.Count > 0)
	|                    {
	|                        osfDesigner.MyTreeNode MyTreeNode1;
	|                        for (int i = 0; i < TreeNodeCollection1.Count; i++)
	|                        {
	|                            MyTreeNode1 = (osfDesigner.MyTreeNode)TreeNodeCollection1[i];
	|                            AddToScript(MyTreeNode1.Name + "" = "" + compName + "".Узлы.Добавить(\u0022"" + MyTreeNode1.Name + ""\u0022);"");
	|                            PropComponent(MyTreeNode1);
	|                            if (MyTreeNode1.Nodes.Count > 0)
	|                            {
	|                                GetNodes(MyTreeNode1);
	|                            }
	|                        }
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Шрифт"" || valueName == ""ШрифтУзла"" || valueName == ""ШрифтЗаголовков"")
	|            {
	|                string FontName = """";
	|                string FontSize = """";
	|                string FontStyle = """";
	|
	|                string[] separators = new string[] { "";"" };
	|                string[] result = compValue.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        FontName = result[0];
	|                    }
	|                    if (i == 1)
	|                    {
	|                        FontSize = result[1].TrimStart(' ');
	|                        FontSize = FontSize.Replace(""pt"", """");
	|                        FontSize = FontSize.Replace("","", ""."");
	|                    }
	|                    if (i == 2)
	|                    {
	|                        FontStyle = result[2].Trim(' ');
	|                        FontStyle = FontStyle.Replace(""стиль="", ""Ф.СтильШрифта."");
	|                        FontStyle = FontStyle.Replace("", "", "" + Ф.СтильШрифта."");
	|                    }
	|                }
	|                AddToScript(compName + ""."" + valueName + "" = Ф.Шрифт(\u0022"" + FontName + ""\u0022, "" + FontSize + "", "" + FontStyle + "");"");
	|                return;
	|            }
	|            if (valueName == ""ВыделенныеДаты"")
	|            {
	|                if (val != null)
	|                {
	|                    MyBoldedDatesList MyBoldedDatesList1 = (MyBoldedDatesList)val.BoldedDates_osf;
	|                    string strDateTimes = """";
	|                    if (MyBoldedDatesList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyBoldedDatesList1.Count; i1++)
	|                        {
	|                            strDateTimes = strDateTimes + ""    "" + compName + ""."" + valueName + "".Добавить(Дата("" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""yyyy"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""MM"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""dd"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""HH"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""mm"") + "", "" +
	|                                    MyBoldedDatesList1[i1].Value.ToString(""ss"") + ""));"";
	|                            if (i1 == 0)
	|                            {
	|                                strDateTimes = strDateTimes.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyBoldedDatesList1.Count - 1))
	|                            {
	|                                strDateTimes = strDateTimes + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(strDateTimes);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""ЕжегодныеДаты"")
	|            {
	|                if (val != null)
	|                {
	|                    MyAnnuallyBoldedDatesList MyAnnuallyBoldedDatesList1 = (MyAnnuallyBoldedDatesList)val.AnnuallyBoldedDates_osf;
	|                    string strDateTimes = """";
	|                    if (MyAnnuallyBoldedDatesList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyAnnuallyBoldedDatesList1.Count; i1++)
	|                        {
	|                            strDateTimes = strDateTimes + ""    "" + compName + ""."" + valueName + "".Добавить(Дата("" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""yyyy"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""MM"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""dd"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""HH"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""mm"") + "", "" +
	|                                    MyAnnuallyBoldedDatesList1[i1].Value.ToString(""ss"") + ""));"";
	|                            if (i1 == 0)
	|                            {
	|                                strDateTimes = strDateTimes.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyAnnuallyBoldedDatesList1.Count - 1))
	|                            {
	|                                strDateTimes = strDateTimes + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(strDateTimes);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""ЕжемесячныеДаты"")
	|            {
	|                if (val != null)
	|                {
	|                    MyMonthlyBoldedDatesList MyMonthlyBoldedDatesList1 = (MyMonthlyBoldedDatesList)val.MonthlyBoldedDates_osf;
	|                    string strDateTimes = """";
	|                    if (MyMonthlyBoldedDatesList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyMonthlyBoldedDatesList1.Count; i1++)
	|                        {
	|                            strDateTimes = strDateTimes + ""    "" + compName + ""."" + valueName + "".Добавить(Дата("" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""yyyy"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""MM"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""dd"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""HH"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""mm"") + "", "" +
	|                                    MyMonthlyBoldedDatesList1[i1].Value.ToString(""ss"") + ""));"";
	|                            if (i1 == 0)
	|                            {
	|                                strDateTimes = strDateTimes.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyMonthlyBoldedDatesList1.Count - 1))
	|                            {
	|                                strDateTimes = strDateTimes + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(strDateTimes);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""Изображения"")
	|            {
	|                if (val != null)
	|                {
	|                    osfDesigner.MyList MyList1 = (osfDesigner.MyList)val.Images;
	|                    string str1 = """";
	|                    if (MyList1.Count > 0)
	|                    {
	|                        for (int i1 = 0; i1 < MyList1.Count; i1++)
	|                        {
	|                            string newPath = MyList1[i1].Path;
	|                            if (path != null)
	|                            {
	|                                string newFileName = MyList1[i1].Path.Substring(MyList1[i1].Path.LastIndexOf('\\') + 1);
	|                                newPath = path + newFileName;
	|                                if (!System.IO.File.Exists(newPath))
	|                                {
	|                                    System.IO.File.Copy(MyList1[i1].Path, newPath);
	|                                }
	|                            }
	|
	|                            str1 = str1 + ""    "" + compName + "".Изображения.Добавить(Ф.Картинка(\u0022"" + newPath + ""\u0022));"";
	|                            if (i1 == 0)
	|                            {
	|                                str1 = str1.TrimStart(' ');
	|                            }
	|                            if (i1 < (MyList1.Count - 1))
	|                            {
	|                                str1 = str1 + Environment.NewLine;
	|                            }
	|                        }
	|                        AddToScript(str1);
	|                    }
	|                }
	|                return;
	|            }
	|            if (valueName == ""СписокИзображений"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ImageList ImageList1 = (System.Windows.Forms.ImageList)val.ImageList;
	|                    ImageList SimilarObj = (ImageList)OneScriptFormsDesigner.RevertSimilarObj(ImageList1);
	|                    AddToScript(compName + "".СписокИзображений = "" + compValue + "";"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""СписокБольшихИзображений"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ImageList ImageList1 = (System.Windows.Forms.ImageList)val.LargeImageList;
	|                    ImageList SimilarObj = (ImageList)OneScriptFormsDesigner.RevertSimilarObj(ImageList1);
	|                    AddToScript(compName + "".СписокБольшихИзображений = "" + compValue + "";"" + Environment.NewLine);
	|                }
	|                return;
	|            }
	|            if (valueName == ""СписокМаленькихИзображений"")
	|            {
	|                if (val != null)
	|                {
	|                    System.Windows.Forms.ImageList ImageList1 = (System.Windows.Forms.ImageList)val.SmallImageList;
	|                    ImageList SimilarObj = (ImageList)OneScriptFormsDesigner.RevertSimilarObj(ImageList1);
	|                    AddToScript(compName + "".СписокМаленькихИзображений = "" + compValue + "";"" + Environment.NewLine);
	|                }
	|                return;
	|            }
	|            if (valueName == ""Изображение"" || valueName == ""ФоновоеИзображение"")
	|            {
	|                if (compValue != ""Bitmap ()"")
	|                {
	|                    string FileName = OneScriptFormsDesigner.ParseBetween(compValue, ""("", "")"");
	|                    string newFileName = FileName.Substring(FileName.LastIndexOf('\\') + 1);
	|                    string newPath = path + newFileName;
	|                    if (!File.Exists(newPath))
	|                    {
	|                        File.Copy(FileName, newPath);
	|                    }
	|                    AddToScript(compName + ""."" + valueName + "" = Ф.Картинка(\u0022"" + newPath + ""\u0022);"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""ВыделенныйДиапазон"")
	|            {
	|                if (val != null)
	|                {
	|                    SelectionRange SelectionRange1 = (SelectionRange)val.SelectionRange;
	|                    string str1 = compName + ""."" + valueName + "" = "" + ""Ф.ВыделенныйДиапазон(Дата("" +
	|                                                        SelectionRange1.Start.ToString(""yyyy"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""MM"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""dd"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""HH"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""mm"") + "", "" +
	|                                                        SelectionRange1.Start.ToString(""ss"") + ""), "" +
	|                                                        ""Дата("" +
	|                                                        SelectionRange1.End.ToString(""yyyy"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""MM"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""dd"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""HH"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""mm"") + "", "" +
	|                                                        SelectionRange1.End.ToString(""ss"") + ""));"";
	|                    AddToScript(str1);
	|                }
	|                return;
	|            }
	|            // Если это цвет.
	|            if (valueName == ""ОсновнойЦвет"" ||
	|                valueName == ""ОсновнойЦветЗаголовков"" ||
	|                valueName == ""ПрозрачныйЦвет"" ||
	|                valueName == ""Цвет"" ||
	|                valueName == ""ЦветАктивнойСсылки"" ||
	|                valueName == ""ЦветПосещеннойСсылки"" ||
	|                valueName == ""ЦветСетки"" ||
	|                valueName == ""ЦветСсылки"" ||
	|                valueName == ""ЦветФона"" ||
	|                valueName == ""ЦветФонаЗаголовка"" ||
	|                valueName == ""ЦветФонаЗаголовков"" ||
	|                valueName == ""ЦветФонаНечетныхСтрок"" ||
	|                valueName == ""ЦветФонаСеткиДанных"")
	|            {
	|                string str1 = """";
	|                if (val != null)
	|                {
	|                    if (val.ToString() == ""Color [Empty]"")
	|                    {
	|                        str1 = compName + ""."" + valueName + "" = Ф.Цвет(0, 0, 0);"";
	|                    }
	|                    else if (compValue.Contains("";""))
	|                    {
	|                        str1 = compName + ""."" + valueName + "" = Ф.Цвет("" + compValue.Replace("";"", "","") + "");"";
	|                    }
	|                    else
	|                    {
	|                        str1 = compName + ""."" + valueName + "" = Ф.Цвет(\u0022"" + compValue + ""\u0022);"";
	|                    }
	|                }
	|                AddToScript(str1);
	|                return;
	|            }
	|            // Если это контрол.
	|            if (valueName == ""КнопкаОтмена"" ||
	|                valueName == ""КнопкаПринять"" ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.UserControl)) ||
	|                valueName == ""ВыбранныйОбъект"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + compValue + "";"");
	|                return;
	|            }
	|            // Если это строка для ФорматированноеПолеВвода (RichTextBox).
	|            if (valueName == ""Текст"" && val.GetType() == typeof(osfDesigner.RichTextBox))
	|            {
	|                compValue = compValue.Replace(""\n"", ""\u0022 + Ф.Окружение().НоваяСтрока + \u0022"");
	|                AddToScript(compName + ""."" + valueName + "" = \u0022"" + compValue + ""\u0022;"");
	|                return;
	|            }
	|            // Если это событие.
	|            if (valueName == ""ВыбранныйЭлементСеткиИзменен"" ||
	|                valueName == ""ВыделениеИзменено"" ||
	|                valueName == ""ДатаВыбрана"" ||
	|                valueName == ""ДатаИзменена"" ||
	|                valueName == ""ДвойноеНажатие"" ||
	|                valueName == ""Закрыта"" ||
	|                valueName == ""ЗначениеИзменено"" ||
	|                valueName == ""ЗначениеСвойстваИзменено"" ||
	|                valueName == ""ИндексВыбранногоИзменен"" ||
	|                valueName == ""КлавишаВверх"" ||
	|                valueName == ""КлавишаВниз"" ||
	|                valueName == ""КлавишаНажата"" ||
	|                valueName == ""КолонкаНажатие"" ||
	|                valueName == ""МышьНадЭлементом"" ||
	|                valueName == ""МышьПокинулаЭлемент"" ||
	|                valueName == ""Нажатие"" ||
	|                valueName == ""ПередРазвертыванием"" ||
	|                valueName == ""ПередРедактированиемНадписи"" ||
	|                valueName == ""ПоложениеИзменено"" ||
	|                valueName == ""ПометкаИзменена"" ||
	|                valueName == ""ПослеВыбора"" ||
	|                valueName == ""ПослеРедактированияНадписи"" ||
	|                valueName == ""ПриАктивизации"" ||
	|                valueName == ""ПриАктивизацииЭлемента"" ||
	|                valueName == ""ПриВходе"" ||
	|                valueName == ""ПриВыпадении"" ||
	|                valueName == ""ПриДеактивации"" ||
	|                valueName == ""ПриЗагрузке"" ||
	|                valueName == ""ПриЗадержкеМыши"" ||
	|                valueName == ""ПриЗакрытии"" ||
	|                valueName == ""ПриИзменении"" ||
	|                valueName == ""ПриНажатииКнопки"" ||
	|                valueName == ""ПриНажатииКнопкиМыши"" ||
	|                valueName == ""ПриОтпусканииМыши"" ||
	|                valueName == ""ПриПереименовании"" ||
	|                valueName == ""ПриПеремещении"" ||
	|                valueName == ""ПриПеремещенииМыши"" ||
	|                valueName == ""ПриПерерисовке"" ||
	|                valueName == ""ПриПотереФокуса"" ||
	|                valueName == ""ПриПрокручивании"" ||
	|                valueName == ""ПриСоздании"" ||
	|                valueName == ""ПриСрабатыванииТаймера"" ||
	|                valueName == ""ПриУдалении"" ||
	|                valueName == ""ПриУходе"" ||
	|                valueName == ""РазмерИзменен"" ||
	|                valueName == ""СсылкаНажата"" ||
	|                valueName == ""ТекстИзменен"" ||
	|                valueName == ""ТекущаяЯчейкаИзменена"" ||
	|                valueName == ""ЭлементДобавлен"" ||
	|                valueName == ""ЭлементПомечен"" ||
	|                valueName == ""ЭлементУдален"")
	|            {
	|                string strNameProc = compValue.Replace(""("", """").Replace("")"", """");
	|                string strProc = @""Процедура "" + strNameProc + @""() Экспорт
	|    Сообщить("" + ""\u0022"" + strNameProc + ""()\u0022"" + @"");
	|КонецПроцедуры
	|"";
	|                if (OneScriptFormsDesigner.ParseBetween(Template1, null, strProc) == null)
	|                {
	|                    Template1 = Template1.Replace(""Процедура ПодготовкаКомпонентов()"", strProc + Environment.NewLine + ""Процедура ПодготовкаКомпонентов()"");
	|                }
	|                strNameProc = ""Ф.Действие(ЭтотОбъект, \u0022"" + strNameProc + ""\u0022);"";
	|                AddToScript(compName + ""."" + valueName + "" = "" + strNameProc);
	|                return;
	|            }
	|            // Если это Строка.
	|            if (valueName == ""ВыбранныйПуть"" ||
	|                valueName == ""Заголовок"" ||
	|                valueName == ""ИмяСтиля"" ||
	|                valueName == ""ИмяФайла"" ||
	|                valueName == ""НачальныйКаталог"" ||
	|                valueName == ""Описание"" ||
	|                valueName == ""ПолныйПуть"" ||
	|                valueName == ""ПользовательскийФормат"" ||
	|                valueName == ""Путь"" ||
	|                valueName == ""РазделительПути"" ||
	|                valueName == ""РасширениеПоУмолчанию"" ||
	|                valueName == ""СимволПароля"" ||
	|                valueName == ""Текст"" ||
	|                valueName == ""ТекстЗаголовка"" ||
	|                valueName == ""ТекстПодсказки"" ||
	|                valueName == ""Фильтр"")
	|            {
	|                compValue = compValue.Replace(Environment.NewLine, ""\u0022 + Ф.Окружение().НоваяСтрока + \u0022"");
	|                AddToScript(compName + ""."" + valueName + "" = \u0022"" + compValue + ""\u0022;"");
	|                return;
	|            }
	|            // Если это Число.
	|            if (valueName == ""АвтоЗадержка"" ||
	|                valueName == ""АвтоЗадержкаПоказа"" ||
	|                valueName == ""БольшоеИзменение"" ||
	|                valueName == ""ВысотаЭлемента"" ||
	|                valueName == ""ГоризонтальнаяМера"" ||
	|                valueName == ""ЗадержкаОчередногоПоказа"" ||
	|                valueName == ""ЗадержкаПоявления"" ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.HProgressBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.VProgressBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.HScrollBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.VScrollBar)) ||
	|                (valueName == ""Значение"" && val.GetType() == typeof(osfDesigner.NumericUpDown)) ||
	|                (valueName == ""Индекс"" && val.GetType() != typeof(osfDesigner.MyTreeNode)) ||
	|                valueName == ""ИндексВыбранногоИзображения"" ||
	|                valueName == ""ИндексИзображения"" ||
	|                valueName == ""ИндексФильтра"" ||
	|                valueName == ""Интервал"" ||
	|                valueName == ""МаксимальнаяДлина"" ||
	|                valueName == ""Максимум"" ||
	|                valueName == ""МаксимумВыбранных"" ||
	|                valueName == ""МаксимумЭлементов"" ||
	|                valueName == ""МалоеИзменение"" ||
	|                valueName == ""Масштаб"" ||
	|                valueName == ""МинимальнаяШирина"" ||
	|                valueName == ""МинимальноеРасстояние"" ||
	|                (valueName == ""МинимальныйРазмер"" && compName.Contains(""Splitter"")) ||
	|                valueName == ""Минимум"" ||
	|                valueName == ""Отступ"" ||
	|                valueName == ""ОтступМаркера"" ||
	|                valueName == ""ПорядокОбхода"" ||
	|                valueName == ""ПорядокСлияния"" ||
	|                valueName == ""ПравоеОграничение"" ||
	|                valueName == ""ПредпочтительнаяВысотаСтрок"" ||
	|                valueName == ""ПредпочтительнаяШиринаСтолбцов"" ||
	|                valueName == ""Разрядность"" ||
	|                valueName == ""Увеличение"" ||
	|                valueName == ""Ширина"" ||
	|                valueName == ""ШиринаВыпадающегоСписка"" ||
	|                valueName == ""ШиринаЗаголовковСтрок"" ||
	|                valueName == ""ШиринаКолонки"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + compValue.Replace("","", ""."") + "";"");
	|                return;
	|            }
	|            // Если это Размер.
	|            if (valueName == ""МаксимальныйРазмер"" ||
	|                valueName == ""МинимальныйРазмер"" ||
	|                valueName == ""Размер"" ||
	|                valueName == ""РазмерИзображения"" ||
	|                valueName == ""РазмерКнопки"" ||
	|                valueName == ""РазмерПоляАвтоПрокрутки"" ||
	|                valueName == ""РазмерЭлемента"")
	|            {
	|                if (compName.Contains(""Календарь"") ||
	|                    compName.Contains(""Вкладка""))
	|                {
	|                    return;
	|                }
	|                string str1 = compValue.Replace(""{Ширина="", """");
	|                str1 = str1.Replace(""Высота="", """");
	|                str1 = str1.Replace(""}"", """");
	|                string[] separators = new string[] { "", "" };
	|                string[] result = str1.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                str1 = ""Ф.Размер("" + result[0] + "", "" + result[1] + "");"";
	|                AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                return;
	|            }
	|            // Если это Точка.
	|            if (valueName == ""Положение"")
	|            {
	|                if (val.GetType() == typeof(Form))
	|                {
	|                    if (((Form)val).StartPosition == FormStartPosition.Вручную)
	|                    {
	|                        string str1 = compValue.Replace(""{Икс="", """");
	|                        str1 = str1.Replace(""Игрек="", """");
	|                        str1 = str1.Replace(""}"", """");
	|                        string[] separators = new string[] { "", "" };
	|                        string[] result = str1.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                        str1 = ""Ф.Точка("" + result[0] + "", "" + result[1] + "");"";
	|                        AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                    }
	|                }
	|                else
	|                {
	|                    string str1 = compValue.Replace(""{Икс="", """");
	|                    str1 = str1.Replace(""Игрек="", """");
	|                    str1 = str1.Replace(""}"", """");
	|                    string[] separators = new string[] { "", "" };
	|                    string[] result = str1.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                    str1 = ""Ф.Точка("" + result[0] + "", "" + result[1] + "");"";
	|                    AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                }
	|                return;
	|            }
	|            // Если это перечисление.
	|            if (valueName == ""ТипСлияния"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СлияниеМеню."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""АвтоРазмер"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.АвтоРазмерПанелиСтрокиСостояния."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Якорь"")
	|            {
	|                string str1 = """";
	|                string[] separators = new string[] { "", "" };
	|                string[] result = compValue.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    str1 = str1 + ""Ф.СтилиПривязки."" + result[i] + "" + "";
	|                }
	|                str1 = str1 + "";"";
	|                str1 = str1.Replace("" + ;"", "";"");
	|                AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                return;
	|            }
	|            if (valueName == ""НачальноеПоложение"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.НачальноеПоложениеФормы."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Формат"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ФорматПоляКалендаря."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Курсор"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.Курсоры()."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ГлубинаЦвета"" || valueName == ""СочетаниеКлавиш"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф."" + valueName + ""."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Стиль"")
	|            {
	|                AddToScript(compName + "".Стиль = Ф.СтильКнопокПанелиИнструментов."" + compValue + "";"");
	|                return;
	|            }
	|            if ((valueName == ""Оформление"" && (val.GetType() == typeof(osfDesigner.RadioButton) || val.GetType() == typeof(osfDesigner.CheckBox))) ||
	|                valueName == ""ПлоскийСтиль"" ||
	|                valueName == ""ПоведениеСсылки"" ||
	|                valueName == ""ПолосыПрокрутки"" ||
	|                valueName == ""РегистрСимволов"" ||
	|                valueName == ""РежимВыбора"" ||
	|                valueName == ""РежимОтображения"" ||
	|                valueName == ""РежимРисования"" ||
	|                valueName == ""РезультатДиалога"" ||
	|                valueName == ""СортировкаСвойств"" ||
	|                valueName == ""СостояниеФлажка"" ||
	|                valueName == ""СтильГраницыФормы"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф."" + valueName + ""."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""СтильГраницы"")
	|            {
	|                if (val.GetType() == typeof(osfDesigner.StatusBarPanel))
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильГраницыПанелиСтрокиСостояния."" + compValue + "";"");
	|                }
	|                else
	|                {
	|                    AddToScript(compName + ""."" + valueName + "" = "" + ""Ф."" + valueName + ""."" + compValue + "";"");
	|                }
	|                return;
	|            }
	|            if (valueName == ""Сортировка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ПорядокСортировки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""СтильЗаголовка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильЗаголовкаКолонки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Активация"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.АктивацияЭлемента."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""РазмещениеФоновогоИзображения"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.РазмещениеИзображения."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеПриРаскрытии"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ЛевоеПравоеВыравнивание."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""СтильВыпадающегоСписка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильПоляВыбора."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеПометки"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеСодержимого."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""РежимМасштабирования"" && val.GetType() == typeof(osfDesigner.PictureBox))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.РежимРазмераПоляКартинки."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""РежимМасштабирования"" && val.GetType() == typeof(osfDesigner.TabControl))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.РежимРазмераВкладок."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Оформление"" && val.GetType() == typeof(osfDesigner.ToolBar))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ОформлениеПанелиИнструментов."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Выравнивание"" && val.GetType() == typeof(osfDesigner.TabControl))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеВкладок."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Выравнивание"" && val.GetType() == typeof(osfDesigner.ListView))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеВСпискеЭлементов."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Выравнивание"" && (val.GetType() == typeof(osfDesigner.DataGridBoolColumn) ||
	|                val.GetType() == typeof(osfDesigner.DataGridTextBoxColumn) ||
	|                val.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle)))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ГоризонтальноеВыравнивание."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ФильтрУведомлений"")
	|            {
	|                string str1 = """";
	|                string[] separators = new string[] { "", "" };
	|                string[] result = compValue.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i = 0; i < result.Length; i++)
	|                {
	|                    str1 = str1 + ""Ф.ФильтрыУведомления."" + result[i] + "" + "";
	|                }
	|                str1 = str1 + "";"";
	|                str1 = str1.Replace("" + ;"", "";"");
	|                AddToScript(compName + ""."" + valueName + "" = "" + str1);
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеТекста"" && val.GetType() == typeof(osfDesigner.ColumnHeader))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ГоризонтальноеВыравнивание."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ВыравниваниеТекста"" && val.GetType() == typeof(osfDesigner.ToolBar))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеТекстаВПанелиИнструментов."" + compValue + "";"");
	|                return;
	|            }
	|            if ((valueName == ""ВыравниваниеИзображения"" ||
	|                valueName == ""ВыравниваниеТекста""
	|                ) && (
	|                val.GetType() == typeof(osfDesigner.Button) ||
	|                val.GetType() == typeof(osfDesigner.RadioButton) ||
	|                val.GetType() == typeof(osfDesigner.CheckBox) ||
	|                val.GetType() == typeof(osfDesigner.Label)))
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ВыравниваниеСодержимого."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""ПервыйДеньНедели"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.День."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""КорневойКаталог"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.ОсобаяПапка."" + compValue + "";"");
	|                return;
	|            }
	|            if (valueName == ""Стыковка"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.СтильСтыковки."" + compValue + "";"");
	|                AddToScript(compName + "".НаПереднийПлан();"");
	|                return;
	|            }
	|            if (valueName == ""Значок"")
	|            {
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Ф.Значок(\u0022"" + compValue + ""\u0022);"");
	|                return;
	|            }
	|            if (valueName == ""МаксимальнаяДата"" ||
	|                valueName == ""МинимальнаяДата"" ||
	|                valueName == ""ТекущаяДата"")
	|            {
	|                DateTime DateTime1 = System.DateTime.Parse(compValue);
	|                AddToScript(compName + ""."" + valueName + "" = "" + ""Дата("" +
	|                    DateTime1.ToString(""yyyy"") + "", "" +
	|                    DateTime1.ToString(""MM"") + "", "" +
	|                    DateTime1.ToString(""dd"") + "", "" +
	|                    DateTime1.ToString(""HH"") + "", "" +
	|                    DateTime1.ToString(""mm"") + "", "" +
	|                    DateTime1.ToString(""ss"") + "");"");
	|                return;
	|            }
	|        }
	|        
	|        private static void AddToScript(string str)
	|        {
	|            Template1 = Template1.Replace(""// блок КонецСвойства"", str + Environment.NewLine + ""    // блок КонецСвойства"");
	|        }
	|
	|        private static void GetNodes(osfDesigner.MyTreeNode treeNode)
	|        {
	|            osfDesigner.MyTreeNode MyTreeNode1;
	|            for (int i = 0; i < treeNode.Nodes.Count; i++)
	|            {
	|                MyTreeNode1 = (osfDesigner.MyTreeNode)treeNode.Nodes[i];
	|                AddToScript(MyTreeNode1.Name + "" = "" + treeNode.Name + "".Узлы.Добавить(\u0022"" + MyTreeNode1.Name + ""\u0022);"");
	|                PropComponent(MyTreeNode1);
	|                if (MyTreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes(MyTreeNode1);
	|                }
	|            }
	|        }
	|
	|        private static void GetNodes1(System.Windows.Forms.TreeView TreeView, ref ArrayList objArrayList2)
	|        {
	|            for (int i = 0; i < TreeView.Nodes.Count; i++)
	|            {
	|                System.Windows.Forms.TreeNode TreeNode1 = TreeView.Nodes[i];
	|                objArrayList2.Add(TreeNode1.Name);
	|                if (TreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes2(TreeNode1, ref objArrayList2);
	|                }
	|            }
	|        }
	|
	|        private static void GetNodes2(System.Windows.Forms.TreeNode treeNode, ref ArrayList objArrayList2)
	|        {
	|            for (int i = 0; i < treeNode.Nodes.Count; i++)
	|            {
	|                System.Windows.Forms.TreeNode TreeNode1 = treeNode.Nodes[i];
	|                objArrayList2.Add(TreeNode1.Name);
	|                if (TreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes2(TreeNode1, ref objArrayList2);
	|                }
	|            }
	|        }
	|
	|        private static void GetMenuItems(MenuItemEntry menuItem)
	|        {
	|            MenuItemEntry MenuItemEntry1;
	|            for (int i = 0; i < menuItem.MenuItems.Count; i++)
	|            {
	|                MenuItemEntry1 = OneScriptFormsDesigner.RevertSimilarObj(menuItem.MenuItems[i]);
	|                PropertyDescriptor pd = TypeDescriptor.GetProperties(MenuItemEntry1.Parent)[""Name""];
	|                string strParent = (string)pd.GetValue(MenuItemEntry1.Parent);
	|
	|                string strName = MenuItemEntry1.Name.Contains(""Сепаратор"") ? ""-"" : MenuItemEntry1.Text;
	|                AddToScript(MenuItemEntry1.Name + "" = "" + strParent + "".ЭлементыМеню.Добавить(Ф.ЭлементМеню(\u0022"" + strName + ""\u0022));"");
	|                PropComponent(MenuItemEntry1);
	|                if (MenuItemEntry1.MenuItems.Count > 0)
	|                {
	|                    GetMenuItems(MenuItemEntry1);
	|                }
	|            }
	|        }
	|
	|        private static void PropComponent(dynamic comp)
	|        {
	|            PropertyInfo[] myPropertyInfo = comp.GetType().GetProperties();
	|            for (int i = 0; i < myPropertyInfo.Length; i++)
	|            {
	|                string valueName = OneScriptFormsDesigner.GetDisplayName(comp, myPropertyInfo[i].Name);
	|                if (valueName != """" && !((valueName == ""(Name)"") || (valueName == ""Прямоугольник"")))
	|                {
	|                    PropertyDescriptor pd = TypeDescriptor.GetProperties(comp)[myPropertyInfo[i].Name];
	|                    try
	|                    {
	|                        string compValue = OneScriptFormsDesigner.ObjectConvertToString(pd.GetValue(comp));
	|                        if (comp.GetType() == typeof(osfDesigner.DataGridTableStyle) ||
	|                            comp.GetType() == typeof(osfDesigner.DataGridBoolColumn) ||
	|                            comp.GetType() == typeof(osfDesigner.DataGridTextBoxColumn) ||
	|                            comp.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle))
	|                        {
	|                            RequiredDefaultValuesValues(comp, comp.NameStyle, valueName, compValue);
	|                        }
	|                        else
	|                        {
	|                            RequiredDefaultValuesValues(comp, comp.Name, valueName, compValue);
	|                        }
	|                    }
	|                    catch { }
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\SaveScript.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|using System.Reflection;
	|using System.IO;
	|
	|namespace osfDesigner
	|{
	|    public class MyMenuItemsEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmMenuItems _frmMenuItems = new frmMenuItems(context, value);
	|                _frmMenuItems._wfes = wfes;
	|
	|                if (wfes.ShowDialog(_frmMenuItems) == System.Windows.Forms.DialogResult.OK)
	|                {
	|                }
	|            }
	|            return null;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    public class frmMenuItems : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label Label1;
	|        private System.Windows.Forms.Label Label2;
	|        private osfDesigner.MainMenu MainMenu1;
	|        public System.Windows.Forms.TreeView TreeView1;
	|        private System.Windows.Forms.Button ButtonAddRoot;
	|        private System.Windows.Forms.Button ButtonAddChild;
	|        private System.Windows.Forms.Button ButtonAddSeparator;
	|        private System.Windows.Forms.Button ButtonDelete;
	|
	|        private System.Windows.Forms.Button ButtonMoveUp;
	|        private System.Windows.Forms.Button ButtonMoveDown;
	|
	|        private System.Windows.Forms.Button ButtonCollapse;
	|        private System.Windows.Forms.Button ButtonExpand;
	|        private System.Windows.Forms.Button ButtonOK;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.Panel Panel1;
	|        private System.Windows.Forms.Panel Panel2;
	|        private System.Windows.Forms.Panel Panel3;
	|        private System.Windows.Forms.Panel Panel4;
	|        private System.Windows.Forms.Panel Panel5;
	|        private System.Windows.Forms.Panel Panel6;
	|        private System.Windows.Forms.Panel Panel7;
	|        private System.Windows.Forms.Panel Panel8;
	|        private System.Windows.Forms.Panel Panel9;
	|        private System.Windows.Forms.Panel Panel10;
	|        private System.Windows.Forms.Panel Panel11;
	|        private System.Windows.Forms.Panel Panel12;
	|        private System.Windows.Forms.Panel Panel13;
	|        private System.Windows.Forms.Panel Panel14;
	|        private Container components = null;
	|        private ITypeDescriptorContext _context;
	|        private object _value;
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmMenuItems(ITypeDescriptorContext context, object value)
	|        {
	|            _context = context;
	|            _value = value;
	|            MainMenu1 = (osfDesigner.MainMenu)_context.Instance;
	|            this.Size = new Size(864, 485);
	|            this.Text = ""Редактор коллекции ЭлементыМеню"";
	|            this.ControlBox = true;
	|            this.HelpButton = true;
	|            this.ShowIcon = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Sizable;
	|            this.SizeGripStyle = SizeGripStyle.Auto;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmMenuItems"";
	|            this.ShowInTaskbar = false;
	|            this.MinimumSize = new Size(797, 485);
	|            this.Closed += FrmMenuItems_Closed;
	|            this.Load += FrmMenuItems_Load;
	|            this.CenterToScreen();
	|
	|            // Правая панель с сеткой свойств PropertyGrid1, надписью Label2 и кнопками ButtonOK и ButtonCancel.
	|            Panel2 = new System.Windows.Forms.Panel();
	|            Panel2.Parent = this;
	|            Panel2.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Левая панель с деревом TreeView1, надписью Label1 и кнопками ButtonAddRoot, ButtonAddChild, ButtonAddSeparator, ButtonCollapse, ButtonExpand, ButtonMoveUp, ButtonMoveDown и ButtonDelete.
	|            Panel1 = new System.Windows.Forms.Panel();
	|            Panel1.Parent = this;
	|            Panel1.Dock = System.Windows.Forms.DockStyle.Left;
	|            Panel1.Width = 430;
	|
	|            // Панель с ButtonCollapse, ButtonExpand, ButtonMoveUp, ButtonMoveDown и ButtonDelete.
	|            Panel3 = new System.Windows.Forms.Panel();
	|            Panel3.Parent = Panel1;
	|            Panel3.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с Label1, TreeView1, ButtonAddRoot и ButtonAddChild, ButtonAddSeparator.
	|            Panel4 = new System.Windows.Forms.Panel();
	|            Panel4.Parent = Panel1;
	|            Panel4.Dock = System.Windows.Forms.DockStyle.Left;
	|            Panel4.Width = 353;
	|
	|            // Отступ слева от края формы.
	|            Panel5 = new System.Windows.Forms.Panel();
	|            Panel5.Parent = Panel1;
	|            Panel5.Dock = System.Windows.Forms.DockStyle.Left;
	|            Panel5.Width = 16;
	|
	|            // Панель с TreeView1.
	|            Panel6 = new System.Windows.Forms.Panel();
	|            Panel6.Parent = Panel4;
	|            Panel6.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с Label1.
	|            Panel7 = new System.Windows.Forms.Panel();
	|            Panel7.Parent = Panel4;
	|            Panel7.Dock = System.Windows.Forms.DockStyle.Top;
	|            Panel7.Height = 40;
	|
	|            // Панель с ButtonAddRoot и ButtonAddChild, ButtonAddSeparator.
	|            Panel8 = new System.Windows.Forms.Panel();
	|            Panel8.Parent = Panel4;
	|            Panel8.Dock = System.Windows.Forms.DockStyle.Bottom;
	|            Panel8.Height = 87;
	|
	|            // Панель с ButtonOK и ButtonCancel PropertyGrid1 Label2.
	|            Panel9 = new System.Windows.Forms.Panel();
	|            Panel9.Parent = Panel2;
	|            Panel9.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Отступ справа от края формы.
	|            Panel10 = new System.Windows.Forms.Panel();
	|            Panel10.Parent = Panel2;
	|            Panel10.Dock = System.Windows.Forms.DockStyle.Right;
	|            Panel10.Width = 16;
	|
	|            // Панель с PropertyGrid1.
	|            Panel12 = new System.Windows.Forms.Panel();
	|            Panel12.Parent = Panel9;
	|            Panel12.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с Label2.
	|            Panel11 = new System.Windows.Forms.Panel();
	|            Panel11.Parent = Panel9;
	|            Panel11.Dock = System.Windows.Forms.DockStyle.Top;
	|            Panel11.Height = 40;
	|
	|            // Панель с ButtonOK и ButtonCancel.
	|            Panel13 = new System.Windows.Forms.Panel();
	|            Panel13.Parent = Panel9;
	|            Panel13.Dock = System.Windows.Forms.DockStyle.Bottom;
	|            Panel13.Height = 53;
	|
	|            // Панель для выравнивания справа кнопок ButtonOK и ButtonCancel.
	|            Panel14 = new System.Windows.Forms.Panel();
	|            Panel14.Parent = Panel13;
	|            Panel14.Dock = System.Windows.Forms.DockStyle.Right;
	|            Panel14.Width = 234;
	|
	|            ButtonAddRoot = new System.Windows.Forms.Button();
	|            ButtonAddRoot.Parent = Panel8;
	|            ButtonAddRoot.Bounds = new Rectangle(1, 8, 112, 37);
	|            ButtonAddRoot.Text = ""Добавить меню"";
	|            ButtonAddRoot.Click += ButtonAddRoot_Click;
	|
	|            ButtonAddChild = new System.Windows.Forms.Button();
	|            ButtonAddChild.Parent = Panel8;
	|            ButtonAddChild.Bounds = new Rectangle(120, 8, 105, 37);
	|            ButtonAddChild.Text = ""Добавить подменю"";
	|            ButtonAddChild.Click += ButtonAddChild_Click;
	|
	|            ButtonAddSeparator = new System.Windows.Forms.Button();
	|            ButtonAddSeparator.Parent = Panel8;
	|            ButtonAddSeparator.Bounds = new Rectangle(233, 8, 120, 37);
	|            ButtonAddSeparator.Text = ""Добавить разделитель"";
	|            ButtonAddSeparator.Click += ButtonAddSeparator_Click;
	|
	|            Label1 = new System.Windows.Forms.Label();
	|            Label1.Parent = Panel7;
	|            Label1.Bounds = new Rectangle(1, 16, 276, 20);
	|            Label1.Text = ""Выберите меню для правки:"";
	|
	|            TreeView1 = MainMenu1.TreeView;
	|            TreeView1.Parent = Panel6;
	|            TreeView1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            TreeView1.HideSelection = false;
	|            TreeView1.AfterSelect += TreeView1_AfterSelect;
	|
	|            ButtonDelete = new System.Windows.Forms.Button();
	|            ButtonDelete.Parent = Panel3;
	|            ButtonDelete.Bounds = new Rectangle(10, 41, 35, 28);
	|            ButtonDelete.Text = """";
	|            ButtonDelete.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////5/x//+P8f//g+P//+HD///wh///+A////w////4D///4IP//4HB//+H8P//n/j/////////////"")));
	|            ButtonDelete.Enabled = false;
	|            ButtonDelete.Click += ButtonDelete_Click;
	|            System.Windows.Forms.ToolTip ToolTip1 = new System.Windows.Forms.ToolTip();
	|            ToolTip1.SetToolTip(ButtonDelete, ""Удалить"");
	|
	|            ButtonMoveUp = new System.Windows.Forms.Button();
	|            ButtonMoveUp.Parent = Panel3;
	|            ButtonMoveUp.Bounds = new Rectangle(10, 76, 35, 28);
	|            ButtonMoveUp.Text = """";
	|            ButtonMoveUp.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""AAABAAEAEBACAAEAAQCwAAAAFgAAACgAAAAQAAAAIAAAAAEAAQAAAAAAgAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8P////D////w////8P////D////w////8P///AAD//wAA//+AAf//wAP//+AH///wD///+B////w////+f///"")));
	|            ButtonMoveUp.Enabled = false;
	|            ButtonMoveUp.Click += ButtonMoveUp_Click;
	|            System.Windows.Forms.ToolTip ToolTip2 = new System.Windows.Forms.ToolTip();
	|            ToolTip2.SetToolTip(ButtonMoveUp, ""Переместить вверх"");
	|
	|            ButtonMoveDown = new System.Windows.Forms.Button();
	|            ButtonMoveDown.Parent = Panel3;
	|            ButtonMoveDown.Bounds = new Rectangle(10, 111, 35, 28);
	|            ButtonMoveDown.Text = """";
	|            ButtonMoveDown.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""AAABAAEAEBACAAEAAQCwAAAAFgAAACgAAAAQAAAAIAAAAAEAAQAAAAAAgAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+f////D////gf///wD///4Af//8AD//+AAf//AAD//wAA///8P////D////w////8P////D////w////8P///"")));
	|            ButtonMoveDown.Enabled = false;
	|            ButtonMoveDown.Click += ButtonMoveDown_Click;
	|            System.Windows.Forms.ToolTip ToolTip3 = new System.Windows.Forms.ToolTip();
	|            ToolTip3.SetToolTip(ButtonMoveDown, ""Переместить вниз"");
	|
	|            ButtonExpand = new System.Windows.Forms.Button();
	|            ButtonExpand.Parent = Panel3;
	|            ButtonExpand.Bounds = new Rectangle(10, 146, 35, 28);
	|            ButtonExpand.Text = """";
	|            ButtonExpand.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAonEzGyAAAAAXRSTlMAQObYZgAAADpJREFUeNpjZIAARob/MAac+o8kACH/w5lQZWARRiQ+WATBYUAxFEmAkaAAYTOwWovuMEynY3oOyfsAOL4KE5tREc4AAAAASUVORK5CYII="")));
	|            ButtonExpand.Enabled = false;
	|            ButtonExpand.Click += ButtonExpand_Click;
	|            System.Windows.Forms.ToolTip ToolTip4 = new System.Windows.Forms.ToolTip();
	|            ToolTip4.SetToolTip(ButtonExpand, ""Развернуть все"");
	|
	|            ButtonCollapse = new System.Windows.Forms.Button();
	|            ButtonCollapse.Parent = Panel3;
	|            ButtonCollapse.Bounds = new Rectangle(10, 181, 35, 28);
	|            ButtonCollapse.Text = """";
	|            ButtonCollapse.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAoLQ9TAAADAFBMVEUBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACnEzGyAAAAAXRSTlMAQObYZgAAADlJREFUeNpjZGBgYGSAgf9QDiOCD2UzwvkwSUYYH66aEcpHMpABlwAjQQHCZuCwFt1h6E5H9xyK9wE4vgoTXfUx9wAAAABJRU5ErkJggg=="")));
	|            ButtonCollapse.Enabled = false;
	|            ButtonCollapse.Click += ButtonCollapse_Click;
	|            System.Windows.Forms.ToolTip ToolTip5 = new System.Windows.Forms.ToolTip();
	|            ToolTip5.SetToolTip(ButtonCollapse, ""Свернуть все"");
	|
	|            ButtonOK = new System.Windows.Forms.Button();
	|            ButtonOK.Parent = Panel14;
	|            ButtonOK.Bounds = new Rectangle(132, 10, 100, 28);
	|            ButtonOK.Text = ""ОК"";
	|            ButtonOK.Click += ButtonOK_Click;
	|
	|            PropertyGrid1 = new System.Windows.Forms.PropertyGrid();
	|            PropertyGrid1.Parent = Panel12;
	|            PropertyGrid1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|
	|            Label2 = new System.Windows.Forms.Label();
	|            Label2.Parent = Panel11;
	|            Label2.Bounds = new Rectangle(1, 16, 68, 20);
	|            Label2.Text = ""&Свойства:"";
	|
	|            TopLevel = true;
	|        }
	|
	|        public string GetDefaultValues(MenuItemEntry comp)
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            string DefaultValues1 = """";
	|            PropertyGrid1.SelectedObject = comp;
	|            PropertyGrid1.Refresh();
	|            object view1 = PropertyGrid1.GetType().GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(PropertyGrid1);
	|            GridItemCollection GridItemCollection1 = (GridItemCollection)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            return DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        public void BypassMainMenuForDelete(Menu Menu1, Menu MenuForDelete, System.Windows.Forms.TreeNode NodeForDelete)
	|        {
	|            for (int i = 0; i < Menu1.MenuItems.Count; i++)
	|            {
	|                Menu CurrentMenuItem1 = (Menu)Menu1.MenuItems[i];
	|                if (CurrentMenuItem1.Equals(MenuForDelete))
	|                {
	|                    ((System.Windows.Forms.Menu.MenuItemCollection)Menu1.MenuItems).Remove((System.Windows.Forms.MenuItem)MenuForDelete);
	|                    NodeForDelete.Parent.Nodes.Remove(NodeForDelete);
	|                    break;
	|                }
	|                if (CurrentMenuItem1.MenuItems.Count > 0)
	|                {
	|                    BypassMainMenuForDelete(CurrentMenuItem1, MenuForDelete, NodeForDelete);
	|                }
	|            }
	|        }
	|
	|        private void ButtonDelete_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.TreeNode DeletedTreeNode = TreeView1.SelectedNode;
	|            MenuItemEntry CurrentMenuItem1 = (MenuItemEntry)DeletedTreeNode.Tag;
	|            Menu CurrentMenuItem1Parent = CurrentMenuItem1.Parent;
	|            CurrentMenuItem1Parent.MenuItems.Remove(CurrentMenuItem1.M_MenuItem);
	|
	|            try
	|            {
	|                DeletedTreeNode.Parent.Nodes.Remove(DeletedTreeNode);
	|            }
	|            catch
	|            {
	|                TreeView1.Nodes.Remove(DeletedTreeNode);
	|            }
	|
	|            UpdateButtonsState();
	|        }
	|
	|        private void ButtonMoveDown_Click(object sender, EventArgs e)
	|        {
	|            TreeNode TreeNode1 = TreeView1.SelectedNode;
	|            MenuItemEntry MenuItem1 = (MenuItemEntry)TreeNode1.Tag;
	|            int Index1 = TreeNode1.Index;
	|            if (TreeNode1.Parent != null)
	|            {
	|                TreeNode Parent = TreeNode1.Parent;
	|                int Count1 = Parent.Nodes.Count;
	|                Parent.Nodes.Remove(TreeNode1);
	|                MenuItemEntry MenuItem1Parent = (MenuItemEntry)Parent.Tag;
	|                MenuItem1Parent.MenuItems.Remove(MenuItem1.M_MenuItem);
	|                if (Index1 == Count1 - 1)
	|                {
	|                    if (Parent.Parent != null)
	|                    {
	|                        TreeNode Parent2 = Parent.Parent;
	|                        Parent2.Nodes.Insert(Parent.Index + 1, TreeNode1);
	|                        MenuItemEntry MenuItem1Parent2 = (MenuItemEntry)Parent2.Tag;
	|                        MenuItem1Parent2.MenuItems.Add(Parent.Index + 1, MenuItem1.M_MenuItem);
	|                    }
	|                    else
	|                    {
	|                        TreeView1.Nodes.Insert(Parent.Index + 1, TreeNode1);
	|                        MainMenu1.MenuItems.Add(Parent.Index + 1, MenuItem1.M_MenuItem);
	|                    }
	|                }
	|                else
	|                {
	|                    TreeNode Next = Parent.Nodes[Index1];
	|                    Next.Nodes.Insert(0, TreeNode1);
	|                    MenuItemEntry MenuItem1Next = (MenuItemEntry)Next.Tag;
	|                    MenuItem1Next.MenuItems.Add(0, MenuItem1.M_MenuItem);
	|                }
	|            }
	|            else
	|            {
	|                TreeView1.Nodes.Remove(TreeNode1);
	|                MainMenu1.MenuItems.Remove(MenuItem1.M_MenuItem);
	|                TreeNode Next = TreeView1.Nodes[Index1];
	|                Next.Nodes.Insert(0, TreeNode1);
	|                MenuItemEntry MenuItem1Next = (MenuItemEntry)Next.Tag;
	|                MenuItem1Next.MenuItems.Add(0, MenuItem1.M_MenuItem);
	|            }
	|            TreeView1.SelectedNode = TreeNode1;
	|        }
	|
	|        private void ButtonMoveUp_Click(object sender, EventArgs e)
	|        {
	|            TreeNode TreeNode1 = TreeView1.SelectedNode;
	|            MenuItemEntry MenuItem1 = (MenuItemEntry)TreeNode1.Tag;
	|            int Index1 = TreeNode1.Index;
	|            if (TreeNode1.Parent != null)
	|            {
	|                TreeNode Parent = TreeNode1.Parent;
	|                Parent.Nodes.Remove(TreeNode1);
	|                MenuItemEntry MenuItem1Parent = (MenuItemEntry)Parent.Tag;
	|                MenuItem1Parent.MenuItems.Remove(MenuItem1.M_MenuItem);
	|                if (Index1 > 0)
	|                {
	|                    TreeNode Previos = Parent.Nodes[Index1 - 1];
	|                    Previos.Nodes.Add(TreeNode1);
	|                    MenuItemEntry MenuItem1Previos = (MenuItemEntry)Previos.Tag;
	|                    MenuItem1Previos.MenuItems.Add(MenuItem1.M_MenuItem);
	|                }
	|                else
	|                {
	|                    if (Parent.Parent != null)
	|                    {
	|                        TreeNode Parent2 = Parent.Parent;
	|                        Parent2.Nodes.Insert(Parent.Index, TreeNode1);
	|                        MenuItemEntry MenuItem1Parent2 = (MenuItemEntry)Parent2.Tag;
	|                        MenuItem1Parent2.MenuItems.Add(Parent.Index - 1, MenuItem1.M_MenuItem);
	|                    }
	|                    else
	|                    {
	|                        TreeView1.Nodes.Insert(Parent.Index, TreeNode1);
	|                        MainMenu1.MenuItems.Add(Parent.Index - 1, MenuItem1.M_MenuItem);
	|                    }
	|                }
	|            }
	|            else
	|            {
	|                TreeView1.Nodes.Remove(TreeNode1);
	|                MainMenu1.MenuItems.Remove(MenuItem1.M_MenuItem);
	|                TreeNode Previos = TreeView1.Nodes[Index1 - 1];
	|                Previos.Nodes.Add(TreeNode1);
	|                MenuItemEntry MenuItem1Previos = (MenuItemEntry)Previos.Tag;
	|                MenuItem1Previos.MenuItems.Add(MenuItem1.M_MenuItem);
	|            }
	|            TreeView1.SelectedNode = TreeNode1;
	|        }
	|
	|        private void ButtonCollapse_Click(object sender, EventArgs e)
	|        {
	|            TreeView1.CollapseAll();
	|            UpdateButtonsState();
	|            TreeView1.SelectedNode = TreeView1.Nodes[0];
	|        }
	|
	|        private void ButtonExpand_Click(object sender, EventArgs e)
	|        {
	|            TreeView1.ExpandAll();
	|            UpdateButtonsState();
	|            TreeView1.SelectedNode = TreeView1.Nodes[0];
	|        }
	|
	|        private void PropertyGrid1_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
	|        {
	|            MenuItemEntry MenuItemEntry1 = (MenuItemEntry)((System.Windows.Forms.PropertyGrid)s).SelectedObject;
	|            if (e.ChangedItem.Label == ""Текст"")
	|            {
	|                TreeView1.SelectedNode.Text = MenuItemEntry1.Text;
	|            }
	|            if (e.ChangedItem.Label == ""Помечен"")
	|            {
	|                if (e.ChangedItem.Value.ToString() == ""True"")
	|                {
	|                    if (MenuItemEntry1.Parent.GetType() == typeof(osfDesigner.MainMenu) || MenuItemEntry1.M_MenuItem.IsParent)
	|                    {
	|                        System.Windows.Forms.MessageBox.Show(""Значение Истина допустимо только для элемента меню, не имеющего дочерних элементов и не принадлежащего к верхнему уровню."");
	|                        PropertyDescriptor pd = TypeDescriptor.GetProperties(MenuItemEntry1)[""Checked""];
	|                        pd.SetValue(MenuItemEntry1, (bool)e.OldValue);
	|                    }
	|                }
	|            }
	|        }
	|
	|        private void TreeView1_AfterSelect(object sender, TreeViewEventArgs e)
	|        {
	|            MenuItemEntry CurrentMenuItem1 = (MenuItemEntry)e.Node.Tag;
	|            if (e.Node.Text.Contains(""Сепаратор""))
	|            {
	|                CurrentMenuItem1.Hide = ""Скрыть"";
	|            }
	|            else
	|            {
	|                CurrentMenuItem1.Hide = ""Показать"";
	|            }
	|            UpdateButtonsState();
	|            PropertyGrid1.SelectedObject = e.Node.Tag;
	|        }
	|
	|        private void FrmMenuItems_Load(object sender, EventArgs e)
	|        {
	|            UpdateButtonsState();
	|        }
	|
	|        private void ButtonOK_Click(object sender, EventArgs e)
	|        {
	|            this.Close();
	|        }
	|
	|        private void ButtonAddRoot_Click(object sender, EventArgs e)
	|        {
	|            MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|            MenuItemEntry1.Text = OneScriptFormsDesigner.RevertMenuName(MainMenu1);
	|            MenuItemEntry1.Name = MenuItemEntry1.Text;
	|            MainMenu1.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|            OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|            System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|            TreeNode1.Tag = MenuItemEntry1;
	|            TreeNode1.Text = MenuItemEntry1.Text;
	|            TreeView1.Nodes.Add(TreeNode1);
	|
	|            ButtonDelete.Enabled = true;
	|            ButtonExpand.Enabled = true;
	|            ButtonCollapse.Enabled = true;
	|            ButtonAddChild.Enabled = true;
	|            ButtonAddSeparator.Enabled = false;
	|            TreeView1.SelectedNode = TreeNode1;
	|            UpdateButtonsState();
	|            MenuItemEntry1.DefaultValues = GetDefaultValues(MenuItemEntry1);
	|            TreeView1.Focus();
	|        }
	|
	|        private void ButtonAddChild_Click(object sender, EventArgs e)
	|        {
	|            MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|            MenuItemEntry1.Text = OneScriptFormsDesigner.RevertMenuName(MainMenu1);
	|            MenuItemEntry1.Name = MenuItemEntry1.Text;
	|            MenuItemEntry MenuItemParent = (MenuItemEntry)TreeView1.SelectedNode.Tag;
	|            MenuItemParent.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|            OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|            System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|            TreeNode1.Tag = MenuItemEntry1;
	|            TreeNode1.Text = MenuItemEntry1.Text;
	|            TreeView1.SelectedNode.Nodes.Add(TreeNode1);
	|
	|            // Свойство Checked у родителя нужно установить в false.
	|            if (MenuItemEntry1.Parent.GetType() != typeof(osfDesigner.MainMenu))
	|            {
	|                ((MenuItem)MenuItemEntry1.Parent).Checked = false;
	|            }
	|
	|            TreeView1.SelectedNode.Expand();
	|            UpdateButtonsState();
	|            MenuItemEntry1.Hide = ""Показать"";
	|            MenuItemEntry1.DefaultValues = GetDefaultValues(MenuItemEntry1);
	|            MenuItemEntry1.Hide = ""Скрыть"";
	|            PropertyGrid1.SelectedObject = TreeView1.SelectedNode.Tag;
	|            TreeView1.Focus();
	|        }
	|
	|        private void ButtonAddSeparator_Click(object sender, EventArgs e)
	|        {
	|            MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|            MenuItemEntry1.Name = OneScriptFormsDesigner.RevertSeparatorName(MainMenu1);
	|
	|            // Имя в виде тире не присваивать, заменять на тире только во время формирования сценария.
	|
	|            MenuItemEntry1.Text = MenuItemEntry1.Name;
	|            MenuItemEntry MenuItemParent = (MenuItemEntry)TreeView1.SelectedNode.Tag;
	|            MenuItemParent.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|            OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|
	|            System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|            TreeNode1.Tag = MenuItemEntry1;
	|            TreeNode1.Text = MenuItemEntry1.Name;
	|            TreeView1.SelectedNode.Nodes.Add(TreeNode1);
	|
	|            // Свойство Checked у родителя нужно установить в false.
	|            if (MenuItemEntry1.Parent.GetType() != typeof(osfDesigner.MainMenu))
	|            {
	|                ((MenuItem)MenuItemEntry1.Parent).Checked = false;
	|            }
	|
	|            TreeView1.SelectedNode.Expand();
	|            UpdateButtonsState();
	|            MenuItemEntry1.DefaultValues = GetDefaultValues(MenuItemEntry1);
	|            PropertyGrid1.SelectedObject = TreeView1.SelectedNode.Tag;
	|            TreeView1.Focus();
	|        }
	|
	|        public void UpdateButtonsState()
	|        {
	|            if (TreeView1.Nodes.Count > 0)
	|            {
	|                ButtonDelete.Enabled = true;
	|                ButtonExpand.Enabled = true;
	|                ButtonCollapse.Enabled = true;
	|                ButtonAddChild.Enabled = true;
	|            }
	|            else
	|            {
	|                ButtonDelete.Enabled = false;
	|                ButtonExpand.Enabled = false;
	|                ButtonCollapse.Enabled = false;
	|                ButtonAddChild.Enabled = false;
	|                ButtonAddSeparator.Enabled = false;
	|            }
	|            try
	|            {
	|                if (TreeView1.SelectedNode.Text.Contains(""Сепаратор""))
	|                {
	|                    ButtonAddSeparator.Enabled = false;
	|                    ButtonAddChild.Enabled = false;
	|                }
	|                else
	|                {
	|                    ButtonAddSeparator.Enabled = true;
	|                }
	|            }
	|            catch { }
	|
	|            try
	|            {
	|                if (TreeView1.SelectedNode.Index == 0 && TreeView1.SelectedNode.Parent == null)
	|                {
	|                    if (TreeView1.Nodes.Count > 1)
	|                    {
	|                        ButtonMoveDown.Enabled = true;
	|                        ButtonMoveUp.Enabled = false;
	|                    }
	|                    else
	|                    {
	|                        ButtonMoveDown.Enabled = false;
	|                        ButtonMoveUp.Enabled = false;
	|                    }
	|                }
	|                else if (TreeView1.SelectedNode.Index == (TreeView1.Nodes.Count - 1) && TreeView1.SelectedNode.Parent == null)
	|                {
	|                    if (TreeView1.Nodes.Count > 1)
	|                    {
	|                        ButtonMoveDown.Enabled = false;
	|                        ButtonMoveUp.Enabled = true;
	|                    }
	|                    else
	|                    {
	|                        ButtonMoveDown.Enabled = false;
	|                        ButtonMoveUp.Enabled = false;
	|                    }
	|                }
	|                else
	|                {
	|                    ButtonMoveDown.Enabled = true;
	|                    ButtonMoveUp.Enabled = true;
	|                }
	|            }
	|            catch { }
	|        }
	|
	|        private void FrmMenuItems_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyMenuItemsEditor.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MenuItemEntry : FilterablePropertyBase
	|    {
	|        public System.Windows.Forms.MenuItem M_MenuItem;
	|
	|        public MenuItemEntry()
	|        {
	|            M_MenuItem = new System.Windows.Forms.MenuItem();
	|            Hide = ""Скрыть"";
	|        }
	|
	|        [Browsable(false)]
	|        public string Hide { get; set; }
	|
	|        [DisplayName(""Доступность"")]
	|        [Description(""Возвращает или задает значение, указывающее, доступен ли элемент меню."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public bool Enabled
	|        {
	|            get { return M_MenuItem.Enabled; }
	|            set { M_MenuItem.Enabled = value; }
	|        }
	|
	|        [Browsable(false)]
	|        public System.Windows.Forms.Menu.MenuItemCollection MenuItems
	|        {
	|            get { return M_MenuItem.MenuItems; }
	|        }
	|
	|        [Browsable(false)]
	|        public System.Windows.Forms.Menu Parent
	|        {
	|            get { return M_MenuItem.Parent; }
	|        }
	|
	|        [DisplayName(""Нажатие"")]
	|        [Description(""Возвращает или задает код для выполнения, когда элемент меню нажат или выбран с помощью сочетания клавиш или ключа доступа, определенного для пункта меню."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public string Click { get; set; }
	|
	|        [DisplayName(""Отображать"")]
	|        [Description(""Возвращает или задает значение, указывающее, является ли пункт меню видимым."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public bool Visible
	|        {
	|            get { return M_MenuItem.Visible; }
	|            set { M_MenuItem.Visible = value; }
	|        }
	|
	|        [DisplayName(""Переключатель"")]
	|        [Description(""Возвращает или задает значение, указывающее, отображается ли в элементе меню переключатель вместо флажка."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public bool RadioCheck
	|        {
	|            get { return M_MenuItem.RadioCheck; }
	|            set { M_MenuItem.RadioCheck = value; }
	|        }
	|
	|        [DisplayName(""Помечен"")]
	|        [Description(""Возвращает или задает значение, указывающее, что установлен флажок рядом с текстом пункта меню."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public bool Checked
	|        {
	|            get { return M_MenuItem.Checked; }
	|            set { M_MenuItem.Checked = value; }
	|        }
	|
	|        [DisplayName(""ПорядокСлияния"")]
	|        [Description(""Возвращает или задает значение, указывающее относительное положение элемента меню при его слиянии с другим."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public int MergeOrder
	|        {
	|            get { return M_MenuItem.MergeOrder; }
	|            set { M_MenuItem.MergeOrder = value; }
	|        }
	|
	|        [DisplayName(""СочетаниеКлавиш"")]
	|        [Description(""Возвращает или задает значение, указывающее комбинацию клавиш связанных с пунктом меню."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public Shortcut Shortcut
	|        {
	|            get { return (Shortcut)(int)M_MenuItem.Shortcut; }
	|            set { M_MenuItem.Shortcut = (System.Windows.Forms.Shortcut)value; }
	|        }
	|
	|        [DisplayName(""Текст"")]
	|        [Description(""Возвращает или задает значение, указывающее заголовок пункта меню."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public string Text
	|        {
	|            get { return M_MenuItem.Text; }
	|            set { M_MenuItem.Text = value; }
	|        }
	|
	|        [DisplayName(""ТипСлияния"")]
	|        [Description(""Возвращает или задает значение, указывающее поведение данного элемента меню при слиянии его меню с другим меню."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [DynamicPropertyFilter(""Hide"", ""Показать"")]
	|        public osfDesigner.MenuMerge MergeType
	|        {
	|            get { return (osfDesigner.MenuMerge)(int)M_MenuItem.MergeType; }
	|            set { M_MenuItem.MergeType = (System.Windows.Forms.MenuMerge)value; }
	|        }
	|
	|        [DisplayName(""(Name)"")]
	|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
	|        [Category(""Разработка"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public string Name
	|        {
	|            get { return M_MenuItem.Name; }
	|            set { M_MenuItem.Name = value; }
	|        }
	|
	|        [Browsable(false)]
	|        public string DefaultValues { get; set; }
	|
	|        [Browsable(false)]
	|        public string RequiredValues
	|        {
	|            get
	|            {
	|                return @"""";
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MenuItemEntry.cs");
	
	СтрВыгрузки = 
	"using System.Windows.Forms;
	|
	|public static class ExtensionMethods
	|{
	|    public static void EnableContextMenu(this RichTextBox rtb)
	|    {
	|        if (rtb.ContextMenuStrip == null)
	|        {
	|            // Создайте контекстное меню без значков.
	|            ContextMenuStrip cms = new ContextMenuStrip();
	|            cms.ShowImageMargin = false;
	|
	|            // 1. Добавьте опцию отмены.
	|            ToolStripMenuItem tsmiUndo = new ToolStripMenuItem(""Отменить"");
	|            tsmiUndo.Click += (sender, e) => rtb.Undo();
	|            cms.Items.Add(tsmiUndo);
	|
	|            // 2. Добавьте опцию Повтора.
	|            ToolStripMenuItem tsmiRedo = new ToolStripMenuItem(""Вернуть"");
	|            tsmiRedo.Click += (sender, e) => rtb.Redo();
	|            cms.Items.Add(tsmiRedo);
	|
	|            // Добавьте разделитель.
	|            cms.Items.Add(new ToolStripSeparator());
	|
	|            // 3. Добавьте опцию Вырезать (вырезает выделенный текст внутри поля richtextbox).
	|            ToolStripMenuItem tsmiCut = new ToolStripMenuItem(""Вырезать"");
	|            tsmiCut.Click += (sender, e) => rtb.Cut();
	|            cms.Items.Add(tsmiCut);
	|
	|            // 4. Добавьте опцию Копирования (копирует выделенный текст в поле richtextbox).
	|            ToolStripMenuItem tsmiCopy = new ToolStripMenuItem(""Копировать"");
	|            tsmiCopy.Click += (sender, e) => rtb.Copy();
	|            cms.Items.Add(tsmiCopy);
	|
	|            // 5. Добавьте опцию Вставки (добавляет текст из буфера обмена в поле richtextbox).
	|            ToolStripMenuItem tsmiPaste = new ToolStripMenuItem(""Вставить"");
	|            tsmiPaste.Click += (sender, e) => rtb.Paste();
	|            cms.Items.Add(tsmiPaste);
	|
	|            // 6. Добавьте опцию Удаления (удалите выделенный текст в поле richtextbox).
	|            ToolStripMenuItem tsmiDelete = new ToolStripMenuItem(""Удалить"");
	|            tsmiDelete.Click += (sender, e) => rtb.SelectedText = """";
	|            cms.Items.Add(tsmiDelete);
	|
	|            // Добавьте разделитель.
	|            cms.Items.Add(new ToolStripSeparator());
	|
	|            // 7. Добавьте опцию <Выбрать все> (выделяет весь текст внутри поля richtextbox).
	|            ToolStripMenuItem tsmiSelectAll = new ToolStripMenuItem(""Выбрать всё"");
	|            tsmiSelectAll.Click += (sender, e) => rtb.SelectAll();
	|            cms.Items.Add(tsmiSelectAll);
	|
	|            // При открытии меню проверьте, выполнено ли условие, чтобы включить действие.
	|            cms.Opening += (sender, e) =>
	|            {
	|                tsmiUndo.Enabled = !rtb.ReadOnly && rtb.CanUndo;
	|                tsmiRedo.Enabled = !rtb.ReadOnly && rtb.CanRedo;
	|                tsmiCut.Enabled = !rtb.ReadOnly && rtb.SelectionLength > 0;
	|                tsmiCopy.Enabled = rtb.SelectionLength > 0;
	|                tsmiPaste.Enabled = !rtb.ReadOnly && Clipboard.ContainsText();
	|                tsmiDelete.Enabled = !rtb.ReadOnly && rtb.SelectionLength > 0;
	|                tsmiSelectAll.Enabled = rtb.TextLength > 0 && rtb.SelectionLength < rtb.TextLength;
	|            };
	|
	|            rtb.ContextMenuStrip = cms;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\ExtensionMethods.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel;
	|using System.Windows.Forms.Design;
	|
	|namespace osfDesigner
	|{
	|    public class MyLinkAreaEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            System.Windows.Forms.LinkLabel LinkLabel1 = (System.Windows.Forms.LinkLabel)context.Instance;
	|
	|            IWindowsFormsEditorService wfes = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
	|
	|            if (wfes != null)
	|            {
	|                string text = string.Empty;
	|                PropertyDescriptor property = null;
	|
	|                if (LinkLabel1 != null)
	|                {
	|                    property = TypeDescriptor.GetProperties(LinkLabel1)[""Text""];
	|                    if (property.PropertyType == typeof(string))
	|                    {
	|                        text = (string)property.GetValue(LinkLabel1);
	|                    }
	|                }
	|
	|                string originalText = text;
	|                frmLinkArea frmLinkArea = new frmLinkArea(context, LinkLabel1);
	|                frmLinkArea._wfes = wfes;
	|                frmLinkArea.Start(value);
	|
	|                if (wfes.ShowDialog(frmLinkArea) == System.Windows.Forms.DialogResult.OK)
	|                {
	|                    value = frmLinkArea.Value;
	|                    text = frmLinkArea.SampleText;
	|                    if (!originalText.Equals(text) && property.PropertyType == typeof(string))
	|                    {
	|                        property.SetValue(LinkLabel1, text);
	|                    }
	|                }
	|
	|                frmLinkArea.End();
	|            }
	|
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    internal class frmLinkArea : System.Windows.Forms.Form
	|    {
	|        private dynamic _editor;
	|        private ITypeDescriptorContext _context;
	|        public IWindowsFormsEditorService _wfes;
	|        private Container components = null;
	|        private System.Windows.Forms.LinkLabel LinkLabel1;
	|        private System.Windows.Forms.Label Label1 = null;
	|        private System.Windows.Forms.TextBox TextBox1 = null;
	|        private System.Windows.Forms.Button OkButton1 = null;
	|        private System.Windows.Forms.Button CancelButton1 = null;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel;
	|
	|        public frmLinkArea(ITypeDescriptorContext context, System.Windows.Forms.LinkLabel linkLabel)
	|        {
	|            _context = context;
	|            LinkLabel1 = linkLabel;
	|            this.FormClosed += FrmLinkArea_FormClosed;
	|
	|            PropertyDescriptor pd = TypeDescriptor.GetProperties(LinkLabel1)[""LinkArea""];
	|            _editor = (dynamic)pd.GetEditor(typeof(UITypeEditor));
	|
	|            ComponentResourceManager resources = new ComponentResourceManager(_editor.GetType());
	|            Label1 = new System.Windows.Forms.Label();
	|            TextBox1 = new System.Windows.Forms.TextBox();
	|            OkButton1 = new System.Windows.Forms.Button();
	|            OkButton1.Click += OkButton1_Click;
	|            CancelButton1 = new System.Windows.Forms.Button();
	|            OkCancelTableLayoutPanel = new System.Windows.Forms.TableLayoutPanel();
	|            OkCancelTableLayoutPanel.SuspendLayout();
	|            this.SuspendLayout();
	|
	|            resources.ApplyResources(Label1, ""caption"");
	|            Label1.Margin = new System.Windows.Forms.Padding(3, 1, 3, 0);
	|            Label1.Text = ""Выберите часть текста для преобразования в ссылку:"";
	|
	|            resources.ApplyResources(TextBox1, ""sampleEdit"");
	|            TextBox1.Margin = new Padding(3, 2, 3, 3);
	|            TextBox1.HideSelection = false;
	|            TextBox1.ScrollBars = System.Windows.Forms.ScrollBars.Vertical;
	|            TextBox1.Multiline = true;
	|            TextBox1.Text = LinkLabel1.Text;
	|
	|            resources.ApplyResources(OkButton1, ""okButton"");
	|            OkButton1.DialogResult = System.Windows.Forms.DialogResult.OK;
	|            OkButton1.Margin = new System.Windows.Forms.Padding(0, 0, 2, 0);
	|            OkButton1.Text = ""ОК"";
	|
	|            resources.ApplyResources(CancelButton1, ""cancelButton"");
	|            CancelButton1.DialogResult = System.Windows.Forms.DialogResult.Cancel;
	|            CancelButton1.Margin = new System.Windows.Forms.Padding(3, 0, 0, 0);
	|            CancelButton1.Text = ""Отмена"";
	|
	|            resources.ApplyResources(OkCancelTableLayoutPanel, ""okCancelTableLayoutPanel"");
	|            OkCancelTableLayoutPanel.ColumnCount = 2;
	|            OkCancelTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(SizeType.Percent, 50F));
	|            OkCancelTableLayoutPanel.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(SizeType.Percent, 50F));
	|            OkCancelTableLayoutPanel.Controls.Add(OkButton1, 0, 0);
	|            OkCancelTableLayoutPanel.Controls.Add(CancelButton1, 1, 0);
	|            OkCancelTableLayoutPanel.Margin = new System.Windows.Forms.Padding(3, 1, 3, 3);
	|            OkCancelTableLayoutPanel.RowCount = 1;
	|            OkCancelTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
	|            OkCancelTableLayoutPanel.RowStyles.Add(new System.Windows.Forms.RowStyle());
	|
	|            resources.ApplyResources(this, ""$this"");
	|            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	|            this.CancelButton = CancelButton1;
	|            this.Controls.Add(OkCancelTableLayoutPanel);
	|            this.Controls.Add(TextBox1);
	|            this.Controls.Add(Label1);
	|            this.HelpButton = true;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.ShowIcon = false;
	|            this.ShowInTaskbar = false;
	|            this.OkCancelTableLayoutPanel.ResumeLayout(false);
	|            this.OkCancelTableLayoutPanel.PerformLayout();
	|            this.ResumeLayout(false);
	|            this.PerformLayout();
	|            this.Text = ""Редактор ОбластьСсылки"";
	|        }
	|
	|        public string SampleText
	|        {
	|            get { return TextBox1.Text; }
	|        }
	|
	|        public object Value { get; set; }
	|
	|        private void OkButton1_Click(object sender, EventArgs e)
	|        {
	|            Value = new LinkArea(TextBox1.SelectionStart, TextBox1.SelectionLength);
	|        }
	|
	|        public void Start(object value)
	|        {
	|            Value = value;
	|            UpdateSelection();
	|            ActiveControl = TextBox1;
	|        }
	|
	|        public void End()
	|        {
	|            Value = null;
	|        }
	|
	|        private void UpdateSelection()
	|        {
	|            if (Value.GetType() != typeof(LinkArea))
	|            {
	|                return;
	|            }
	|
	|            try
	|            {
	|                TextBox1.SelectionStart = ((LinkArea)Value).Start;
	|                TextBox1.SelectionLength = ((LinkArea)Value).Length;
	|            }
	|            catch { }
	|        }
	|
	|        private void FrmLinkArea_FormClosed(object sender, FormClosedEventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyLinkAreaEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyButtonControlConverter : ReferenceConverter
	|    {
	|        public MyButtonControlConverter(Type type) : base(type)
	|        {
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == null)
	|            {
	|                throw new ArgumentNullException(""destinationType"");
	|            }
	|
	|            if (destinationType == typeof(string))
	|            {
	|                if (value != null)
	|                {
	|                    if (context != null)
	|                    {
	|                        IReferenceService refSvc = (IReferenceService)context.GetService(typeof(IReferenceService));
	|                        if (refSvc != null)
	|                        {
	|                            string name = refSvc.GetName(value);
	|                            if (name != null)
	|                            {
	|                                return name;
	|                            }
	|                        }
	|                    }
	|                    if (!System.Runtime.InteropServices.Marshal.IsComObject(value) && value is IComponent)
	|                    {
	|                        IComponent comp = (IComponent)value;
	|                        ISite site = comp.Site;
	|                        if (site != null)
	|                        {
	|                            string name = site.Name;
	|                            if (name != null)
	|                            {
	|                                return name;
	|                            }
	|                        }
	|                    }
	|                    return String.Empty;
	|                }
	|                return ""(отсутствует)"";
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyButtonControlConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.ComponentModel.Design;
	|using System.Diagnostics;
	|
	|namespace osfDesigner
	|{
	|    public class UndoEngineExt : UndoEngine
	|    {
	|        private string _Name_ = ""UndoEngineExt"";
	|        private Stack<UndoEngine.UndoUnit> undoStack = new Stack<UndoEngine.UndoUnit>();
	|        private Stack<UndoEngine.UndoUnit> redoStack = new Stack<UndoEngine.UndoUnit>();
	|
	|        public UndoEngineExt (IServiceProvider provider) : base (provider)
	|        {
	|        }
	|
	|        public bool EnableUndo
	|        {
	|            get { return undoStack.Count > 0; }
	|        }
	|
	|        public bool EnableRedo
	|        {
	|            get { return redoStack.Count > 0; }
	|        }
	|
	|        public void Undo()
	|        {
	|            if (undoStack.Count > 0)
	|            {
	|                try
	|                {
	|                    UndoEngine.UndoUnit unit = undoStack.Pop();
	|                    unit.Undo();
	|                    redoStack.Push (unit);
	|                }
	|                catch (Exception ex)
	|                {
	|                    Debug.WriteLine(_Name_ + ex.Message);
	|                }
	|            }
	|            else { }
	|        }
	|
	|        public void Redo()
	|        {
	|            if (redoStack.Count > 0)
	|            {
	|                try
	|                {
	|                    UndoEngine.UndoUnit unit = redoStack.Pop();
	|                    unit.Undo();
	|                    undoStack.Push (unit);
	|                }
	|                catch (Exception ex)
	|                {
	|                    Debug.WriteLine(_Name_ + ex.Message);
	|                }
	|            }
	|            else { }
	|        }
	|
	|        protected override void AddUndoUnit (UndoEngine.UndoUnit unit)
	|        {
	|            // Тут надо бы что нибудь понадежней придумать! и учесть языковые настройки.
	|            if (!unit.Name.Contains(""Form""))
	|            {
	|                undoStack.Push(unit);
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\UndoEngineExt.cs");
	
	СтрВыгрузки = 
	"using System.Drawing.Design;
	|using System.ComponentModel.Design;
	|using System.Windows.Forms;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    // Это шлюз между пользовательским интерфейсом панели элементов среды разработки и конструкторами
	|    // Конструкторы постоянно запрашивают панель элементов, когда курсор над ней, чтобы получить обратную связь с выбранным элементом управления.
	|    // НАПОМИНАНИЕ:
	|    //     Этот класс реализует интерфейс IToolboxService. Он НЕ создает ПолеСписка (ListBox), он просто запоминает созданный 
	|    //     пользователем элемент, а затем на него ссылается через ToolboxServiceImp::Toolbox свойство.
	|
	|    public class ToolboxServiceImp : IToolboxService
	|    {
	|        public IDesignerHost DesignerHost { get; private set; }
	|        // Наша реальная панель элементов (Toolbox).
	|        public System.Windows.Forms.ListBox Toolbox { get; set; }
	|
	|        public ToolboxServiceImp(IDesignerHost host)
	|        {
	|			this.DesignerHost = host;
	|            Toolbox = null;
	|		}
	|
	|        // Добавление создателя, который будет преобразовывать нестандартные элементы в указанном формате в элементы 
	|        // панели элементов (ToolboxItems), связанные с узлом.
	|        void IToolboxService.AddCreator(ToolboxItemCreatorCallback creator, string format, IDesignerHost host)
	|        {
	|            // НЕРЕАЛИЗОВАННО - Здесь мы не обрабатываем нестандартные элементы. Наш набор элементов является постоянным.
	|        }
	|
	|        // Добавление создателя, который преобразует нестандартные элементы в указанном формате в элементы панели элементов (ToolboxItems).
	|        void IToolboxService.AddCreator(ToolboxItemCreatorCallback creator, string format)
	|        {
	|            // НЕРЕАЛИЗОВАННО - Здесь мы не обрабатываем нестандартные элементы. Наш набор элементов является постоянным.
	|        }
	|
	|        // Добавление элемента (ToolboxItem) к нашей панели элементов, в определенной категории, связанного с определенным узлом.
	|        void IToolboxService.AddLinkedToolboxItem(ToolboxItem toolboxItem, string category, IDesignerHost host)
	|        {
	|            // НЕРЕАЛИЗОВАННО - Мы в итоге не сделали целый проект, так что нет необходимости
	|            // добавления пользовательских элементов (несмотря на то, что у нас есть вкладка для таких элементов).
	|        }
	|
	|        // Добавление элемента (ToolboxItem) к нашей панели элементов, связанного с определенным узлом.
	|        void IToolboxService.AddLinkedToolboxItem(ToolboxItem toolboxItem, IDesignerHost host)
	|        {
	|            // НЕРЕАЛИЗОВАННО - Мы в итоге не сделали целый проект, так что нет необходимости
	|            // добавления пользовательских элементов (несмотря на то, что у нас есть вкладка для таких элементов).
	|        }
	|
	|        // Добавление элемента (ToolboxItem) к нашей панели элементов, в определенной категории.
	|        void IToolboxService.AddToolboxItem(ToolboxItem toolboxItem, string category)
	|        {
	|            // У нас нет категории.
	|            ((IToolboxService) this).AddToolboxItem(toolboxItem);
	|        }
	|
	|        // Добавление элемента (ToolboxItem) к нашей панели элементов.
	|        void IToolboxService.AddToolboxItem(ToolboxItem toolboxItem)
	|        {
	|            Toolbox.Items.Add(toolboxItem);
	|        }
	|
	|        // Наша панель элементов имеет категории, похожие на категории Visual Studio, но вы можете группировать их любым способом. 
	|        // Просто поставьте вашу службу IToolboxService в известность что категорий нет, верните null.
	|        CategoryNameCollection IToolboxService.CategoryNames
	|        {
	|            get { return null; }
	|        }
	|
	|        // Необходимо для перетаскивания. Мы десериализуем элемент панели элементов, когда опускаем в область конструктора.
	|        // Элемент панели элементов (ToolboxItem) упаковывается в объект данных (DataObject). Мы просто работаем
	|        // со стандартными элементами и одним узлом, поэтому параметр host игнорируется.
	|        ToolboxItem IToolboxService.DeserializeToolboxItem(object serializedObject, IDesignerHost host)
	|        {
	|            return ((IToolboxService)this).DeserializeToolboxItem(serializedObject);
	|        }
	|
	|        // Мы десериализуем элемент панели элементов, когда опускаем в область конструктора.
	|        // Элемент панели элементов (ToolboxItem) упаковывается в объект данных (DataObject).
	|        ToolboxItem IToolboxService.DeserializeToolboxItem(object serializedObject)
	|        {
	|            return (ToolboxItem) ((DataObject) serializedObject).GetData(typeof(ToolboxItem));
	|        }
	|
	|        // Возвращается выбранный элемент (ToolboxItem) в нашей панели элементов, если он связан с этим узлом.
	|        // Поскольку все наши элементы связаны с нашим единственным узлом, параметр host проигнорирован.
	|        ToolboxItem IToolboxService.GetSelectedToolboxItem(IDesignerHost host)
	|        {
	|            return ((IToolboxService)this).GetSelectedToolboxItem();
	|        }
	|
	|        // Возвращается выбранный элемент (ToolboxItem) в нашей панели элементов (Toolbox).
	|        ToolboxItem IToolboxService.GetSelectedToolboxItem()
	|        {
	|            if (null == Toolbox || null == Toolbox.SelectedItem)
	|            {
	|                return null;
	|            }
	|
	|            ToolboxItem tbItem = (ToolboxItem) Toolbox.SelectedItem;
	|            if (tbItem.DisplayName.ToUpper().Contains(""POINTER""))
	|            {
	|                return null;
	|            }
	|
	|            return tbItem;
	|        }
	|
	|        // Получить все элементы категории.
	|        ToolboxItemCollection IToolboxService.GetToolboxItems(string category, IDesignerHost host)
	|        {
	|            // У нас нет категории.
	|            return ((IToolboxService) this).GetToolboxItems();
	|        }
	|
	|        // Получить все элементы.
	|        ToolboxItemCollection IToolboxService.GetToolboxItems(string category)
	|        {
	|            // У нас нет категории.
	|            return ((IToolboxService) this).GetToolboxItems();
	|        }
	|
	|        // Получить все элементы. Однако мы всегда используем наш текущий узел.
	|        ToolboxItemCollection IToolboxService.GetToolboxItems(IDesignerHost host)
	|        {
	|            return ((IToolboxService) this).GetToolboxItems();
	|        }
	|
	|        // Получить все элементы.
	|        ToolboxItemCollection IToolboxService.GetToolboxItems()
	|        {
	|            if (null == Toolbox)
	|            {
	|                return null;
	|            }
	|
	|            ToolboxItem[] arr = new ToolboxItem[Toolbox.Items.Count];
	|            Toolbox.Items.CopyTo(arr, 0);
	|
	|            return new ToolboxItemCollection(arr);
	|        }
	|
	|        // Мы всегда используем стандартные элементы (ToolboxItems), поэтому они всегда поддерживаются. Поэтому возвращаем true.
	|        bool IToolboxService.IsSupported(object serializedObject, ICollection filterAttributes)
	|        {
	|            return true;
	|        }
	|
	|        // Мы всегда используем стандартные элементы, поэтому они всегда поддерживаются. Поэтому возвращаем true.
	|        bool IToolboxService.IsSupported(object serializedObject, IDesignerHost host)
	|        {
	|            return true;
	|        }
	|
	|        // Проверка того что, сериализованный объект является элементом панели элементов (ToolboxItem). 
	|        // В нашем случае все наши элементы являются стандартными и из набора констант, и все они элементы панели элементов, 
	|        // так что если мы можем десериализовать его в нашем стандартном пути, тогда это действительно элемент панели элементов (ToolboxItem).
	|        // Узел игнорируется.
	|        bool IToolboxService.IsToolboxItem(object serializedObject, IDesignerHost host)
	|        {
	|            return ((IToolboxService) this).IsToolboxItem(serializedObject);
	|        }
	|
	|        // Проверка того что, сериализованный объект является элементом панели элементов (ToolboxItem). 
	|        // В нашем случае все наши элементы являются стандартными и из набора констант, и все они элементы панели элементов, 
	|        // так что если мы можем десериализовать его в нашем стандартном пути, тогда это действительно элементы панели элементов (ToolboxItem).
	|        bool IToolboxService.IsToolboxItem(object serializedObject)
	|        {
	|            // Если мы можем десериализовать его, то это элемент панели элементов (ToolboxItem).
	|            if (((IToolboxService) this).DeserializeToolboxItem(serializedObject) != null)
	|            {
	|                return true;
	|            }
	|
	|            return false;
	|        }
	|
	|        // Обновление панели элементов (Toolbox).
	|        void IToolboxService.Refresh()
	|        {
	|            Toolbox.Refresh();
	|        }
	|
	|        // Удаление создателя для указанного формата, связанного с определенным узлом.
	|        void IToolboxService.RemoveCreator(string format, IDesignerHost host)
	|        {
	|            // НЕРЕАЛИЗОВАННО - Здесь мы не обрабатываем нестандартные элементы. Наш набор элементов является постоянным.
	|        }
	|
	|        // Удаление создателя для указанного формата.
	|        void IToolboxService.RemoveCreator(string format)
	|        {
	|            // НЕРЕАЛИЗОВАННО - Здесь мы не обрабатываем нестандартные элементы. Наш набор элементов является постоянным.
	|        }
	|
	|        // Удаление элемента (ToolboxItem) из указанной категории в нашей панели элементов.
	|        void IToolboxService.RemoveToolboxItem(ToolboxItem toolboxItem, string category)
	|        {
	|            ((IToolboxService) this).RemoveToolboxItem(toolboxItem);
	|        }
	|
	|        // Удаление элемента (ToolboxItem) из нашей панели элементов.
	|        void IToolboxService.RemoveToolboxItem(ToolboxItem toolboxItem)
	|        {
	|            if (null == Toolbox)
	|            {
	|                return;
	|            }
	|
	|            Toolbox.SelectedItem = null;
	|            Toolbox.Items.Remove(toolboxItem);
	|        }
	|
	|        // Если панель элементов имеет категории, тогда нужно знать какая категория выбрана.
	|        string IToolboxService.SelectedCategory
	|        {
	|            get { return null; }
	|            set { }
	|        }
	|
	|        // Этот метод вызывается после вызова метода ToolPicked. В нашем случае мы выбираем указатель. 
	|        void IToolboxService.SelectedToolboxItemUsed()
	|        {
	|            if (null == Toolbox)
	|            {
	|                return;
	|            }
	|
	|            Toolbox.SelectedItem = null;
	|        }
	|
	|        // Сериализация элемента, необходимая для перетаскивания. Мы сериализуем панель элементов, упаковывая ее в объект данных (DataObject).
	|        object IToolboxService.SerializeToolboxItem(ToolboxItem toolboxItem)
	|        {
	|            DataObject dataObject = new DataObject();
	|            dataObject.SetData(typeof(ToolboxItem), toolboxItem);
	|            return dataObject;
	|        }
	|
	|        // Если выбран инструмент, мы возможно, захотим установить курсор в какое нибудь интересующее место над областью конструктора. 
	|        // Если мы это сделаем, то мы определим это здесь и вернем true. В противном случае мы возвращаем значение false, чтобы вызывающий 
	|        // мог установить курсор в каком-либо месте по умолчанию.
	|        bool IToolboxService.SetCursor()
	|        {
	|            if (null == Toolbox || null == Toolbox.SelectedItem)
	|            {
	|                return false;
	|            }
	|
	|            // <Pointer> не является инструментом, служит для отмены взятия элемента из Toolbox.
	|            ToolboxItem tbItem = (ToolboxItem) Toolbox.SelectedItem;
	|            if (tbItem.DisplayName.ToUpper().Contains(""POINTER""))
	|            {
	|                return false;
	|            }
	|
	|            if (null != Toolbox.SelectedItem)
	|            {
	|                Cursor.Current = Cursors.Cross;
	|                return true;
	|            }
	|            return false;
	|        }
	|
	|        // Установить выбранным элемент в панели элементов.
	|        void IToolboxService.SetSelectedToolboxItem(ToolboxItem toolboxItem)
	|        {
	|            if (null == Toolbox)
	|            {
	|                return;
	|            }
	|
	|            Toolbox.SelectedItem = toolboxItem;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\ToolboxServiceImp.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Diagnostics;
	|
	|namespace osfDesigner
	|{
	|    public class TabOrderHooker
	|    {
	|        public object _tabOrder = null;
	|
	|        // Включает/отключает порядок обхода.
	|        public void HookTabOrder(IDesignerHost host)
	|        {
	|            // Порядок обхода должен быть вызван ПОСЛЕ загрузки поверхности проектирования, поэтому мы делаем небольшую проверку.
	|            if (null == host.RootComponent)
	|            {
	|                throw new Exception(@""TabOrderHooker::ctor() - Исключение: порядок вкладок должен быть вызван после загрузки поверхности дизайна!"");
	|            }
	|
	|            try
	|            {
	|                Assembly designAssembly = Assembly.Load (""System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"");
	|                Type tabOrderType = designAssembly.GetType(""System.Windows.Forms.Design.TabOrder"");
	|                if (_tabOrder == null)
	|                {
	|                    // Вызов конструктора.
	|                    _tabOrder = Activator.CreateInstance(tabOrderType, new object[] { host });
	|                }
	|                else
	|                {
	|                    DisposeTabOrder();
	|                }
	|            }
	|            catch(Exception exx)
	|            {
	|                Debug.WriteLine(exx.Message);
	|                if (null != exx.InnerException)
	|                {
	|                    Debug.WriteLine(exx.InnerException.Message);
	|                }
	|                throw;
	|            }
	|        }
	|
	|        // Управление порядком обхода.
	|        public void DisposeTabOrder()
	|        {
	|            if (null == _tabOrder) return;
	|            try
	|            {
	|                Assembly designAssembly = Assembly.Load (""System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"");
	|                Type tabOrderType = designAssembly.GetType (""System.Windows.Forms.Design.TabOrder"");
	|                tabOrderType.InvokeMember (""Dispose"", BindingFlags.Public | BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.InvokeMethod, null, _tabOrder, new object[] { true });
	|                _tabOrder = null;
	|            }
	|            catch(Exception exx)
	|            {
	|                Debug.WriteLine(exx.Message);
	|                if (null != exx.InnerException)
	|                {
	|                    Debug.WriteLine(exx.InnerException.Message);
	|                }
	|                throw;
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\TabOrderHooker.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections;
	|using System.Collections.Generic;
	|using System.ComponentModel;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Diagnostics;
	|using System.Reflection;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    public class PropertyGridHost : System.Windows.Forms.UserControl
	|    {
	|        private IContainer components = null;
	|        protected System.Windows.Forms.PropertyGrid pgrdPropertyGrid;
	|        protected System.Windows.Forms.ComboBox pgrdComboBox;
	|
	|        protected System.Windows.Forms.Splitter pgrdsplitter;
	|        protected System.Windows.Forms.TreeView pgrdTreeView;
	|        protected System.Windows.Forms.ToolBar pgrdToolBar;
	|        protected System.Windows.Forms.ToolBarButton buttonSort;
	|
	|        // Используется для подавления событий. Установите в значение True перед изменением свойства, которое вызовет событие.
	|        private bool _bSuppressEvents = false;
	|        private bool _bSuppressEvents2 = false;
	|
	|        public PropertyGridHost(DesignSurfaceManagerExt surfaceManager)
	|        {
	|            this.pgrdPropertyGrid = new System.Windows.Forms.PropertyGrid();
	|            this.pgrdComboBox = new System.Windows.Forms.ComboBox();
	|            this.pgrdsplitter = new System.Windows.Forms.Splitter();
	|            this.pgrdTreeView = new System.Windows.Forms.TreeView();
	|            this.pgrdToolBar = new System.Windows.Forms.ToolBar();
	|            this.buttonSort = new System.Windows.Forms.ToolBarButton();
	|            this.SuspendLayout();
	|            // 
	|            // pgrdPropertyGrid
	|            // 
	|            this.pgrdPropertyGrid.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.pgrdPropertyGrid.Location = new Point(0, 229);
	|            this.pgrdPropertyGrid.Name = ""pgrdPropertyGrid"";
	|            this.pgrdPropertyGrid.Size = new Size(150, 0);
	|            this.pgrdPropertyGrid.TabIndex = 3;
	|            // 
	|            // pgrdComboBox
	|            // 
	|            this.pgrdComboBox.Dock = System.Windows.Forms.DockStyle.Top;
	|            this.pgrdComboBox.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
	|            this.pgrdComboBox.FormattingEnabled = true;
	|            this.pgrdComboBox.Location = new Point(0, 205);
	|            this.pgrdComboBox.Name = ""pgrdComboBox"";
	|            this.pgrdComboBox.Size = new Size(150, 24);
	|            this.pgrdComboBox.Sorted = true;
	|            this.pgrdComboBox.TabIndex = 2;
	|            // 
	|            // pgrdsplitter
	|            // 
	|            this.pgrdsplitter.BackColor = Color.LightSteelBlue;
	|            this.pgrdsplitter.Dock = System.Windows.Forms.DockStyle.Top;
	|            this.pgrdsplitter.Location = new Point(0, 200);
	|            this.pgrdsplitter.Name = ""pgrdsplitter"";
	|            this.pgrdsplitter.Size = new Size(150, 5);
	|            this.pgrdsplitter.TabIndex = 4;
	|            this.pgrdsplitter.TabStop = false;
	|            // 
	|            // pgrdTreeView
	|            // 
	|            this.pgrdTreeView.Dock = System.Windows.Forms.DockStyle.Top;
	|            this.pgrdTreeView.HideSelection = false;
	|            this.pgrdTreeView.Location = new Point(0, 0);
	|            this.pgrdTreeView.Name = ""pgrdTreeView"";
	|            this.pgrdTreeView.Size = new Size(150, 200);
	|            this.pgrdTreeView.NodeMouseClick += PgrdTreeView_NodeMouseClick;
	|            this.pgrdTreeView.TabIndex = 5;
	|
	|            // 
	|            // buttonSort
	|            // 
	|            string str_sort = ""AAABAAEAICAQAAEABADoAgAAFgAAACgAAAAgAAAAQAAAAAEABAAAAAAAgAIAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAEREQAAERERAAAAAAAAAAAAEREQAAEREAAAAAAAAAAAAAEREQABERAAAAAAAAAAAAAAEREQAREQAAAAAAcAAAAAAIEREQEREAAAAAB3cAAAAAAIERERERAAAAAABwAAAAAAAREREREQAAAAAAcAAAAAABEREREREAAAAAAHAAAAAAEREQARERAAAAAABwAAAAABERAAAREQAAAAAAcAAAAAAREQAAEREAAAAAAHAAAAAAEREQARERAAAAAABwAAAAAAEREREREQAAAAAAcAAAAAAAEREREREQAAAAAHAAAAAAAAAAAAAAAAAAAABwAAAAAAAAAAAAAAAAAAAAcAAAAMzMAAAAzMzAAAAAAHAAAADMzAAAAMzMwAAAAABwAAAADMzAAADMzAAAAAAAcAAAAAzMwAAMzMwAAAAAAHAAAAAAzMzMzMzMAAAAAABwAAAAAMzMzMzMwAAAAAAAcAAAAADMzAAMzMAAAAAAAHAAAAAADMwADMwAAAAAAABwAAAAAAzMwMzMAAAAAAAAcAAAAAAAzMDMzAAAAAAAAHAAAAAAAMzMzMAAAAAAAABwAAAAAADMzMzAAAAAAAAAcAAAAAAADMzMAAAAAAAAAAAAAAAAAADMzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/////g8D/v8Hh/x/g4f4P8GH8B/Ah+AP4AfAB+AHwAfAB/g/gwf4P4eH+D+Hh/g/gwf4P8AH+D/gA/g////4P///+D4fg/g+H4P4Pw+H+D8PB/g/gAf4P4AP+D+HD/g/xx/4P8If+D/iH/g/4D/4P+A/+D/wf/g/+H/4P/////w=="";
	|            Image Image1 = OneScriptFormsDesigner.Base64ToImage(str_sort);
	|            System.Windows.Forms.ImageList ImageList1 = new System.Windows.Forms.ImageList();
	|            ImageList1.Images.Add(Image1);
	|            this.buttonSort.Style = System.Windows.Forms.ToolBarButtonStyle.ToggleButton;
	|            this.buttonSort.ImageIndex = 0;
	|            this.buttonSort.Name = ""buttonSort"";
	|            this.buttonSort.Pushed = true;
	|
	|            // 
	|            // pgrdToolBar
	|            // 
	|            this.pgrdToolBar.Dock = System.Windows.Forms.DockStyle.Top;
	|            this.pgrdToolBar.Location = new Point(0, 0);
	|            this.pgrdToolBar.Name = ""pgrdToolBar"";
	|            this.pgrdToolBar.Size = new Size(150, 24);
	|            this.pgrdToolBar.BackColor = pgrdPropertyGrid.BackColor;
	|            this.pgrdToolBar.Buttons.Add(buttonSort);
	|            this.pgrdToolBar.ImageList = ImageList1;
	|            this.pgrdToolBar.ButtonClick += PgrdToolBar_ButtonClick;
	|
	|            // 
	|            // PropertyGridHost
	|            // 
	|            this.AutoScaleDimensions = new SizeF(8F, 16F);
	|            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	|            this.Controls.Add(this.pgrdPropertyGrid);
	|            this.Controls.Add(this.pgrdComboBox);
	|            this.Controls.Add(this.pgrdsplitter);
	|            this.Controls.Add(this.pgrdTreeView);
	|            this.Controls.Add(this.pgrdToolBar);
	|            this.Name = ""PropertyGridHost"";
	|            this.ResumeLayout(false);
	|
	|            this.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Диспетчер поверхности строго связан с PropertyGridHost.
	|            if (null == surfaceManager)
	|            {
	|                throw new ArgumentNullException(""surfaceManager"", @""PropertyGridHost::ctor() - Исключение: недопустимый аргумент (null)!"");
	|            }
	|
	|            SurfaceManager = surfaceManager;
	|            pgrdPropertyGrid.ToolbarVisible = true;
	|            pgrdPropertyGrid.HelpVisible = true;
	|
	|            // ComboBox - СЛЕДИТ за событием PropertyGridHost: SelectedObjectsChanged.
	|            // Каждый раз, когда кто-либо выбирает новый объект внутри PropertyGridHost
	|            // событие PropertyGridHost.SelectedObjectsChanged вызывает метод ReloadComboBox().
	|            pgrdPropertyGrid.SelectedObjectsChanged += (object sender, EventArgs e) =>
	|            {
	|                // !!!здесь делаем подмену исходного компонента, указанного в свойстве pgrdPropertyGrid.SelectedObject на 
	|                // наш компонент - двойник (similar). Связь между ними через OneScriptFormsDesigner.hashtable.
	|                System.Windows.Forms.PropertyGrid propertyGrid = (System.Windows.Forms.PropertyGrid)sender;
	|                dynamic OriginalObj = propertyGrid.SelectedObject;
	|                dynamic SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|
	|                // !!!делаем невидимыми свойства, которые хотим скрыть.
	|                // Компонент System.Windows.Forms.ImageList и System.Windows.Forms.MainMenu используем от Майкрософт для помещения на форму, а 
	|                // в сетке свойств показываем свойства нашего osfDesigner.ImageList и osfDesigner.MainMenu.
	|                if (SimilarObj == null)
	|                {
	|                    if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.ImageList"")
	|                    {
	|                        SimilarObj = new osfDesigner.ImageList();
	|                        ((osfDesigner.ImageList)SimilarObj).OriginalObj = OriginalObj;
	|                        OneScriptFormsDesigner.AddToHashtable(OriginalObj, SimilarObj);
	|                        OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                        propertyGrid.SelectedObject = SimilarObj;
	|                    }
	|                    else if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.MainMenu"")
	|                    {
	|                        SimilarObj = new osfDesigner.MainMenu();
	|                        OneScriptFormsDesigner.AddToHashtable(OriginalObj, SimilarObj);
	|                        OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                        propertyGrid.SelectedObject = SimilarObj;
	|                    }
	|                }
	|                else
	|                {
	|                    propertyGrid.SelectedObject = SimilarObj;
	|                }
	|
	|                if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.TabPage"")
	|                {
	|                    SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|                    if (OneScriptFormsDesigner.tic1 > 1)
	|                    {
	|                        propertyGrid.SelectedObject = SimilarObj;
	|                    }
	|                    else
	|                    {
	|                        OneScriptFormsDesigner.tic1 = OneScriptFormsDesigner.tic1 + 1;
	|                    }
	|                }
	|                ReloadComboBox();
	|                ChangeSelectNode(OriginalObj);
	|            };
	|
	|            pgrdPropertyGrid.SelectedGridItemChanged += (object s, SelectedGridItemChangedEventArgs e) =>
	|            {
	|                object comp = pgrdPropertyGrid;
	|                Type compType = comp.GetType();
	|                object view = compType.GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(comp);
	|                GridItemCollection GridItemCollection1 = (GridItemCollection)view.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view, null);
	|                foreach (GridItem GridItem in GridItemCollection1)
	|                {
	|                    if (GridItem.Label == ""СписокИзображений"" || 
	|                    GridItem.Label == ""СписокБольшихИзображений"" || 
	|                    GridItem.Label == ""СписокМаленькихИзображений"" || 
	|                    GridItem.Label == ""DoubleBuffered"")
	|                    {
	|                        GridItem.Expanded = false;
	|                    }
	|                }
	|
	|                // Выделим компонент на форме используя pgrdPropertyGrid.SelectedObject.
	|                // Это может понадобиться, если компонент, например кнопка, меняет родителя,
	|                // иначе не синхронно обновляется сетка свойств, поле выбора над ним, и выделенный на форме объект.
	|                if (!OneScriptFormsDesigner.block1)
	|                {
	|                    IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|                    ISelectionService iSel = host.GetService(typeof(ISelectionService)) as ISelectionService;
	|                    if (iSel != null)
	|                    {
	|                        if (iSel.GetSelectedComponents().Count == 1)
	|                        {
	|                            ComponentCollection ctrlsExisting = host.Container.Components;
	|                            for (int i = 0; i < ctrlsExisting.Count; i++)
	|                            {
	|                                if (ctrlsExisting[i].Site.Name == ((Component)pgrdPropertyGrid.SelectedObject).Site.Name)
	|                                {
	|                                    IComponent[] arr = { ctrlsExisting[i] };
	|                                    iSel.SetSelectedComponents(arr);
	|                                    break;
	|                                }
	|                            }
	|                        }
	|                    }
	|                }
	|
	|                if (pgrdPropertyGrid.SelectedObject is System.Windows.Forms.Form)
	|                {
	|
	|                }
	|            };
	|
	|            pgrdPropertyGrid.PropertyValueChanged += (object s, PropertyValueChangedEventArgs e) =>
	|            {
	|                System.Windows.Forms.PropertyGrid PropertyGrid1 = (System.Windows.Forms.PropertyGrid)s;
	|                dynamic SelectedObject1 = PropertyGrid1.SelectedObject;
	|                string Label1 = PropertyGrid1.SelectedGridItem.Label;
	|                if (Label1 == ""СписокИзображений"")
	|                {
	|                    if (e.ChangedItem.Value != e.OldValue)
	|                    {
	|                        try
	|                        {
	|                            SelectedObject1.ImageIndex = -1;
	|                        }
	|                        catch { }
	|                    }
	|                }
	|                if (Label1 == ""Значок"")
	|                {
	|                }
	|                if (Label1 == ""Стыковка"")
	|                {
	|                    PropertyGrid.TopLevelControl.Refresh();
	|                }
	|
	|                object comp = pgrdPropertyGrid;
	|                Type compType = comp.GetType();
	|                object view = compType.GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(comp);
	|                GridItemCollection GridItemCollection1 = (GridItemCollection)view.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view, null);
	|                foreach (GridItem GridItem in GridItemCollection1)
	|                {
	|                    if (GridItem.Label == ""СписокИзображений"" || 
	|                    GridItem.Label == ""СписокБольшихИзображений"" || 
	|                    GridItem.Label == ""СписокМаленькихИзображений"" || 
	|                    GridItem.Label == ""DoubleBuffered"")
	|                    {
	|                        GridItem.Expanded = false;
	|                    }
	|                }
	|	
	|                if (Label1 == ""(Name)"" && SelectedObject1.GetType() != typeof(Form))
	|                {
	|                    System.Windows.Forms.MessageBox.Show(
	|                        ""Для правильного формирования файла сценария не допускается изменять имя компонента."",
	|                        """",
	|                        MessageBoxButtons.OK,
	|                        MessageBoxIcon.Exclamation,
	|                        MessageBoxDefaultButton.Button1
	|                        );
	|                    if (SelectedObject1.GetType().ToString() == ""osfDesigner.TabPage"")
	|                    {
	|                        PropertyDescriptor pd = TypeDescriptor.GetProperties(SelectedObject1.M_TabPage)[""Name""];
	|                        pd.SetValue(SelectedObject1.M_TabPage, (string)e.OldValue);
	|                    }
	|                    else
	|                    {
	|                        PropertyDescriptor pd = TypeDescriptor.GetProperties(SelectedObject1)[""Name""];
	|                        pd.SetValue(SelectedObject1, (string)e.OldValue);
	|                    }
	|                }
	|                if (Label1.Contains(""ToolTip""))
	|                {
	|                    if ((string)PropertyGrid1.SelectedGridItem.Value != (string)e.OldValue)
	|                    {
	|                        string nameToolTip = Label1.Substring(Label1.LastIndexOf(' ') + 1);
	|                        SelectedObject1.ToolTip[nameToolTip] = (string)PropertyGrid1.SelectedGridItem.Value;
	|                    }
	|                }
	|            };
	|
	|            // PropertyGridHost - СЛЕДИТ за событием ComboBox: SelectedIndexChanged.
	|            // Каждый раз, когда кто-либо выбирает новый объект внутри ComboBox
	|            // событие ComboBox.SelectedIndexChanged вызывает метод OrientPropertyGridTowardsObject().
	|            pgrdComboBox.SelectedIndexChanged += (object sender, EventArgs e) =>
	|            {
	|                if (_bSuppressEvents)
	|                {
	|                    return;
	|                }
	|                OrientPropertyGridTowardsObject();
	|            };
	|        }
	|
	|        private void PgrdToolBar_ButtonClick(object sender, ToolBarButtonClickEventArgs e)
	|        {
	|
	|            if (e.Button.Name == ""buttonSort"")
	|            {
	|                if (buttonSort.Pushed)
	|                {
	|                    buttonSort.ToolTipText = ""В порядке создания"";
	|                }
	|                else
	|                {
	|                    buttonSort.ToolTipText = ""В алфавитном порядке"";
	|                }
	|
	|                Component comp = OneScriptFormsDesigner.HighlightedComponent();
	|                ReloadTreeView();
	|                if (comp != null)
	|                {
	|                    ChangeSelectNode(comp);
	|                }
	|            }
	|        }
	|
	|        public void ChangeSelectNode(Component comp, System.Windows.Forms.TreeNodeCollection treeNodes = null)
	|        {
	|            if (_bSuppressEvents2)
	|            {
	|                return;
	|            }
	|
	|            System.Windows.Forms.TreeNodeCollection _treeNodes;
	|            if (treeNodes == null)
	|            {
	|                _treeNodes = TreeView.Nodes;
	|            }
	|            else
	|            {
	|                _treeNodes = treeNodes;
	|            }
	|
	|            ISelectionService iSel = (ISelectionService)(pDesigner.DSME.ActiveDesignSurface.GetService(typeof(ISelectionService)));
	|            ICollection collection1 = iSel.GetSelectedComponents();
	|            Component[] arr = new Component[collection1.Count];
	|            collection1.CopyTo(arr, 0);
	|            Component comp1 = null;
	|            try
	|            {
	|                comp1 = arr[0];
	|            }
	|            catch { }
	|            if (comp1 != null)
	|            {
	|                try
	|                {
	|                    string _nodeKey = comp1.Site.Name;
	|                    System.Windows.Forms.TreeNode treeNode;
	|                    for (int i = 0; i < _treeNodes.Count; i++)
	|                    {
	|                        treeNode = _treeNodes[i];
	|                        if (treeNode.Name == _nodeKey)
	|                        {
	|                            TreeView.SelectedNode = treeNode;
	|                            return;
	|                        }
	|                        if (treeNode.Nodes.Count > 0)
	|                        {
	|                            ChangeSelectNode(comp, treeNode.Nodes);
	|                        }
	|                    }
	|                }
	|                catch { }
	|            }
	|            else { }
	|        }
	|
	|        private void PgrdTreeView_NodeMouseClick(object sender, TreeNodeMouseClickEventArgs e)
	|        {
	|            _bSuppressEvents2 = true;
	|            IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|            ISelectionService iSel = host.GetService(typeof(ISelectionService)) as ISelectionService;
	|            if (iSel != null)
	|            {
	|                ComponentCollection ctrlsExisting = host.Container.Components;
	|                for (int i = 0; i < ctrlsExisting.Count; i++)
	|                {
	|                    if (ctrlsExisting[i].Site.Name == e.Node.Text)
	|                    {
	|                        IComponent[] arr = { ctrlsExisting[i] };
	|                        iSel.SetSelectedComponents(arr);
	|                        break;
	|                    }
	|                }
	|            }
	|            _bSuppressEvents2 = false;
	|        }
	|
	|        // Метод очистки всех используемых ресурсов.
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing && (components != null))
	|            {
	|                components.Dispose();
	|            }
	|            base.Dispose(disposing);
	|        }
	|
	|        private DesignSurfaceManagerExt SurfaceManager { get; set; }
	|        
	|        public System.Windows.Forms.ComboBox ComboBox
	|        {
	|            get { return pgrdComboBox; }
	|        }
	|
	|        public System.Windows.Forms.TreeView TreeView
	|        {
	|            get { return pgrdTreeView; }
	|        }
	|
	|        public System.Windows.Forms.ToolBarButton ButtonSort
	|        {
	|            get { return buttonSort; }
	|        }
	|
	|        public System.Windows.Forms.PropertyGrid PropertyGrid
	|        {
	|            get { return pgrdPropertyGrid; }
	|        }
	|
	|        public object SelectedObject
	|        {
	|            get { return pgrdPropertyGrid.SelectedObject; }
	|            set { pgrdPropertyGrid.SelectedObject = value; }
	|        }
	|
	|        // Используйте свойство SurfaceManager.ActiveDesignSurface которое указывает на АКТИВНУЮ область дизайнера (DesignSurface).
	|        private void OrientPropertyGridTowardsObject() // Ориентация сетки свойств по отношению к объекту.
	|        {
	|            IDesignerEventService des = (IDesignerEventService)SurfaceManager.GetService(typeof(IDesignerEventService));
	|            if (null != des)
	|            {
	|                IDesignerHost host = des.ActiveDesigner;
	|
	|                // Получим ISelectionService из активной поверхности дизайнера.
	|                ISelectionService iSel = host.GetService(typeof(ISelectionService)) as ISelectionService;
	|                if (iSel != null)
	|                {
	|                    // Получим имя элемента управления, выбранного в comboBox.
	|                    string sName = pgrdComboBox.SelectedItem.ToString();
	|                    if (!string.IsNullOrEmpty(sName))
	|                    {
	|                        // Сохраним коллекцию выбранных объектов. Циклично пройдем через элементы управления внутри текущей поверхности дизайнера.
	|                        // Если мы найдем выбранный в comboBox элемент, то используем ISelectionService, чтобы выбрать его и он будет выбран в PropertyGridHost.
	|                        ComponentCollection ctrlsExisting = host.Container.Components;
	|                        Debug.Assert(0 != ctrlsExisting.Count);
	|                        foreach (Component comp in ctrlsExisting)
	|                        {
	|                            if (sName == comp.Site.Name)
	|                            {
	|                                Component[] arr = { comp };
	|                                iSel.SetSelectedComponents(arr);
	|                                break;
	|                            }
	|                        }
	|                    }
	|                }
	|            }
	|        }
	|
	|        public void ReloadTreeView()
	|        {
	|            Form Form1 = null;
	|            try
	|            {
	|                Form1 = (Form)pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost().Container.Components[0];
	|            }
	|            catch { }
	|            if (Form1 == null)
	|            {
	|                TreeView.Nodes.Clear();
	|                return;
	|            }
	|
	|            object selectedObj = pgrdPropertyGrid.SelectedObject;
	|            if (null == selectedObj)
	|            {
	|                return;
	|            }
	|
	|            IDesignerEventService des = (IDesignerEventService)SurfaceManager.GetService(typeof(IDesignerEventService));
	|            if (null == des)
	|            {
	|                return;
	|            }
	|
	|            TreeView.Nodes.Clear();
	|
	|            ComponentCollection ctrls = des.ActiveDesigner.Container.Components;
	|            ArrayList ctrlsExisting = new ArrayList();
	|            ArrayList ctrlsExisting1 = new ArrayList();
	|            for (int i = 0; i < ctrls.Count; i++)
	|            {
	|                ctrlsExisting.Add(ctrls[i]);
	|                ctrlsExisting1.Add(ctrls[i]);
	|            }
	|
	|            if (!buttonSort.Pushed)
	|            {
	|                Dictionary<string, IComponent> comps = new Dictionary<string, IComponent>();
	|                for (int i = 0; i < ctrlsExisting.Count; i++)
	|                {
	|                    string sName = string.Empty;
	|                    if (ctrlsExisting[i] is Form)
	|                    {
	|                        if (((Form)ctrlsExisting[i]).Text == """")
	|                        {
	|                            sName = pDesigner.DSME.GetValidFormName();
	|                        }
	|                        else
	|                        {
	|                            sName = ((Form)ctrlsExisting[i]).Site.Name;
	|                        }
	|                    }
	|                    else if (ctrlsExisting[i] is Control)
	|                    {
	|                        sName = ((Control)ctrlsExisting[i]).Site.Name;
	|                    }
	|                    if (string.IsNullOrEmpty(sName))
	|                    {
	|                        sName = ((Component)ctrlsExisting[i]).Site.Name;
	|                    }
	|                    comps.Add(sName, (IComponent)ctrlsExisting[i]);
	|                }
	|                Dictionary<string, System.Windows.Forms.TreeNode> comps2 = new Dictionary<string, System.Windows.Forms.TreeNode>();
	|                foreach (KeyValuePair<string, IComponent> keyValue in comps)
	|                {
	|                    string parentName = """";
	|                    Control parent1 = null;
	|                    try
	|                    {
	|                        parent1 = ((dynamic)keyValue.Value).Parent;
	|                    }
	|                    catch { }
	|
	|                    if (parent1 != null)
	|                    {
	|                        for (int i1 = 0; i1 < ctrlsExisting1.Count; i1++)
	|                        {
	|                            if (parent1 == ctrlsExisting1[i1])
	|                            {
	|                                parentName = ((IComponent)ctrlsExisting1[i1]).Site.Name;
	|                                break;
	|                            }
	|                        }
	|                    }
	|
	|                    System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode((string)keyValue.Key);
	|                    TreeNode1.Tag = parentName;
	|                    TreeNode1.Name = (string)keyValue.Key;
	|                    comps2.Add(keyValue.Key, TreeNode1);
	|                }
	|                foreach (KeyValuePair<string, IComponent> keyValue in comps)
	|                {
	|                    System.Windows.Forms.TreeNode TreeNode1 = (System.Windows.Forms.TreeNode)comps2[(string)keyValue.Key];
	|                    if ((string)TreeNode1.Tag != """")
	|                    {
	|                        System.Windows.Forms.TreeNode NodeParent = (System.Windows.Forms.TreeNode)comps2[(string)TreeNode1.Tag];
	|                        NodeParent.Nodes.Add(TreeNode1);
	|                    }
	|                    else
	|                    {
	|                        TreeView.Nodes.Add(TreeNode1);
	|                    }
	|
	|                }
	|            }
	|            else
	|            {
	|                SortedList SortedList1 = new SortedList();
	|                for (int i = 0; i < ctrlsExisting.Count; i++)
	|                {
	|                    string sName = string.Empty;
	|                    if (ctrlsExisting[i] is Form)
	|                    {
	|                        if (((Form)ctrlsExisting[i]).Text == """")
	|                        {
	|                            sName = pDesigner.DSME.GetValidFormName();
	|                        }
	|                        else
	|                        {
	|                            sName = ((Form)ctrlsExisting[i]).Site.Name;
	|                        }
	|                    }
	|                    else if (ctrlsExisting[i] is Control)
	|                    {
	|                        sName = ((Control)ctrlsExisting[i]).Site.Name;
	|                    }
	|                    if (string.IsNullOrEmpty(sName))
	|                    {
	|                        sName = ((Component)ctrlsExisting[i]).Site.Name;
	|                    }
	|                    SortedList1.Add(sName, ctrlsExisting[i]);
	|                }
	|
	|                SortedList SortedList2 = new SortedList();
	|                foreach (DictionaryEntry de in SortedList1)
	|                {
	|                    string parentName = """";
	|                    Control parent1 = null;
	|                    try
	|                    {
	|                        parent1 = ((dynamic)de.Value).Parent;
	|                    }
	|                    catch { }
	|
	|                    if (parent1 != null)
	|                    {
	|                        for (int i1 = 0; i1 < ctrlsExisting1.Count; i1++)
	|                        {
	|                            if (parent1 == ctrlsExisting1[i1])
	|                            {
	|                                parentName = ((IComponent)ctrlsExisting1[i1]).Site.Name;
	|                                break;
	|                            }
	|                        }
	|                    }
	|
	|                    System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode((string)de.Key);
	|                    TreeNode1.Tag = parentName;
	|                    TreeNode1.Name = (string)de.Key;
	|                    SortedList2.Add(de.Key, TreeNode1);
	|                }
	|                foreach (DictionaryEntry de in SortedList1)
	|                {
	|                    System.Windows.Forms.TreeNode TreeNode1 = (System.Windows.Forms.TreeNode)SortedList2[(string)de.Key];
	|                    if ((string)TreeNode1.Tag != """")
	|                    {
	|                        System.Windows.Forms.TreeNode NodeParent = (System.Windows.Forms.TreeNode)SortedList2[TreeNode1.Tag];
	|                        NodeParent.Nodes.Add(TreeNode1);
	|                    }
	|                    else
	|                    {
	|                        TreeView.Nodes.Add(TreeNode1);
	|                    }
	|                }
	|            }
	|            TreeView.ExpandAll();
	|        }
	|
	|        public void ReloadComboBox()
	|        {
	|            _bSuppressEvents = true;
	|
	|            IDesignerEventService des = (IDesignerEventService)SurfaceManager.GetService(typeof(IDesignerEventService));
	|            if (null == des)
	|            {
	|                return;
	|            }
	|            IDesignerHost host = des.ActiveDesigner;
	|
	|            object selectedObj = pgrdPropertyGrid.SelectedObject;
	|            if (null == selectedObj)
	|            {
	|                return;
	|            }
	|
	|            // Получим имя элемента управления, выбранного в comboBox.
	|            string sName = string.Empty;
	|            if (selectedObj is Form)
	|            {
	|                sName = ((Form)selectedObj).Name;
	|            }
	|            else if (selectedObj is Control)
	|            {
	|                sName = ((Control)selectedObj).Site.Name;
	|            }
	|            if (string.IsNullOrEmpty(sName))
	|            {
	|                sName = ((Component)selectedObj).Site.Name; // Чтобы не визуальные компоненты меняли индекс в ComboBox.
	|            }
	|
	|            // Подготовка данных для перезагрузки combobox (начало).
	|            List<object> ctrlsToAdd = new List<object>();
	|            string pgrdComboBox_Text = string.Empty;
	|            try
	|            {
	|                ComponentCollection ctrlsExisting = host.Container.Components;
	|                Debug.Assert(0 != ctrlsExisting.Count);
	|
	|                foreach (Component comp in ctrlsExisting)
	|                {
	|                    string sItemText = comp.Site.Name;
	|                    ctrlsToAdd.Add(sItemText);
	|                    if (sName == comp.Site.Name)
	|                    {
	|                        pgrdComboBox_Text = sItemText;
	|                    }
	|                }
	|            }
	|            catch (Exception)
	|            {
	|                return;
	|            }
	|            // Обновим combobox (фиксация).
	|            pgrdComboBox.Items.Clear();
	|            pgrdComboBox.Items.AddRange(ctrlsToAdd.ToArray());
	|            pgrdComboBox.Text = pgrdComboBox_Text;
	|
	|            _bSuppressEvents = false;
	|        }
	|
	|        // Свернем одиночный элемент сетки (GridItem) тот, который имеет значение параметра ""sGridItemLabel"".
	|        public GridItem CollapseGridItem(string sGridItemLabel)
	|        {
	|            return CollapseExpandGridItem(sGridItemLabel, false);
	|        }
	|
	|        // Развернем одиночный элемент сетки (GridItem) тот, который имеет значение параметра ""sGridItemLabel"".
	|        public GridItem ExpandGridItem(string sGridItemLabel)
	|        {
	|            return CollapseExpandGridItem(sGridItemLabel, true);
	|        }
	|
	|        private GridItem CollapseExpandGridItem(string sGridItemLabel, bool bExpanded)
	|        {
	|            // Получим корневой элемент GridItem.
	|            GridItem root = this.PropertyGrid.SelectedGridItem;
	|            if (null == root)
	|            {
	|                return null;
	|            }
	|
	|            while (null != root.Parent)
	|                root = root.Parent;
	|
	|            if (null == root)
	|            {
	|                return null;
	|            }
	|
	|            // И начнем поиск из корня.
	|            foreach (GridItem g in root.GridItems)
	|            {
	|                if (g.Label == sGridItemLabel)
	|                {
	|                    if (g.Expandable)
	|                    {
	|                        g.Expanded = bExpanded;
	|                    }
	|                    return g;
	|                }
	|            }
	|            return null;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\PropertyGridHost.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Text;
	|using System.Reflection;
	|using System.Xml;
	|
	|namespace osfDesigner
	|{
	|    public static class Serializer
	|    {
	|        public static string DeserializeObjects(string fileName)
	|        {
	|            StreamReader sr = new StreamReader(fileName);
	|            //dynamic obj1 = null;
	|
	|            string line;
	|            while ((line = sr.ReadLine()) != null)
	|            {
	|                line = line.Trim();
	|                if (!line.Contains("" "") && !line.Contains(""/""))
	|                {
	|                    System.Windows.Forms.MessageBox.Show(line);// имя объекта
	|                                                               // создаем объект исходя из его типа
	|                                                               //obj1 = ...;
	|                }
	|                if (line.Contains(""/>""))
	|                {
	|                    // свойство объекта
	|                    // делим строку в массив по пробелам
	|                    // массив[0] - имя свойства
	|                    // массив[1] - тип свойства
	|                    // массив[2] - значение свойства
	|                    string propName = """";
	|                    string propType = """";
	|                    string propValue = """";
	|                    string[] separators = new string[] { "" "" };
	|                    string[] result = line.Split(separators, StringSplitOptions.RemoveEmptyEntries);
	|                    if (result.Length < 3)
	|                    {
	|                        continue;
	|                    }
	|
	|                    //OneScriptFormsDesigner.StrFindBetween(, ,);
	|
	|                    for (int i = 0; i < result.Length; i++)
	|                    {
	|                        if (i == 0)
	|                        {
	|                            propName = result[0];
	|                        }
	|                        if (i == 1)
	|                        {
	|                            propType = result[1];
	|                        }
	|                        if (i == 2)
	|                        {
	|                            propValue = result[2];
	|                        }
	|                    }
	|                    System.Windows.Forms.MessageBox.Show(
	|                        ""line = "" + line + ""\r\n"" +
	|                        ""propName = "" + propName + ""\r\n"" +
	|                        ""propType = "" + propType + ""\r\n"" +
	|                        ""propValue = "" + propValue);
	|
	|                }
	|                if (line.Contains(""</""))
	|                {
	|                    System.Windows.Forms.MessageBox.Show(line);// свойства объекта закончились
	|                    //obj1 = null;
	|                }
	|
	|            }
	|
	|            //System.Collections.ArrayList ArrayList1 = OneScriptFormsDesigner.StrFindBetween(str1, ""<"", "">"");
	|            //System.Windows.Forms.MessageBox.Show(""222"");
	|            //for (int i = 0; i < ArrayList1.Count; i++)
	|            //{
	|            //    string element = (string)ArrayList1[i];
	|            //    if (!element.Contains("" "") && !element.Contains(""/""))
	|            //    {
	|            //        System.Windows.Forms.MessageBox.Show(element);
	|            //    }
	|            //}
	|
	|            sr.Close();
	|            return ""str1"";
	|        }
	|
	|        public static void SerializeObjects(object[] obj1, string fileName)
	|        {
	|            System.Xml.XmlWriterSettings Settings1 = new XmlWriterSettings();
	|            Settings1.Encoding = new UTF8Encoding(true);
	|            Settings1.Indent = true;
	|            System.Xml.XmlWriter writer1 = System.Xml.XmlWriter.Create(fileName, Settings1);
	|
	|            writer1.WriteStartElement(""Objects"");
	|
	|            for (int i = 0; i < obj1.Length; i++)
	|            {
	|                dynamic comp = obj1[i];
	|                PropertyInfo[] properties2 = comp.GetType().GetProperties(BindingFlags.Instance | BindingFlags.Public);
	|                System.Collections.Generic.List<PropertyInfo> la = new System.Collections.Generic.List<PropertyInfo>();
	|                for (int i1 = 0; i1 < properties2.Length; i1++)
	|                {
	|                    PropertyInfo pi = properties2[i1];
	|                    if (pi.CanRead)
	|                    {
	|                        // выгружаем только свойства перечисленные в свойстве RequiredValues объекта,
	|                        // и только свойства перечисленные в свойстве DefaultValues объекта и при этом 
	|                        // изменившиеся с момента создания объекта
	|                        string strDisplayName = OneScriptFormsDesigner.GetDisplayName(comp, pi.Name);
	|                        if (strDisplayName == """")
	|                        {
	|                            continue;
	|                        }
	|
	|                        bool isBrowsable = false;
	|                        // найдите атрибут Browsable.
	|                        foreach (object attr in pi.GetCustomAttributes(false))
	|                        {
	|                            if (attr is System.ComponentModel.BrowsableAttribute)
	|                            {
	|                                System.ComponentModel.BrowsableAttribute ba = (System.ComponentModel.BrowsableAttribute)attr;
	|                                isBrowsable = ba.Browsable;
	|                            }
	|                        }
	|                        // пропустим не отображаемые свойства
	|                        if (!isBrowsable)
	|                        {
	|                            continue;
	|                        }
	|
	|                        string str6 = Convert.ToString(pi.GetValue(comp, null));
	|                        try
	|                        {
	|                            str6 = OneScriptFormsDesigner.ObjectConvertToString(pi.GetValue(comp, null));
	|                        }
	|                        catch { }
	|
	|                        //System.Windows.Forms.MessageBox.Show(""0valueName = "" + strDisplayName + "" =="" + ""\r\n"" +
	|                        //    ""0valueName+strValue = "" + strDisplayName + "" =="" + "" "" + str6);
	|                        if (comp.RequiredValues.Contains(strDisplayName + "" ==""))
	|                        {
	|                            la.Add(pi);
	|                        }
	|                        else if (comp.DefaultValues.Contains(strDisplayName + "" =="") &&
	|                                !comp.DefaultValues.Contains(strDisplayName + "" =="" + "" "" + str6))
	|                        {
	|                            //System.Windows.Forms.MessageBox.Show(""1valueName = "" + strDisplayName + "" =="" + ""\r\n"" +
	|                            //    ""1valueName+strValue = "" + strDisplayName + "" =="" + "" "" + str6);
	|                            la.Add(pi);
	|                        }
	|                    }
	|
	|                }
	|
	|                // добавим к свойствам родителя
	|                if (comp.GetType() == typeof(osfDesigner.ToolBarButton)) //.Tag
	|                {
	|                    comp = comp.OriginalObj;
	|                }
	|                else if (comp.GetType() == typeof(osfDesigner.DataGridTableStyle)) //AddToHashtable
	|                {
	|                    comp = OneScriptFormsDesigner.RevertOriginalObj(comp);
	|                }
	|                ////System.Reflection.PropertyInfo propertyParent = comp.GetType().GetProperty(""Parent"");
	|                ////la.Add(propertyParent);
	|                ////System.Reflection.PropertyInfo propertyName = comp.GetType().GetProperty(""Name"");
	|                ////la.Add(propertyName);
	|
	|                PropertyInfo[] properties = new PropertyInfo[la.Count];
	|                la.CopyTo(properties, 0);
	|
	|                writer1.WriteStartElement(comp.GetType().Name);
	|
	|                try
	|                {
	|                    // запишем родителя в обязательном порядке
	|                    System.Reflection.PropertyInfo propertyParent = comp.GetType().GetProperty(""Parent"");
	|                    //var value = propertyParent.GetValue(comp, null);
	|                    var value = ((System.Windows.Forms.Control)comp).Parent.Name;
	|
	|                    writer1.WriteStartElement(propertyParent.Name);
	|                    writer1.WriteAttributeString(""Type"", propertyParent.PropertyType.Name);
	|                    writer1.WriteAttributeString(""Value"", Convert.ToString(value));
	|                    writer1.WriteEndElement();
	|                }
	|                catch { }
	|                try
	|                {
	|                    // запишем имя в обязательном порядке
	|                    writer1.WriteStartElement(""Name"");
	|                    writer1.WriteAttributeString(""Type"", ""String"");
	|                    writer1.WriteAttributeString(""Value"", ((System.ComponentModel.Component)comp).Site.Name);
	|                    writer1.WriteEndElement();
	|                }
	|                catch { }
	|
	|                if (properties.Length > 0)
	|                {
	|                    foreach (var property in properties)
	|                    {
	|                        try
	|                        {
	|                            if (property.PropertyType.Name == ""MyList"")
	|                            {
	|                                osfDesigner.MyList MyList1 = (osfDesigner.MyList)comp.Images;
	|                                if (MyList1.Count > 0)
	|                                {
	|                                    for (int i2 = 0; i2 < MyList1.Count; i2++)
	|                                    {
	|                                        System.Reflection.PropertyInfo propertyPath = MyList1[i2].GetType().GetProperty(""Path"");
	|
	|                                        var value = propertyPath.GetValue(MyList1[i2], null);
	|
	|                                        writer1.WriteStartElement(propertyPath.Name);
	|                                        writer1.WriteAttributeString(""Type"", propertyPath.PropertyType.Name);
	|                                        writer1.WriteAttributeString(""Value"", Convert.ToString(value));
	|                                        writer1.WriteEndElement();
	|                                    }
	|                                }
	|                            }
	|                            else
	|                            {
	|                                var value = property.GetValue(comp, null);
	|
	|                                writer1.WriteStartElement(property.Name);
	|                                writer1.WriteAttributeString(""Type"", property.PropertyType.Name);
	|                                writer1.WriteAttributeString(""Value"", Convert.ToString(value));
	|                                writer1.WriteEndElement();
	|                            }
	|                        }
	|                        catch
	|                        {
	|                        }
	|                    }
	|                }
	|                else if (comp.GetType().IsValueType)
	|                {
	|                    writer1.WriteValue(comp.ToString());
	|                }
	|                writer1.WriteEndElement();
	|            }
	|            writer1.Close();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\Serializer.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class Program
	|    {
	|        public static IDesignerMainForm pDesignerMainForm1 = null;
	|
	|        public void Main()
	|        {
	|            // Предотвращение появления окна с текстом - Desktop applications are required to opt in to all earlier accessibility improvements to get the later improvements......
	|            var type = Type.GetType(""System.AppContext"");
	|            if (type != null)
	|            {
	|                var setSwitch = type.GetMethod(""SetSwitch"", BindingFlags.Public | BindingFlags.Static);
	|                setSwitch.Invoke(null, new object[] { ""Switch.UseLegacyAccessibilityFeatures"", false });
	|            }
	|
	|            // Можно получить путь до oscript.exe и таким способом, но нам ещё понадобится путь до OneScriptForms.dll,
	|            // поэтому воспользуемся osfDesigner.Properties.Settings, а это закомментируем пока.
	|            ////osfDesigner.Properties.Settings.Default[""osPath""] = System.Windows.Forms.Application.ExecutablePath;
	|
	|            // Создадим Форму.
	|            pDesignerMainForm f = new pDesignerMainForm();
	|            pDesignerMainForm1 = f;
	|            f.Size = new Size(1200, 800);
	|            (f.pDesignerCore as IpDesigner).AddDesignSurface<Form>(670, 600, AlignmentModeEnum.SnapLines, new Size(1, 1));
	|
	|            // Запускаем дизайнер.
	|            f.ShowDialog();
	|        }
	|
	|        public void MainPFL()
	|        {
	|            // Предотвращение появления окна с текстом - Desktop applications are required to opt in to all earlier accessibility improvements to get the later improvements......
	|            var type = Type.GetType(""System.AppContext"");
	|            if (type != null)
	|            {
	|                var setSwitch = type.GetMethod(""SetSwitch"", BindingFlags.Public | BindingFlags.Static);
	|                setSwitch.Invoke(null, new object[] { ""Switch.UseLegacyAccessibilityFeatures"", false });
	|            }
	|
	|            // Можно получить путь до oscript.exe и таким способом, но нам ещё понадобится путь до OneScriptForms.dll,
	|            // поэтому воспользуемся osfDesigner.Properties.Settings, а это закомментируем пока.
	|            ////osfDesigner.Properties.Settings.Default[""osPath""] = System.Windows.Forms.Application.ExecutablePath;
	|
	|            // Создадим Форму.
	|            pDesignerMainFormPFL f = new pDesignerMainFormPFL();
	|            pDesignerMainForm1 = f;
	|            f.Size = new Size(1200, 800);
	|            (f.pDesignerCore as IpDesigner).AddDesignSurface<Form>(670, 600, AlignmentModeEnum.SnapLines, new Size(1, 1));
	|
	|            // Запускаем дизайнер.
	|            f.ShowDialog();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\Program.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Windows.Forms;
	|using System.Drawing.Design;
	|using System.Reflection;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using osfDesigner.Properties;
	|using System.Collections.Generic;
	|using System.Text;
	|using System.IO;
	|
	|namespace osfDesigner
	|{
	|    public class pDesignerMainForm : System.Windows.Forms.Form, IDesignerMainForm
	|    {
	|        private string _version = string.Empty;
	|        public pDesigner pDesignerCore = new pDesigner();
	|        private IpDesigner IpDesignerCore = null;
	|        private IContainer components = null;
	|        private MenuStrip menuStrip1;
	|
	|        private ToolStripMenuItem _file;
	|        private ToolStripMenuItem _addForm;
	|        private ToolStripMenuItem _useSnapLines;
	|        private ToolStripMenuItem _useGrid;
	|        private ToolStripMenuItem _useGridWithoutSnapping;
	|        private ToolStripMenuItem _useNoGuides;
	|        private ToolStripMenuItem _deleteForm;
	|        private ToolStripSeparator _stripSeparator1;
	|        private ToolStripMenuItem _generateScript;
	|
	|        private ToolStripSeparator _stripSeparator2;
	|        private ToolStripMenuItem _loadForm;
	|        private ToolStripMenuItem _saveForm;
	|        private ToolStripSeparator _stripSeparator4;
	|        private ToolStripMenuItem _exit;
	|
	|        private ToolStripMenuItem _edit;
	|        private ToolStripMenuItem _unDo;
	|        private ToolStripMenuItem _reDo;
	|        private ToolStripSeparator _stripSeparator3;
	|        private ToolStripMenuItem _cut;
	|        private ToolStripMenuItem _copy;
	|        private ToolStripMenuItem _paste;
	|        private ToolStripMenuItem _delete;
	|
	|        private ToolStripMenuItem _view;
	|        private ToolStripMenuItem _form;
	|        private ToolStripMenuItem _code;
	|
	|        private ToolStripMenuItem _tools;
	|        private ToolStripMenuItem _tabOrder;
	|        private static ToolStripMenuItem _tabOrder1;
	|
	|        private ToolStripSeparator _stripSeparator5;
	|        private ToolStripMenuItem _run;
	|
	|        private ToolStripSeparator _stripSeparator6;
	|        private ToolStripMenuItem _settings;
	|
	|        private ToolStripMenuItem _help;
	|        private ToolStripMenuItem _about;
	|
	|        private System.Windows.Forms.Panel pnl4Toolbox;
	|        private System.Windows.Forms.ListBox listBox1;
	|        private System.Windows.Forms.Panel pnl4pDesigner;
	|        private System.Windows.Forms.Splitter pnl4splitter;
	|
	|        private System.Windows.Forms.PropertyGrid propertyGrid1;
	|        private System.Windows.Forms.Timer timerLoad;
	|
	|        private System.Windows.Forms.Form settingsForm;
	|        private System.Windows.Forms.TabControl tabControl;
	|        private System.Windows.Forms.TabPage tabPage1;
	|        private System.Windows.Forms.GroupBox groupBox;
	|        private System.Windows.Forms.Label label_os;
	|        private System.Windows.Forms.Label label_dll;
	|        private System.Windows.Forms.TextBox textBox_osPath;
	|        private System.Windows.Forms.TextBox textBox_dllPath;
	|        private System.Windows.Forms.Button button_osPath;
	|        private System.Windows.Forms.Button button_dllPath;
	|        private System.Windows.Forms.Button buttonOK;
	|        private System.Windows.Forms.Button buttonCancel;
	|
	|        private void timerLoad_Tick(object sender, EventArgs e)
	|        {
	|            timerLoad.Stop();
	|            try
	|            {
	|                // Через try, потому что, при загрузке, элемент управления не завершил создание самого себя: 
	|                Application.AddMessageFilter(new PropertyGridMessageFilter(propertyGrid1.GetChildAtPoint(new Point(40, 40)), new MouseEventHandler(propGridView_MouseUp)));
	|            }
	|            catch { }
	|        }
	|
	|        private void propGridView_MouseUp(object sender, MouseEventArgs e)
	|        {
	|            if (e.Button == System.Windows.Forms.MouseButtons.Left && (
	|                propertyGrid1.SelectedGridItem.Label == ""СписокИзображений"" ||
	|                propertyGrid1.SelectedGridItem.Label == ""СписокБольшихИзображений"" ||
	|                propertyGrid1.SelectedGridItem.Label == ""СписокМаленькихИзображений"" ||
	|                propertyGrid1.SelectedGridItem.Label == ""DoubleBuffered""))
	|            {
	|                // Пользователь щелкнул левой кнопкой мыши по свойству, чтобы увидеть контекстное меню.
	|                try
	|                {
	|                    propertyGrid1.SelectedGridItem.Expanded = false;
	|                }
	|                catch { }
	|            }
	|        }
	|
	|        public pDesignerMainForm()
	|        {
	|            ComponentResourceManager resources = new ComponentResourceManager(typeof(pDesignerMainForm));
	|            propertyGrid1 = pDesigner.DSME.PropertyGridHost.PropertyGrid;
	|            this.menuStrip1 = new MenuStrip();
	|            this._file = new ToolStripMenuItem();
	|            this._addForm = new ToolStripMenuItem();
	|            this._useSnapLines = new ToolStripMenuItem();
	|            this._useGrid = new ToolStripMenuItem();
	|            this._useGridWithoutSnapping = new ToolStripMenuItem();
	|            this._useNoGuides = new ToolStripMenuItem();
	|            this._deleteForm = new ToolStripMenuItem();
	|            this._stripSeparator1 = new ToolStripSeparator();
	|            this._generateScript = new ToolStripMenuItem();
	|            this._stripSeparator2 = new ToolStripSeparator();
	|            this._loadForm = new ToolStripMenuItem();
	|            this._saveForm = new ToolStripMenuItem();
	|            this._stripSeparator4 = new ToolStripSeparator();
	|            this._exit = new ToolStripMenuItem();
	|
	|            this._edit = new ToolStripMenuItem();
	|            this._unDo = new ToolStripMenuItem();
	|            this._reDo = new ToolStripMenuItem();
	|            this._stripSeparator3 = new ToolStripSeparator();
	|            this._cut = new ToolStripMenuItem();
	|            this._copy = new ToolStripMenuItem();
	|            this._paste = new ToolStripMenuItem();
	|            this._delete = new ToolStripMenuItem();
	|
	|            this._view = new ToolStripMenuItem();
	|            this._form = new ToolStripMenuItem();
	|            this._code = new ToolStripMenuItem();
	|
	|            this._tools = new ToolStripMenuItem();
	|            this._tabOrder = new ToolStripMenuItem();
	|            _tabOrder1 = this._tabOrder;
	|
	|            this._stripSeparator5 = new ToolStripSeparator();
	|            this._run = new ToolStripMenuItem();
	|
	|            this._stripSeparator6 = new ToolStripSeparator();
	|            this._settings = new ToolStripMenuItem();
	|
	|            this._help = new ToolStripMenuItem();
	|            this._about = new ToolStripMenuItem();
	|            this.pnl4Toolbox = new System.Windows.Forms.Panel();
	|            this.listBox1 = new System.Windows.Forms.ListBox();
	|            this.pnl4pDesigner = new System.Windows.Forms.Panel();
	|            this.pnl4splitter = new System.Windows.Forms.Splitter();
	|            this.menuStrip1.SuspendLayout();
	|            this.pnl4Toolbox.SuspendLayout();
	|            this.SuspendLayout();
	|            // 
	|            // menuStrip1
	|            // 
	|            this.menuStrip1.ImageScalingSize = new Size(20, 20);
	|            this.menuStrip1.Items.AddRange(new ToolStripItem[] {
	|            this._file,
	|            this._edit,
	|            this._view,
	|            this._tools,
	|            this._help});
	|            this.menuStrip1.Location = new Point(0, 0);
	|            this.menuStrip1.Padding = new System.Windows.Forms.Padding(8, 2, 0, 2);
	|            this.menuStrip1.TabIndex = 1;
	|            this.menuStrip1.Text = ""menuStrip1"";
	|            // 
	|            // _file
	|            // 
	|            this._file.DropDownItems.AddRange(new ToolStripItem[] {
	|            this._addForm,
	|            this._deleteForm,
	|            this._stripSeparator1,
	|            this._generateScript,
	|            this._stripSeparator2,
	|            this._loadForm,
	|            this._saveForm,
	|            this._stripSeparator4,
	|            this._exit});
	|            this._file.Name = ""_file"";
	|            this._file.Size = new Size(54, 24);
	|            this._file.Text = ""Файл"";
	|            // 
	|            // _addForm
	|            // 
	|            this._addForm.DropDownItems.AddRange(new ToolStripItem[] {
	|            this._useSnapLines,
	|            this._useGrid,
	|            this._useGridWithoutSnapping,
	|            this._useNoGuides});
	|            string str_addForm = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABR0lEQVR42u3avQ/BQBgGcBcEia2LSESE1WK3+p/tdoNuxcBgsxJKPTc0/ZBe2lzPfXjf5Fxocvf8KqmrK2s4Ukx3AIIIIJHuMDIG/tJBu+tOI1ldDkl/Exx0052qZPU4IH7DIQHaTHcqyQo45InW0p1EskIOCdGaupNI1osghhVBTKsviG1Llvg3kCCmFEHqTHDOf4bJR1ZBouJbhgOrtu4zFnJCgDFBSkBk7x4z4xKEIIrqHyBXBPCMgUTq/lp6s+xKXR0EI6/RrRRBePkIOf8FZI9uqhCyQcilC5AtQi5cgBxZMr5SyAXdQCEkfYlWftXy0Q0LDrfR+gXHHmg7wdAeAk6yU1WDlL2cljoRNi1RhCCbIELYPyxRCEIQgggwrPr8+iH1nY8Ekt56sxUS5nd1bcJkcju1Pe3MAwNxWf8IhxNFENPqA2/lwIZlxdeeAAAAAElFTkSuQmCC"";
	|            this._addForm.Image = OneScriptFormsDesigner.Base64ToImage(str_addForm);
	|            this._addForm.Name = ""_addForm"";
	|            this._addForm.Size = new Size(221, 26);
	|            this._addForm.Text = ""Добавить Форму"";
	|            // 
	|            // _useSnapLines
	|            // 
	|            string str_useSnapLines = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAd0lEQVR42u3YSw7AIAgFwHr/Q7er7uuvoM7bC0xiSLRcm6RED5ARckfOCgKyIKS3dlU9EBAQkO7GowMCsjokNCCVea9dS79PZ0FAQEBAQEBAQEDSQKbnCMjsp+vIWUFAMkD+XgzDvkxBQEAOhUQHBCQbZKlsA3kAIttEM9KSwFkAAAAASUVORK5CYII="";
	|            this._useSnapLines.Image = OneScriptFormsDesigner.Base64ToImage(str_useSnapLines);
	|            this._useSnapLines.Text = ""Использовать линии привязки"";
	|            this._useSnapLines.Click += _useSnapLines_Click;
	|            // 
	|            // _useGrid
	|            // 
	|            string str_useGrid = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAf0lEQVR42u3UsRGAMBDEQNwX5dMXkDvgM3Q30oyzC7zJr6Ok9fcHhHxA7iEUt0uFXO87GyDbrhYSmxBaQmjVQnBndboTQtvVQmITQksIrVoI7qxOd0Jou1pIbEJoCaFVC8Gd1elOCG1XC4lNCC0htGohuLM63Qmh7WohsQmh9QCKkWUzuKisgQAAAABJRU5ErkJggg=="";
	|            this._useGrid.Image = OneScriptFormsDesigner.Base64ToImage(str_useGrid);
	|            this._useGrid.Text = ""Использовать сетку"";
	|            this._useGrid.Click += _useGrid_Click;
	|            // 
	|            // _useGridWithoutSnapping
	|            // 
	|            this._useGridWithoutSnapping.Text = ""Использовать сетку без привязки"";
	|            this._useGridWithoutSnapping.Click += _useGridWithoutSnapping_Click;
	|            // 
	|            // _useNoGuides
	|            // 
	|            this._useNoGuides.Name = ""_useNoGuides"";
	|            this._useNoGuides.Size = new Size(316, 26);
	|            this._useNoGuides.Text = ""Не использовать ориентиры"";
	|            this._useNoGuides.Click += _useNoGuides_Click;
	|            // 
	|            // _deleteForm
	|            // 
	|            string str_deleteForm = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABLklEQVR42u2asQrCMBCGDSoquLmIi4iuLu6uvrO7u4PdKg4uPoKi1XoHVlultTVc7xrvg2soheT/KCVpU1NzBMMdQEUyRELuMDYOeGhBnbjTWNJGkfidQKEjd6qcdFAgOkERH2rCncoSH0UuUA3uJJYEKBJA1bmTWHJVEWGoiDQ+RKq2ZInmQBWRgopIQ0Wk8b8i3G+P33KpSJHBKPnfZ0QqtCIh3TN1M8mVOp0I9LyEZkEkgngQclqGyBaaMaHICkLOXRBZQ8iZCyI78+qfVOQATZ9QZA8hh+Qij949aAYpl5tQ3ZRrZ6hNRtc9CDhKDlVMxJmZPe+8ULYM6aKxTBldokhDRaShItJIiMS33qoqErzv6lZJJpHbqe1pZ34YiOD+dvUrz184nEBFpHEHIdCPhqDjZfIAAAAASUVORK5CYII="";
	|            this._deleteForm.Image = OneScriptFormsDesigner.Base64ToImage(str_deleteForm);
	|            this._deleteForm.Name = ""_deleteForm"";
	|            this._deleteForm.Size = new Size(221, 26);
	|            this._deleteForm.Text = ""Удалить Форму"";
	|            this._deleteForm.Click += _deleteForm_Click;
	|            // 
	|            // _stripSeparator1
	|            // 
	|            this._stripSeparator1.Name = ""_stripSeparator1"";
	|            // 
	|            // _generateScript
	|            // 
	|            string str_generateScript = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABzklEQVR42u2aMU7DMBSGn+NCGRjgDjAxInEIxMgtWBiYGEoAqQsgWLgFEyBAcAMkkBhYgDtQRJFomzTYQBzjkiZO4jiO/A+VWjkv/xf7vby4QRApALOE2IeB5hkE4s0f3fZQjmClaX2pyTwzAFPMixAWwAKoAjg+f6lUZVpbmfvjTxqg++mPBJ2ewvUBEE+gWoUvoeedBURiVAcgQ0CwAKoAqLnfMZA0hspV1FvNcB6VzAAPcHdxEju26c9CD79KxV9cXpUDkElimsD89ySALKIAbtQ9Q+i7EABaQvll1iFX5+n6Bt69NwtQOgAVOVHwcHYFHu7qA+DFm+PFVyWZJC4dII1qB1CpJSQDECax9hnIW4WMBaByq5ADFkA3gKwqlwNGA8TdedPK1b2EagEw33qMTWKx/68lwP3pJQSNDz0AVOPKaNIeUOWfB0SADrdfX4T+W35KyygFODhsgz8cst+8YEACp+NCnK/NjW09ALt7LQLgZzp+EjcsQG6A9v4W9H3PAmgFAHAIRF/6eOw4gJEzFkJ5MxdB/Eh2NiYwjq1G4bai0OIU/x9Z0feDUOGeqHKAvE2gpGoGUAREGQD0gUl81YDRGCg0UpYM0rf3L8g8IyNDfeOmAAAAAElFTkSuQmCC"";
	|            this._generateScript.Image = OneScriptFormsDesigner.Base64ToImage(str_generateScript);
	|            this._generateScript.Name = ""_generateScript"";
	|            this._generateScript.Size = new Size(221, 26);
	|            this._generateScript.Text = ""Сформировать сценарий"";
	|            this._generateScript.Click += _generateScript_Click;
	|            // 
	|            // _stripSeparator2
	|            // 
	|            this._stripSeparator2.Name = ""_stripSeparator2"";
	|            // 
	|            // _loadForm
	|            // 
	|            string str_loadForm = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAA/klEQVR42u3Z0QqDMAwFUDO2vez/f3UwN+iqOKE2qdUVe2NzoS/6kmMMVEvdSUK1CzBIAuI0P4ihkLtfr0IPoypkTyfgMBHEZRRFMf7h1xMGkoNIYI6otTwEADPMdl8EAoAJLv4FOaBix19WBNmCgYdMRRpEailixt0JC1GECDRtQdDmZzk3WRA0BIeJIBq6sQuCijAIWlaHnRTORzc1wIX38bthEMScAsLthsXfQagIBjLvRgxiEIPIn70ShFC/qhaQy69+FoLaDQYS/GNQsbdqE6IMYZDqkV4rgwAgGoGgYoRTsTRESdLHCorCQq5+vWtXtiE3vz6rMq0xCFq+0/uOMfSQbkgAAAAASUVORK5CYII="";
	|            this._loadForm.Image = OneScriptFormsDesigner.Base64ToImage(str_loadForm);
	|            this._loadForm.Name = ""_loadForm"";
	|            this._loadForm.Text = ""Открыть форму"";
	|            this._loadForm.Click += _loadForm_Click;
	|            // 
	|            // _saveForm
	|            // 
	|            string str_saveForm = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABBUlEQVR42u3awQ6CMBAEUPai/v/f6qXCgYTAbruF0p3qTMIBgW1fS4RYZfqRSHQHCKmAJNB+uS94zNs7ELHmOW+fK5DImTiN2UPSbkeUC5J17GpEH0QXxoRYHQ2ALHlNhdu9O0Tr7FprW1s5LzszsBDjXHNmwiDbUbcgNRh4iBczBMTAiLmDDClhhoIomHjIrlFCwiAeZFdIa4y3bjOIUqxpSoPTFHIXxjPDzSFRIQQthKBliG+tE+3iPkcq28Z7sntrD/Gu5alPCCGEEEIIIYQQohTuDSksNfwhpNTQ3RDruBtiFYuE1Pwaf8AAJ7s+sgTlDwO5HBZGc7cH6syI+8MRQwhavjI5HUJUEs5VAAAAAElFTkSuQmCC"";
	|            this._saveForm.Image = OneScriptFormsDesigner.Base64ToImage(str_saveForm);
	|            this._saveForm.Name = ""_saveForm"";
	|            this._saveForm.Text = ""Сохранить форму"";
	|            this._saveForm.Click += _saveForm_Click;
	|            // 
	|            // _stripSeparator4
	|            // 
	|            this._stripSeparator4.Name = ""_stripSeparator4"";
	|            // 
	|            // _exit
	|            // 
	|            this._exit.Name = ""_exit"";
	|            this._exit.Text = ""Выход"";
	|            this._exit.Click += _exit_Click;
	|            // 
	|            // _edit
	|            // 
	|            this._edit.DropDownItems.AddRange(new ToolStripItem[] {
	|            this._unDo,
	|            this._reDo,
	|            this._stripSeparator3,
	|            this._cut,
	|            this._copy,
	|            this._paste,
	|            this._delete});
	|            this._edit.Name = ""_edit"";
	|            this._edit.Size = new Size(69, 24);
	|            this._edit.Text = ""Правка"";
	|            // 
	|            // _unDo
	|            // 
	|            string str_unDo = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAA2klEQVR42u3YSw6AIAwEULz/oTGamBAjyqdlZky7YSfzRH5uOWnXFoAABMDoQSnlfDaCgCP80UoCrvCSgDK8HOAeXgrwFF4GUAsvAXgLTw/4Ck8NaAk/WrPoT4BneAvIK2BV+BlIFYAIP4KgBPQg6D6hXgTNJHYDsCNgG1nrSzEDtHTavQQaIOCHudmRpThOz4wsxYUGAnjqWA5w71wSUAaQmcS1IBLLqFVBNjLvsL8DmB3mAjAAMLnQoAAmV0oUwOxSvxrg8ltlBcD9xxZ7BQBdAUBXANAlD9gBBDWIAQ4VHAYAAAAASUVORK5CYII="";
	|            this._unDo.Image = OneScriptFormsDesigner.Base64ToImage(str_unDo);
	|            this._unDo.Name = ""_unDo"";
	|            this._unDo.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Z)));
	|            this._unDo.Size = new Size(212, 26);
	|            this._unDo.Text = ""Отменить"";
	|            this._unDo.Click += _unDo_Click;
	|            // 
	|            // _reDo
	|            // 
	|            string str_reDo = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAA10lEQVR42u3YSw7EIAwDUHr/QzOaXqD52IkjJRt21A+JEnjumV3PAhawgIaPnnPvOwwG/EcEohWAQLQDsggJQAYhA4gipAARhBzAi5AEeBBpgCVMtCyIMIAZ3INwA6qCWxEuQEf4L4QZ0Bk+DVANPwKQ3sTK4aEA1+lZdZAxwlvmhbUSyJWyzgtt5pArZZkX3k5XAigXmioA7UpZAaBe6tmbmP6swvyNlj1ssRCoorYSFShqM7cAFCCKkAJEEHIAL0IS4IFIAyyQEYDuWkB3LaC7FtBd4wE/1ESIAWn6qDIAAAAASUVORK5CYII="";
	|            this._reDo.Image = OneScriptFormsDesigner.Base64ToImage(str_reDo);
	|            this._reDo.Name = ""_reDo"";
	|            this._reDo.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.Y)));
	|            this._reDo.Size = new Size(212, 26);
	|            this._reDo.Text = ""Вернуть"";
	|            this._reDo.Click += _reDo_Click;
	|            // 
	|            // _stripSeparator3
	|            // 
	|            this._stripSeparator3.Name = ""_stripSeparator3"";
	|            // 
	|            // _cut
	|            // 
	|            string str_cut = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABNUlEQVR42u2Y0Q7CIAxF4f8/ekYjZpmU3sItlIS+OTI9BxDa5ivtHfkIHIEjsHc0BXJK1eHrMxQjqgISeESRPwEUPooEJHCHfI6HF6gBektokwgLiC/9hnkCyNatTmYEgZFDY+kWshwY8BbSACPBiwKWH7AKsMBVAQ8JNrwqwBLxADcJWECeAJ7wZgEEqkDMSkm60+nWbTkznxqqB2qXnveWoQoU4Br8+9mMeoJWkQmr8f3IB6cKSP+H8vy+QvTMlbGFWuPS9goh0APPlqAeoyg8U8QsYLmNZzQHYIHuislZQhVgACxJ5jxmzuU7Zze23AsarWRklJRMiS2KelNNDLZVaI2t0dVYLmARcekLUfMaoNIbFgjf3NVmIhK8KIBIRIBvCrREosBDAtHjCKyOI7A6thd4ARhzzAEzNxSrAAAAAElFTkSuQmCC"";
	|            this._cut.Image = OneScriptFormsDesigner.Base64ToImage(str_cut);
	|            this._cut.ImageTransparentColor = Color.Magenta;
	|            this._cut.Name = ""_cut"";
	|            this._cut.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.X)));
	|            this._cut.Size = new Size(212, 26);
	|            this._cut.Text = ""Вырезать"";
	|            this._cut.Click += OnMenuClick;
	|            // 
	|            // _copy
	|            // 
	|            string str_copy = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABOElEQVR42u3WrQ7CMBAH8DUIBAaD4AnAYtCEZ8DxEih4BhwejeMZCBoECRiQ6CUEMwghY7AlJCPpPq7tbddwfzOxNe2vubtMOJZHlH0ABqS8CwrYwwoAKiIT0F94oM1Xw1q0buf6otOoxC8BBYEGOHsvcbkFDjYCFRA+sRHoAGxEIQBMRGEALIQRwPfQBgIGUQOAEUYBs80DtPmoW43WHa++aNfVSosEIOyX+zNwVBBkAOFTBQECZNW6LkAFQQ4ARZAqIRUEWYAEoQ84rLfSD915TwuQMwww3sRAJC3A52Cy9bgASAkByyPxIhiAOUbzhAGqTTxdnnIfcjJo0QPIpkxW0KdQUmQlBGnitNJjgAbAaY73eQ0/ifcEAyAhOUZtBkBC8lfivwGmwgAG2ARADgNIhgFlx3rAG9GomUA3I+5MAAAAAElFTkSuQmCC"";
	|            this._copy.Image = OneScriptFormsDesigner.Base64ToImage(str_copy);
	|            this._copy.ImageTransparentColor = Color.Magenta;
	|            this._copy.Name = ""_copy"";
	|            this._copy.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.C)));
	|            this._copy.Size = new Size(212, 26);
	|            this._copy.Text = ""Копировать"";
	|            this._copy.Click += OnMenuClick;
	|            // 
	|            // _paste
	|            // 
	|            string str_paste = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABIklEQVR42u3awQnCMBQG4OTkFL07gY6Rg6eCriAFcQoRiiso9CbFKcQNvIpLeHoWaaGWtEmapH2h77/12b68DxPxUM4CDx97ADSAY5ZHu1i86rX0fJsnG/FED5ANX+V0uUbb9eqNGsAYQK0lb6+hBzQHbasPC4DOy/92LQCtpXshVQ+BVqmBOGT5ch+Le4+ljRFdD4BR2Tjc+AMrAAD87i02iRNBsbnKfrzZzz2gGt4HQILwDeCs+3BqLcuh1mJQgI8QgAAEGBkg+S334vQKSB8fb99SspgBAQhAAAJMCFAuaBVJPwJoA1yHAAQIDWB6iFV4AkxuCxGAAJaA4P9KBA9wHWuAChEEQBWMACMEVoA2AjNAJyjPwLQAvoZXzRr82ypful5dQCOEOe0AAAAASUVORK5CYII="";
	|            this._paste.Image = OneScriptFormsDesigner.Base64ToImage(str_paste);
	|            this._paste.ImageTransparentColor = Color.Magenta;
	|            this._paste.Name = ""_paste"";
	|            this._paste.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.V)));
	|            this._paste.Size = new Size(212, 26);
	|            this._paste.Text = ""Вставить"";
	|            this._paste.Click += OnMenuClick;
	|            // 
	|            // _delete
	|            // 
	|            string str_delete = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAABmJLR0QA/wD/AP+gvaeTAAACJUlEQVRoge2YvW/TQBiHn7sjY9UFiSIYOjSiVGyt5HYAUkLyR0NVRwgJkBiRGGAEqaIsSQZKFfsYiFFUXXJ3vtdIiHtG34d/j+9svzZkMplMJhPIfFgcTEdFv6v5p4OTvfmwOIgZo0M7zsaH+wp7Zmr7av78+GF8vM1MR0XfmGqisOV8fPQodJwK6TQbH+7rypwDd5eHLqzSz7bO3n5sE/Ym01HRN7UtgXvLQ9+sqYdbL95/8I31CjjCN4hIOMI3BEl4t1DvuncF/HQ07Shbn6dspw3hAWrqW5VvjqAt9GNwvFuZugR2Hc2tVsITPnjOIAGQlZAKDxECICMhGR4iBSBNQjo8tBCAdhJdhIeWAhAn0VV4SBCAMIla2UVX4SFRADwSikssNXDHMVTkRZgsAN6VcCFWiogIQJSEaB0lJgC/JRamfq3c+x0L31H6iVR4iCinQ7ju2Z62mHXtoldriZhA86i0ip0N3W6nFoA3Ebkonue8C7H7IHkFNoa3XAIXjmHJpXhDkoD3Dav106oyj4EvjnYRidZbKKY8mA5O9oypSuC+r28srQTa1DZdSUQLpBRmXUhECUhUlUuJScocqwTfxFIl8fbkzedKq1Pgq6M5+sYOWoEu6vm/9lHf5ceIxNzeLaQWlV7TL/ltuv3y3acN20mjF2vrqj/5Qk40Oz16oLUu+Rd/LTasSCjJ8A0rEr3Q8NF0/nt9VPRjf69nMplM5v/mF/i6x8b172ZWAAAAAElFTkSuQmCC"";
	|            this._delete.Image = OneScriptFormsDesigner.Base64ToImage(str_delete);
	|            this._delete.Name = ""_delete"";
	|            this._delete.ShortcutKeys = System.Windows.Forms.Keys.Delete;
	|            this._delete.Size = new Size(212, 26);
	|            this._delete.Text = ""Удалить"";
	|            this._delete.Click += OnMenuClick;
	|            // 
	|            // _view
	|            // 
	|            this._view.DropDownItems.AddRange(new ToolStripItem[] {
	|            this._form,
	|            this._code});
	|            this._view.Name = ""_view"";
	|            this._view.Size = new Size(50, 24);
	|            this._view.Text = ""Вид"";
	|            // 
	|            // _form
	|            // 
	|            string str_form = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAA1klEQVR42u3a4QqCMBQF4EaB9R69/wv5IAktavfHYippebVzdz0HJvhjcj5EpsxwcJKALkDIBOSJLqMxyKFJo0O3UeYskPJOCOiGbvVlLgLIJwJp07iiWynTCuSexgndRJkokJjGEd1EmQchxkKItYwgtb2y5DWQECshxFr2C0F/q8z1IoQQQlaCWA0hP119iwwKbgf5x8NUlCSEEEJQkDlMWDjvw/z9ruyEEELI9ASrIcRafELKrbdaIXG4q1sTptfb1fa0mx8GctCL3tK8f+FwEUKs5QXoOIWG//RH0wAAAABJRU5ErkJggg=="";
	|            this._form.Image = OneScriptFormsDesigner.Base64ToImage(str_form);
	|            this._form.Name = ""_form"";
	|            this._form.Size = new Size(50, 24);
	|            this._form.Text = ""Форма"";
	|            this._form.Click += _form_Click;
	|            this._form.Enabled = false;
	|            this._form.CheckState = System.Windows.Forms.CheckState.Checked;
	|            // 
	|            // _code
	|            // 
	|            string str_code = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAAAvElEQVR42u3WQQqDMBSE4eQ2FWk3Hsoz9VBd6cLb6BNcdSE1IWby+g8ICYjOpz4wru8heEj8C0gcP+sNHSbr8PIA2bNYj644xM6JJdp/PagsjApkseMRMj4zCch+fVvPtuxD4puRgRz7ZIwUJAcjB0nFSEJSMLKQqxgJyI+ZrcfTA+S0R1XIVTAQIC1BSv3in90LCJCWIHcGCJAWIW6GHQgQhh0IkCoQN8MOBAjDDgQIECBAKkNUAqSluIFsV0sN9+kjczYAAAAASUVORK5CYII="";
	|            this._code.Image = OneScriptFormsDesigner.Base64ToImage(str_code);
	|            this._code.Name = ""_code"";
	|            this._code.Size = new Size(50, 24);
	|            this._code.Text = ""Скрипт"";
	|            this._code.Click += _code_Click;
	|            this._code.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            // 
	|            // _tools
	|            // 
	|            this._tools.DropDownItems.AddRange(new ToolStripItem[] {
	|            this._tabOrder,
	|            this._stripSeparator5,
	|            this._run,
	|            this._stripSeparator6,
	|            this._settings});
	|            this._tools.Name = ""_tools"";
	|            this._tools.Size = new Size(113, 24);
	|            this._tools.Text = ""Инструменты"";
	|            // 
	|            // _tabOrder
	|            // 
	|            string str_tabOrder = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAA3ElEQVR42u3ZSw6AIAwEULj/oTExcdOApjD9menWiPOiQNU+Wu3qaEBvbXvIcZ8eCDgJv4v4BMhQqwsgwsMBq1DyIqjwIQBkeAJ2AGgEJ/FbuK/BUy6jGsApwmwj0wC8awqYpBzrQ9jS3j4CCLAATEC1JjEBlQHo5u6pZQuTrZXQItI1c1BARDvtDvAKT8DbQGkfoVm4UpNYhiu5jGoAlgiXjSyiCIiu/wJE0npvZAQQcAgQGPONbHeBSNVKmHwb9Wzm4ADvdjoEEPl3hgA0gpP4tFIuo14I040sc11VMcAB84B/6gAAAABJRU5ErkJggg=="";
	|            this._tabOrder.Image = OneScriptFormsDesigner.Base64ToImage(str_tabOrder);
	|            this._tabOrder.Name = ""_tabOrder"";
	|            this._tabOrder.Size = new Size(217, 26);
	|            this._tabOrder.Text = ""Порядок обхода"";
	|            this._tabOrder.Click += _tabOrder_Click;
	|            // 
	|            // _stripSeparator5
	|            // 
	|            this._stripSeparator5.Name = ""_stripSeparator5"";
	|            // 
	|            // _run
	|            // 
	|            string str_run = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABkUlEQVR42t3Z0Q7CIAwFUPv/H42JmWYD2t4WCkUejDrAHjsGbPT6k0K7AwBL0RyZIVrw6SEWQEoIDyjVoTbsFBAcwIe+FeIDJIO0kSLBJ4OMIxJAnhF7AB3E7+UoxGaIjPgGZh/kSyE8gjuzDZfd5s1mBDX1exgmG9EQ7HRqYygghP+QAMFjhGxEQfR5Yhwiq5YgdIw5G7MhthnbMthJP4tmQXzLDuTyC2QDhdinYO8CENh3sF1sR2g4MFbp4DEIqYK+wKt/bCOCq3QcoldxD4LGr6g2SFKEDpFKIoTUSI4yGQJtOG+LGoSwNJY3PJsR6yFBiLWQQATa0ey7gtMRSGflLnlURjHkXrDGQcwYci9Y4yEwprcKAHZ6URAfhlvKrIaUK26q9tIFadx0Ztt7T4OUKt4hjJypOEhh1lgSJh2kl4n7dzVG+EOQWzoxEA2hYPhdZn+QT0d8OkQywWRGKtIEE3K/WQ1aGPweSNjdf5IGuBPBYUKfxbBjYRBRQ8KfjLEZGUQsLyrkBMQVJzQRpi9vUR3TM0g50FMAAAAASUVORK5CYII="";
	|            this._run.Image = OneScriptFormsDesigner.Base64ToImage(str_run);
	|            this._run.Name = ""_run"";
	|            this._run.Text = ""Запуск"";
	|            this._run.Click += _run_Click;
	|            this._run.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.F6)));
	|            this._run.ShowShortcutKeys = true;
	|            // 
	|            // _stripSeparator6
	|            // 
	|            this._stripSeparator6.Name = ""_stripSeparator6"";
	|            // 
	|            // _settings
	|            // 
	|            string str_settings = ""iVBORw0KGgoAAAANSUhEUgAAADIAAAAyCAYAAAAeP4ixAAABI0lEQVR42u3YwQ6EMAgEUP3/j3aTPRhFaGkLOLNZrqKZp9JY92P7jdr/kKgA29aNcHzbQCEeADTEAlzDXns8iHKIhpBBZxClEInQQs4iXoNEI8og2YhySCRCXjMd0gq6iqCGWItGGSTitWot3zQQ2fvajFhBPRh1JpCGXR7Xeqzz4SAaRisLCAXpYTxPCQZigbyLRCrEEyrqxqRBKhFpkGxECeQNRDhkBNHbLXq2xCmQVUSvup8wEZBMRNnPhxVExPyEQFAQSxAkxDQEDTEFQUQMQ1ARQxBkhBuCjnBBGBBdCAuiCWFCmBA2hAphRDwgrIgbhBlxQtgRKoQRMQRBRpwQGbT1ixIRYUKuYRkQN4gWWhYq4gFpYZARKkQDoSOaELb6AFfXABC6bvmCAAAAAElFTkSuQmCC"";
	|            this._settings.Image = OneScriptFormsDesigner.Base64ToImage(str_settings);
	|            this._settings.Name = ""_settings"";
	|            this._settings.Text = ""Параметры"";
	|            this._settings.Click += _settings_Click;
	|            // 
	|            // _help
	|            // 
	|            this._help.DropDownItems.AddRange(new ToolStripItem[] { this._about });
	|            this._help.Name = ""_help"";
	|            this._help.Size = new Size(77, 24);
	|            this._help.Text = ""Помощь"";
	|            // 
	|            // _about
	|            // 
	|            string str_about = ""iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAABCklEQVR42u3WwRKDIAyE4fLmvjntpRenSDbZTaBDzo7+n4NCu157TzuAA1gE8LlPB69vSwDQcDbGDWCEMyAwQBEeQUAAdbwHYQZkxaMIEyA7HkFMAVXxVsQjwBvfBw9tzvs9IaiAbl23xE1vCFDFsxEUABrvQUCAjHgUMEJIAd9AyzU0ABL/FHcPY/2Z7ogwYBS3FcCL3AbA3NjSAawPuATAjk8FKOKXAETi0wCq+FIAI/4AVpgpYGXEpTiN/hrVEjIDIois////A7yIjOODFDBCKN7+FMBCqOJNgAgiOrN4M6ACYYmHAJkIazwMyEAg8S6ACoKGhwEsiDecBvBCouF0QNUcQPVsD3gDeqycMcHL1j4AAAAASUVORK5CYII="";
	|            this._about.Image = OneScriptFormsDesigner.Base64ToImage(str_about);
	|            this._about.Name = ""_about"";
	|            this._about.Size = new Size(187, 26);
	|            this._about.Text = ""О программе..."";
	|            this._about.Click += _about_Click;
	|            // 
	|            // pnl4Toolbox
	|            // 
	|            this.pnl4Toolbox.BorderStyle = System.Windows.Forms.BorderStyle.Fixed3D;
	|            this.pnl4Toolbox.Controls.Add(this.listBox1);
	|            this.pnl4Toolbox.Dock = System.Windows.Forms.DockStyle.Left;
	|            this.pnl4Toolbox.Location = new Point(0, 26);
	|            this.pnl4Toolbox.Name = ""pnl4Toolbox"";
	|            this.pnl4Toolbox.Size = new Size(163, 489);
	|            this.pnl4Toolbox.TabIndex = 2;
	|            // 
	|            // listBox1
	|            // 
	|            this.listBox1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.listBox1.FormattingEnabled = true;
	|            this.listBox1.ItemHeight = 16;
	|            this.listBox1.Location = new Point(0, 0);
	|            this.listBox1.Name = ""listBox1"";
	|            this.listBox1.Size = new Size(159, 485);
	|            this.listBox1.TabIndex = 0;
	|            // 
	|            // pnl4pDesigner
	|            // 
	|            this.pnl4pDesigner.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.pnl4pDesigner.Location = new Point(163, 26);
	|            this.pnl4pDesigner.Name = ""pnl4pDesigner"";
	|            this.pnl4pDesigner.Size = new Size(726, 489);
	|            this.pnl4pDesigner.TabIndex = 3;
	|            // 
	|            // pnl4splitter
	|            // 
	|            this.pnl4splitter.BackColor = Color.LightSteelBlue;
	|            this.pnl4splitter.Location = new Point(163, 26);
	|            this.pnl4splitter.Name = ""pnl4splitter"";
	|            this.pnl4splitter.Size = new Size(5, 489);
	|            this.pnl4splitter.TabIndex = 4;
	|            this.pnl4splitter.TabStop = false;
	|            // 
	|            // pDesignerMainForm
	|            // 
	|            this.AutoScaleDimensions = new SizeF(8F, 16F);
	|            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	|            this.ClientSize = new Size(889, 515);
	|            this.Controls.Add(this.pnl4splitter);
	|            this.Controls.Add(this.pnl4pDesigner);
	|            this.Controls.Add(this.pnl4Toolbox);
	|            this.Controls.Add(this.menuStrip1);
	|            string str_Icon = ""AAABAAEAAAAQAAEABABooAAAFgAAACgйQAAAAIAAAEABйAAKййAAEййAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8ккккккккккккккккккккккккккккккккккккккккккйййййAAAеееец////8ййAAAееееццййAAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPееццццййDец/////8ййAеецццц8ййPец/////wййDееццццwййеццййAPее//8Aццц//ййDццц/8Pцццц//8ййAее//8AAP8йййййPAAAADцц/8ADцццц//wййDгкййAAAP8AAAD/ййAAAADwйй8AAAAADц/////8AAAцццц//ййAPццц/wкййAAAP8AAAAA/wййAAAPййDwйц////8AAAAPцццц8ййAццц/wкййAAAP8йP8ййAAA8ййP/wAAAADц///8AAAAADццццwййDццц/кййAAAP8йAD/ййD//wййAP//AAAAц//8йAццццййAPцццкййAAAP8йAAA/wйAAD///ййй//AADц/8йAAPг/8ййAццц8кййAAP8йAAAAP8йA//йййAAAA//8Pц8йAAADг/wййDцццwкййAP8йAAAAAD/AAAAD//wййййDц/8йAAAAAг/ййAPцццкййAP8ййA/wAA//ййййAAAAD/////8ййPццц//8ййAццц8кййP8ййAAP///wййййй////8ййADццц//wййDцццwйDе/////8ййAAAD//wйййййAA//8ййAAAццц//ййAPцццйDе/////8ййAAAAA8йййййAAAAA8ййAAAAPццц8ййAццц8йPе/////wкйййййAAAAццц/wййDцццwйец8кйййййAAAццц//ййAPцццйDец/кйййййAAццц//8ййAццц8йPец/wкйййййгwййDцццwйец//8кййййAAAAAг/ййAPцццйDец///кййййAAAAг/8ййAццц8йPец///wкййййAAг//wййDцццwйец////8кййййAццццййAPцццйDец/////кййййцццц8ййAццц8йPец/////wкйййAAAAцццц/wййDцццwйецц8кйййAAAцццц//ййAPцццйDецц/кйййAAцццц//8ййAццц8йPецц/wкйййцгwййDцццwйецц//кйййDцгййAPцццйDецц/8кйййAцццц//8ййAццц8йPецц8кйййADцццц//wййDцццwйецц/wкйййAAцццц//ййAPцццйDеццwкйййAADцццц/8ййAццц8йPеццкйййAAAAцццц/wййDцццwйеццкйййAAAAAPццццййAPцццйDец/////8ййййADц/ййййAAцццц8ййAццц8йPец////8ййййAц////8йййAAAAADццццwййDцццwйец/////wйййAAAADцц/8йййAAAAAццццййAPцццйDец////wйййAAAADцц///йййAAAADг//8ййAццц8йPец////йййAAAAцццйййAAAAг//wййDцццwйец////8йййAAAццц/wйййAADг//ййAPцццйDец////wйййAAццц//8йййAAPг/8ййAццц8йPец///wйййAADццц//wйййAADг/wййDцццwйец////йййAADг8йййAAPг/ййAPцццйDец///8йййADг//йййAAг/8ййAццц8йPец//8йййAAPг/8йййADг/wййDцццwйццгwйййййAPццццйййййAPц////ййAPцццйDццгйййййAAцццц/wйййййц////8ййAццц8йPццццц//8йййййAцццц//йййййDц////wййDцццwйццгwйййййDцццц//wййййAAAAAPц////ййAPцццйDццгйййййAPцццц//йййййц////8ййAццц8йPццццц//8йййййAцццц//8ййййAAAAADц////wййDцццwйццгwйййййцгwййййAAAAAPц////ййAPцццйDццгйййййDцг8ййййAAAAAц////8ййAццц8йPццццц//8йййййPцгwййййAAAADц////wййDцццwйццгwйййййцг/ййййAAAAAPц////ййAPцццйDццгйййййDцг8ййййAAAAAц////8ййAццц8йPццццц//8йййййPцццц//8ййййAAAAADц////wййDцццwйццгwйййййDцццц//wййййAAAAAPц////ййAPцццйDццгйййййAPцццц//йййййц////8ййAццц8йPццццц//8йййййAцццц//8ййййAAAAADц////wййDцццwйццгwйййййDцццц/8йййййPц////ййAPцццйDццгйййййAAцццц/wйййййц////8ййAццц8йPццццц//8йййййADццццwйййййDц////wййDцццwйец//йййAAAAг//wйййAPг/ййAPцццйDец///8йййADг//йййAAг/8ййAццц8йPец///wйййAAг/йййAADг/wййDцццwйец////йййAADгйййAAAPг/ййAPцццйDец///8йййAAAццц//8йййAAPг/8ййAццц8йPец////йййAAAPццц8йййAAAг//wййDцццwйец////8йййAAADцц/////8йййAAADг//ййAPцццйDец/////йййAAAAцц////8йййAAADг//8ййAццц8йPец////8йййAAAAAцц//йййAAAAAPг//wййDцццwйец/////wййййц/////wййййццццййAPцццйDец/////8ййййAц//8ййййAцццц8ййAццц8йPец/////wййййAAAA8PййййAAAADццццwййDцццwйецц8кйййAAADцццц/ййAPцццйDеццwкйййAAAPцццц8ййAццц8йPецц8кйййAAPцццц/wййDцццwйецц/wкйййAPцццц//ййAPцццйDецц/8кйййAцццц//8ййAццц8йPецц//кйййцгwййDцццwйецц//8кййAAAAADцгййAPцццйDецц/8кйййAцццц//8ййAццц8йPецц8кйййAAPцццц/wййDцццwйецц8кйййAAADцццц/ййAPцццйDец/////8кйййAAAAAцццц8ййAццц8йPец////8кййййPг//wййDцццwйец////8кййййADг//ййAPцццйDец///8кййййAAAг/8ййAццц8йPец//8кййййAAAAPгwййDцццwйец//8кййййAAAAADгййAPцццйDец/8кйййййAццц//8ййAццц8йPец8кйййййAAPццц/wййDцццwйец8кйййййAAADццц/ййAPцццйDецwййAAAA8йййййAAAAA8ййAAAAPццц8ййAццц8йPец8ййAAA//йййййAAAA//ййAAAPццц/wййDцццwйец//ййAA////йййййAP///wййAPццц//ййAPцццйDец//wййцййййAAAAц8ййPццц//8ййAццц8йPец//8йAAAAAц//ййййAPц//йAAAAAPгwййDцццwкййAAAPйAAAA8йAD/8йййAAAD/8Aц/wйAAAPг/ййAPцццкййAAAADwйAA8йAAAD//wййAAAAD///AADц/8йAAPг/8ййAццц8кййAAAAA8йA8ййP//8ййP//AAAAAPц//йAPг//wййDцццwкййAAAAAPй8ййAAADwйй/wйц///wAAAAAPццццййAPцццкйййDwAAAA8ййAAAAPййD8йDц///8AAAAPцццц8ййAццц8кйййA8AAA8ййAAAAA8ййPwйPц////AAAPцццц/wййDцццwкйййAPAA8ййAAAAADwйй/йAц/////wAPцццц//ййAPцццкйййAADw8йййPййD8йDц/////8Pцццц//8ййAццц8кйййAAA8йййA8ййPwйPе///wййDцццwйнуууууzMzMzwйй/йAе////ййAPцццйDMнуууууzMzPййD8йDе///8ййAццц8йMнуууууzMzM8ййPwйPе///wййDцццwйнуууууzMzMzwйй/йAе////ййAPцццйDMzMzMzйййййAууwAAAуzMAAAMzMzMzPййD8йDе///8ййAццц8йMzMzMwAццццц8AуzMzMAP//8AzMzMzAD///AMzMzM8ййPwйPе///wййDцццwйzMzMwPццццц//8MуzMD/////8MzMzAцDMzMzwйй/йAе////ййAPцццйDMzMwPццг/DMуDц/DMzAц/wzMwPййD8йDе///8ййAццц8йMzMzAццг/8MуwPц8MzMDц/DMzA8ййPwйPе///wййDцццwйzMzAеDMzMzMwPц//DMDц//wzA/wйй/йAе////ййAPцццйDMzMDццг//8MzMzMzAц//8MwPц//DMD/ййD8йDе///8ййAццц8йMzMwPццг//wуDц//wzAц//8MwP8ййPwйPе///wййDцццwйzMzAеDMzMzMwPц//DMDц//wzAцц///йAе////ййAPцццйDMzMDццг//8MzMzMzAц//8MwPц//DMDц//wуйDе///8ййAццц8йMzMzAццг/8MуwPц8MzMDц/DMzAц/wуwйPе///wййDцццwйzMzMDццг/wуzAц/wzMwPц8MzMDц/DMzMzMzйAе////ййAPцццйDMzMzAццгwуzMwP/////wzMzMD/////8MzMzAцDMуйDе///8ййAццц8йMzMzMwAццццц8AуzMzMAP//8AzMzMzAD///AMzMzMwA///wDMуwйPе///wййDцццwйуwйййййMууAAAMуzAAADMуwAAAуzMzйAе////ййAPцццйDMннууйDе///8ййAццц8йMннууwйPе///wййDцццwйннууwйAе////ййAPцццйAMннуzMzMwйADе///8ййAццц8ккййййAAPе///wййDцццwккййййAAе////ййAPцццккййййAADе///8ййAццц8ккййййAAPе///wййDцццwккййййAAе////ййAPццц8ккййййAе////8ййAццц/wккййййDе////wййDццц/8ккйййAAAAADе/////ййAPццц//8ккйййAAAец8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8ййAеееецц/wййDеееецц/ййAPеееецц8кккккккккккккккккккккккккккккккккккккккккккккккййййAAADMннннууййAMннннууwййAннннууzййADMннннууййAMннннууwййAннннууzййADMннннууййAMннннууwййAннннууzййADMуzMккAAуууzMAAAAAMууzMAAAAAMууzMAAAAAMуzMййAMуzADее/8AууzMzMzAD/////AMуzMzMzAD/////AMуzMzMzAD/////AMуwййAуwAее////8AууzMwAц//AMуzMwAц//AMуzMwAц//AMzMzMzййADMzMzMwPеец8MууwPц////DMуwPц////DMуwPц////DMzMzMййAMzMzMwPеец//DMуzMzMwPц/////wуwPц/////wуwPц/////wzMzMwййAzMzMwPеец///wуzMzMwPцц8MzMzMwPцц8MzMzMwPцц8MzMzййADMzMzAеец////DMуzMzAцц/wzMzMzAцц/wzMzMzAцц/wzMzMййAMzMzAеец/////wуzMzAцц//8MzMzAцц//8MzMzAцц//8MzMwййAzMzMDеец/////DMуzMDцц//wzMzMDцц//wzMzMDцц//wzMzййADMzMDееццwуzMDцц///8MzMDцц///8MzMDцц///8MzMййAMzMwPееццDMуwPцц///wzMwPцц///wzMwPцц///wzMwййAzMzAеецц8MуzAцц////DMzAцц////DMzAцц////DMzййADMzMDееццwуzMDцц///8MzMDцц///8MzMDцц///8MzMййAMzMwPееццDMуwPцц///wzMwPцц///wzMwPцц///wzMwййAzMzAеецц8MуzAцц////DMzAцц////DMzAцц////DMzййADMzMDееццwуzMDцц///8MzMDцц///8MzMDцц///8MzMййAMzMwPееццDMуwPцц///wzMwPцц///wzMwPцц///wzMwййAzMzMDеец/////DMуzMDцц//wzMzMDцц//wzMzMDцц//wzMzййADMzMwPеец////8MуzMwPцц//DMzMwPцц//DMzMwPцц//DMzMййAMzMzMDеец///8MуzMzMDцц/DMzMzMDцц/DMzMzMDцц/DMzMwййAzMzMwPеец///wуzMzMwPцц8MzMzMwPцц8MzMzMwPцц8MzMzййADMzMzMDеец//wууDц/////8MуDц/////8MуDц/////8MzMzMййAMzMzMzAеец/wууzAц////8MуzAц////8MуzAц////8MzMzMwййAуwAее////8AууzMwAц//AMуzMwAц//AMуzMwAц//AMzMzMzййADMуwAее//AMууzMzMwA/////wDMуzMzMwA/////wDMуzMzMwA/////wDMуййAMуzMwккADMуууwAAAAAууzMwAAAAAууzMwAAAAAуzMwййAннннууzййADMннннууййAMннннууwййAннннууzййADMннннууййAAннннууwййAAMннннуzMzMwкккккккккккккккккккккккккккккккккккккккккккккккйййAAAD/gкAAB//4кAAAB/+кAAAAB/wкAAAAD+кAAAAAHwкAAAAAPкй4кAAAAABgкAAAAAEккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккккAAIкAAAAABgкAAAAAHкй8кAAAAAD4кAAAAAfwкAAAAD/gкAAAAf/gкAAAH//gкAAB/w=="";
	|            str_Icon = str_Icon.Replace(""г"", ""ццц///"");
	|            str_Icon = str_Icon.Replace(""н"", ""уууууу"");
	|            str_Icon = str_Icon.Replace(""е"", ""цццццц"");
	|            str_Icon = str_Icon.Replace(""к"", ""йййййй"");
	|            str_Icon = str_Icon.Replace(""у"", ""zMzMzM"");
	|            str_Icon = str_Icon.Replace(""ц"", ""//////"");
	|            str_Icon = str_Icon.Replace(""й"", ""AAAAAA"");
	|            this.Icon = new Icon(new MemoryStream(Convert.FromBase64String(str_Icon)));
	|            this.MainMenuStrip = this.menuStrip1;
	|            this.Margin = new System.Windows.Forms.Padding(4);
	|            this.Name = ""pDesignerMainForm"";
	|            this.Text = ""Дизайнер форм для OneScriptForms"";
	|            this.Load += pDesignerMainForm_Load;
	|            //* 18.12.2021 perfolenta
	|            this.FormClosing += pDesignerMainForm_Closing;
	|            //***
	|            this.menuStrip1.ResumeLayout(false);
	|            this.menuStrip1.PerformLayout();
	|            this.pnl4Toolbox.ResumeLayout(false);
	|            this.ResumeLayout(false);
	|            this.PerformLayout();
	|
	|            // Элемент управления: (pDesigner)pDesignerCore.
	|            IpDesignerCore = this.pDesignerCore as IpDesigner;
	|            pDesignerCore.Parent = this.pnl4pDesigner;
	|
	|            // Добавим указатель.
	|            ToolboxItem toolPointer = new ToolboxItem();
	|            toolPointer.DisplayName = ""<Указатель>"";
	|            toolPointer.Bitmap = new Bitmap(16, 16);
	|            listBox1.Items.Add(toolPointer);
	|
	|            // Добавим элементы управления.
	|            ToolboxItem toolButton = new ToolboxItem(typeof(Button));
	|            toolButton.DisplayName = ""Кнопка (Button)"";
	|            listBox1.Items.Add(toolButton);
	|
	|            ToolboxItem toolCheckBox = new ToolboxItem(typeof(CheckBox));
	|            toolCheckBox.DisplayName = ""Флажок (CheckBox)"";
	|            listBox1.Items.Add(toolCheckBox);
	|
	|            ToolboxItem toolColorDialog = new ToolboxItem(typeof(ColorDialog));
	|            toolColorDialog.DisplayName = ""ДиалогВыбораЦвета (ColorDialog)"";
	|            listBox1.Items.Add(toolColorDialog);
	|
	|            ToolboxItem toolComboBox = new ToolboxItem(typeof(ComboBox));
	|            toolComboBox.DisplayName = ""ПолеВыбора (ComboBox)"";
	|            listBox1.Items.Add(toolComboBox);
	|
	|            ToolboxItem toolDataGrid = new ToolboxItem(typeof(DataGrid));
	|            toolDataGrid.DisplayName = ""СеткаДанных (DataGrid)"";
	|            listBox1.Items.Add(toolDataGrid);
	|
	|            ToolboxItem toolDateTimePicker = new ToolboxItem(typeof(DateTimePicker));
	|            toolDateTimePicker.DisplayName = ""ПолеКалендаря (DateTimePicker)"";
	|            listBox1.Items.Add(toolDateTimePicker);
	|
	|            ToolboxItem toolFileSystemWatcher = new ToolboxItem(typeof(FileSystemWatcher));
	|            toolFileSystemWatcher.DisplayName = ""НаблюдательФайловойСистемы (FileSystemWatcher)"";
	|            listBox1.Items.Add(toolFileSystemWatcher);
	|
	|            ToolboxItem toolFontDialog = new ToolboxItem(typeof(FontDialog));
	|            toolFontDialog.DisplayName = ""ДиалогВыбораШрифта (FontDialog)"";
	|            listBox1.Items.Add(toolFontDialog);
	|
	|            ToolboxItem toolFolderBrowserDialog = new ToolboxItem(typeof(FolderBrowserDialog));
	|            toolFolderBrowserDialog.DisplayName = ""ДиалогВыбораКаталога (FolderBrowserDialog)"";
	|            listBox1.Items.Add(toolFolderBrowserDialog);
	|
	|            ToolboxItem toolGroupBox = new ToolboxItem(typeof(GroupBox));
	|            toolGroupBox.DisplayName = ""РамкаГруппы (GroupBox)"";
	|            listBox1.Items.Add(toolGroupBox);
	|
	|            ToolboxItem toolHProgressBar = new ToolboxItem(typeof(HProgressBar));
	|            toolHProgressBar.DisplayName = ""ИндикаторГоризонтальный (HProgressBar)"";
	|            listBox1.Items.Add(toolHProgressBar);
	|
	|            ToolboxItem toolVProgressBar = new ToolboxItem(typeof(VProgressBar));
	|            toolVProgressBar.DisplayName = ""ИндикаторВертикальный (VProgressBar)"";
	|            listBox1.Items.Add(toolVProgressBar);
	|
	|            ToolboxItem toolHScrollBar = new ToolboxItem(typeof(HScrollBar));
	|            toolHScrollBar.DisplayName = ""ГоризонтальнаяПрокрутка (HScrollBar)"";
	|            listBox1.Items.Add(toolHScrollBar);
	|
	|            ToolboxItem toolImageList = new ToolboxItem(typeof(System.Windows.Forms.ImageList));
	|            toolImageList.DisplayName = ""СписокИзображений (ImageList)"";
	|            listBox1.Items.Add(toolImageList);
	|
	|            ToolboxItem toolLabel = new ToolboxItem(typeof(Label));
	|            toolLabel.DisplayName = ""Надпись (Label)"";
	|            listBox1.Items.Add(toolLabel);
	|
	|            ToolboxItem toolLinkLabel = new ToolboxItem(typeof(LinkLabel));
	|            toolLinkLabel.DisplayName = ""НадписьСсылка (LinkLabel)"";
	|            listBox1.Items.Add(toolLinkLabel);
	|
	|            ToolboxItem toolListBox = new ToolboxItem(typeof(ListBox));
	|            toolListBox.DisplayName = ""ПолеСписка (ListBox)"";
	|            listBox1.Items.Add(toolListBox);
	|
	|            ToolboxItem toolListView = new ToolboxItem(typeof(ListView));
	|            toolListView.DisplayName = ""СписокЭлементов (ListView)"";
	|            listBox1.Items.Add(toolListView);
	|
	|            ToolboxItem toolMainMenu = new ToolboxItem(typeof(System.Windows.Forms.MainMenu));
	|            toolMainMenu.DisplayName = ""ГлавноеМеню (MainMenu)"";
	|            listBox1.Items.Add(toolMainMenu);
	|
	|            ToolboxItem toolMonthCalendar = new ToolboxItem(typeof(MonthCalendar));
	|            toolMonthCalendar.DisplayName = ""Календарь (MonthCalendar)"";
	|            listBox1.Items.Add(toolMonthCalendar);
	|
	|            ToolboxItem toolNotifyIcon = new ToolboxItem(typeof(NotifyIcon));
	|            toolNotifyIcon.DisplayName = ""ЗначокУведомления (NotifyIcon)"";
	|            listBox1.Items.Add(toolNotifyIcon);
	|
	|            ToolboxItem toolNumericUpDown = new ToolboxItem(typeof(NumericUpDown));
	|            toolNumericUpDown.DisplayName = ""РегуляторВверхВниз (NumericUpDown)"";
	|            listBox1.Items.Add(toolNumericUpDown);
	|
	|            ToolboxItem toolOpenFileDialog = new ToolboxItem(typeof(OpenFileDialog));
	|            toolOpenFileDialog.DisplayName = ""ДиалогОткрытияФайла (OpenFileDialog)"";
	|            listBox1.Items.Add(toolOpenFileDialog);
	|
	|            ToolboxItem toolPanel = new ToolboxItem(typeof(Panel));
	|            toolPanel.DisplayName = ""Панель (Panel)"";
	|            listBox1.Items.Add(toolPanel);
	|
	|            ToolboxItem toolPictureBox = new ToolboxItem(typeof(PictureBox));
	|            toolPictureBox.DisplayName = ""ПолеКартинки (PictureBox)"";
	|            listBox1.Items.Add(toolPictureBox);
	|
	|            ToolboxItem toolPropertyGrid = new ToolboxItem(typeof(PropertyGrid));
	|            toolPropertyGrid.DisplayName = ""СеткаСвойств (PropertyGrid)"";
	|            listBox1.Items.Add(toolPropertyGrid);
	|
	|            ToolboxItem toolRadioButton = new ToolboxItem(typeof(RadioButton));
	|            toolRadioButton.DisplayName = ""Переключатель (RadioButton)"";
	|            listBox1.Items.Add(toolRadioButton);
	|
	|            ToolboxItem toolRichTextBox = new ToolboxItem(typeof(RichTextBox));
	|            toolRichTextBox.DisplayName = ""ФорматированноеПолеВвода (RichTextBox)"";
	|            listBox1.Items.Add(toolRichTextBox);
	|
	|            ToolboxItem toolSaveFileDialog = new ToolboxItem(typeof(SaveFileDialog));
	|            toolSaveFileDialog.DisplayName = ""ДиалогСохраненияФайла (SaveFileDialog)"";
	|            listBox1.Items.Add(toolSaveFileDialog);
	|
	|            ToolboxItem toolSplitter = new ToolboxItem(typeof(Splitter));
	|            toolSplitter.DisplayName = ""Разделитель (Splitter)"";
	|            listBox1.Items.Add(toolSplitter);
	|
	|            ToolboxItem toolStatusBar = new ToolboxItem(typeof(StatusBar));
	|            toolStatusBar.DisplayName = ""СтрокаСостояния (StatusBar)"";
	|            listBox1.Items.Add(toolStatusBar);
	|
	|            ToolboxItem toolTabControl = new ToolboxItem(typeof(TabControl));
	|            toolTabControl.DisplayName = ""ПанельВкладок (TabControl)"";
	|            listBox1.Items.Add(toolTabControl);
	|
	|            ToolboxItem toolTextBox = new ToolboxItem(typeof(TextBox));
	|            toolTextBox.DisplayName = ""ПолеВвода (TextBox)"";
	|            listBox1.Items.Add(toolTextBox);
	|
	|            ToolboxItem toolTimer = new ToolboxItem(typeof(Timer));
	|            toolTimer.DisplayName = ""Таймер (Timer)"";
	|            listBox1.Items.Add(toolTimer);
	|
	|            ToolboxItem toolToolBar = new ToolboxItem(typeof(ToolBar));
	|            toolToolBar.DisplayName = ""ПанельИнструментов (ToolBar)"";
	|            listBox1.Items.Add(toolToolBar);
	|
	|            ToolboxItem toolToolTip = new ToolboxItem(typeof(ToolTip));
	|            toolToolTip.DisplayName = ""Подсказка (ToolTip)"";
	|            listBox1.Items.Add(toolToolTip);
	|
	|            ToolboxItem toolTreeView = new ToolboxItem(typeof(TreeView));
	|            toolTreeView.DisplayName = ""Дерево (TreeView)"";
	|            listBox1.Items.Add(toolTreeView);
	|
	|            ToolboxItem toolUserControl = new ToolboxItem(typeof(UserControl));
	|            toolUserControl.DisplayName = ""ПользовательскийЭлементУправления (UserControl)"";
	|            listBox1.Items.Add(toolUserControl);
	|
	|            ToolboxItem toolVScrollBar = new ToolboxItem(typeof(VScrollBar));
	|            toolVScrollBar.DisplayName = ""ВертикальнаяПрокрутка (VScrollBar)"";
	|            listBox1.Items.Add(toolVScrollBar);
	|
	|            listBox1.Sorted = true;
	|            listBox1.HorizontalScrollbar = true;
	|            IpDesignerCore.Toolbox = listBox1;
	|        }
	|
	|        private void _run_Click(object sender, EventArgs e)
	|        {
	|            string strTempFile = String.Format(Path.GetTempPath() + ""oscript_{0}_{1}.os"", DateTime.Now.ToString(""yyyyMMddHHmmssfff""), Guid.NewGuid().ToString().Replace(""-"", """"));
	|            File.WriteAllText(strTempFile, SaveScript.GetScriptText(), Encoding.UTF8);
	|
	|            System.Diagnostics.ProcessStartInfo psi = new System.Diagnostics.ProcessStartInfo();
	|            psi.Arguments = strTempFile;
	|            psi.FileName = (string)Settings.Default[""osPath""];
	|            System.Diagnostics.Process.Start(psi);
	|        }
	|
	|        private void _settings_Click(object sender, EventArgs e)
	|        {
	|            settingsForm = new System.Windows.Forms.Form();
	|            settingsForm.Text = ""Параметры"";
	|            settingsForm.Width = 600;
	|            settingsForm.Height = 500;
	|            settingsForm.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
	|
	|            string str_settingsForm = ""AAABAAEAMjIAAAEAIADIKAAAFgAAACgAAAAyAAAAZAAAAAEAIеAoCgеееAAAAADцццццццццццццццццццццццццццццццццццццццццг/////AAAACAAAAHUAAAC4AAAAxAAAAI4AAAAcццг/wAAAAkAAADFAкAAOgAAADbAAAA/gAAAOsAAAAzццццццй//AAAAdgAAAP8ункAAO4AAAAzцццццц//8AAAC5AAAA5wAAAP8ункAAO4AAAAzцгййй///wAAAMYAAADYAннкAAO4AAAAzцгйй////AAAAkAAAAP4уннAAA8QAAAO4AAAAzцгй////8AAAAeAAAA7AAAAPEуннAAA8QAAAO4AAAAzцгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAPEуннAAA8QAAAO8AAAA2цгй////8AAAAxAAAA7QAAAP8уннкAAO8AAAA2цгй////8AAAAxAAAA7QAAAP8уннкAAO8AAAA2цгй////8AAAAxAнннкAAO8AAAA2цгй////8AAAAxAнннкAAO8AAAA2цгй////8AAAAzAAAA7gAAAP8уннкAAO4AAABLAAAAawAAAKgAAADDAAAAxAAAAKsAAAB2AAAAJvгй//8AAAAzAAAA7gAAAPEунннAAA+gAAAOEAAADeAAAA+AAAAP8уAAArwAAACbг///8AAAAzAAAA7gAAAPEуннннкAAP8AAAD9AAAA9AAAAFPг///8AAAAzAAAA7gAAAPEуннннкAAP8AAADgAAAA/gAAAFXг///8AAAAzAAAA7gAAAP8уннннкAAP8AAADfAAAA9AAAACnг///8AAAAzAAAA7gAAAPEунннннAAAгй////8AAABLAннннннAAALPг///wAAAGwуннкAAO0уAAA9QAAAOUункAAP8AAADг/////AAAAqAAAAPkуннAAA0йй////wAAANcунAAA8QAAAPг////8AAADDAAAA4AAAAP8унAAA7QAAANbйййй//wAAANQукAAP8AAADWAAAAг/////wAAAMYAAADdAнкAAP8AAADц//wAAANMAAAD+AкAANsAAADг/////AAAArAAAAPYунAAAwgAAAPXцйwAAANUAAAD+AAAA/QAAAPг////8AAAB4AннAAA5fцй/////wAAANQуAAAг/////wAAACgункAAP8AAAD+AAAA1цййwAAANTгйй//wAAALIAAAD8AннAAA1vцццццц//AAAAKQAAAPUAAADdAннAAA1fцццццц//AAAAVgAAAP4уннAAA1fцццццц//AAAAWAAAAPYAAAD7AнкAAP8AAAD+AAAA1Pцццццц//AAAALAAAALcукAAPAAAADUAAAA2wAAAP0уAAA1Pццццццй/wAAAC8ункAAPццццццццццццццццццццццццццццццццццццццццццг//еееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееееее=="";
	|            str_settingsForm = str_settingsForm.Replace(""г"", ""ццццйй"");
	|            str_settingsForm = str_settingsForm.Replace(""н"", ""кAAP8у"");
	|            str_settingsForm = str_settingsForm.Replace(""е"", ""AAAAAA"");
	|            str_settingsForm = str_settingsForm.Replace(""к"", ""AAA/wA"");
	|            str_settingsForm = str_settingsForm.Replace(""у"", ""AAAD/A"");
	|            str_settingsForm = str_settingsForm.Replace(""ц"", ""йййййй"");
	|            str_settingsForm = str_settingsForm.Replace(""й"", ""//////"");
	|            settingsForm.Icon = new Icon(new MemoryStream(Convert.FromBase64String(str_settingsForm)));
	|
	|            tabControl = new System.Windows.Forms.TabControl();
	|            tabControl.Parent = settingsForm;
	|            tabControl.Left = 15;
	|            tabControl.Top = 15;
	|            tabControl.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right |
	|                System.Windows.Forms.AnchorStyles.Bottom;
	|            tabControl.Size = new Size(settingsForm.Width - 120, settingsForm.Height - 50);
	|
	|            tabPage1 = new System.Windows.Forms.TabPage(""Файлы"");
	|            tabPage1.Parent = tabControl;
	|
	|            groupBox = new System.Windows.Forms.GroupBox();
	|            groupBox.Parent = tabPage1;
	|            groupBox.Text = ""Пути"";
	|            groupBox.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            groupBox.Left = 25;
	|            groupBox.Top = 25;
	|            groupBox.Width = 150;
	|            groupBox.Height = 170;
	|
	|            label_os = new System.Windows.Forms.Label();
	|            label_os.Parent = groupBox;
	|            label_os.Left = 10;
	|            label_os.Top = groupBox.Top;
	|            label_os.Width = 80;
	|            label_os.Text = ""oscript.exe:"";
	|            label_os.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
	|
	|            textBox_osPath = new System.Windows.Forms.TextBox();
	|            textBox_osPath.Parent = groupBox;
	|            textBox_osPath.Left = label_os.Left;
	|            textBox_osPath.Top = label_os.Bottom + 3;
	|            textBox_osPath.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            textBox_osPath.Text = (string)Settings.Default[""osPath""];
	|
	|            button_osPath = new System.Windows.Forms.Button();
	|            button_osPath.Parent = groupBox;
	|            button_osPath.Font = new Font(groupBox.Font, FontStyle.Bold);
	|            button_osPath.Text = ""..."";
	|            button_osPath.Left = 115;
	|            button_osPath.Top = textBox_osPath.Top;
	|            button_osPath.Width = 27;
	|            button_osPath.Anchor = System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            button_osPath.Click += button_osPath_Click;
	|
	|            label_dll = new System.Windows.Forms.Label();
	|            label_dll.Parent = groupBox;
	|            label_dll.Left = textBox_osPath.Left;
	|            label_dll.Top = textBox_osPath.Bottom + 10;
	|            label_dll.Width = 140;
	|            label_dll.Text = ""OneScriptForms.dll:"";
	|            label_dll.TextAlign = System.Drawing.ContentAlignment.BottomLeft;
	|
	|            textBox_dllPath = new System.Windows.Forms.TextBox();
	|            textBox_dllPath.Parent = groupBox;
	|            textBox_dllPath.Left = label_dll.Left;
	|            textBox_dllPath.Top = label_dll.Bottom + 3;
	|            textBox_dllPath.Anchor = System.Windows.Forms.AnchorStyles.Left |
	|                System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            textBox_dllPath.Text = (string)Settings.Default[""dllPath""];
	|
	|            button_dllPath = new System.Windows.Forms.Button();
	|            button_dllPath.Parent = groupBox;
	|            button_dllPath.Font = new Font(groupBox.Font, FontStyle.Bold);
	|            button_dllPath.Text = ""..."";
	|            button_dllPath.Left = 115;
	|            button_dllPath.Top = textBox_dllPath.Top;
	|            button_dllPath.Width = 27;
	|            button_dllPath.Anchor = System.Windows.Forms.AnchorStyles.Top |
	|                System.Windows.Forms.AnchorStyles.Right;
	|            button_dllPath.Click += Button_dllPath_Click;
	|
	|            buttonOK = new System.Windows.Forms.Button();
	|            buttonOK.Parent = settingsForm;
	|            buttonOK.Text = ""OK"";
	|            buttonOK.Left = 507;
	|            buttonOK.Top = 387;
	|            buttonOK.Width = 75;
	|            buttonOK.Anchor = System.Windows.Forms.AnchorStyles.Right |
	|                System.Windows.Forms.AnchorStyles.Bottom;
	|            buttonOK.Click += ButtonOK_Click;
	|
	|            buttonCancel = new System.Windows.Forms.Button();
	|            buttonCancel.Parent = settingsForm;
	|            buttonCancel.Text = ""Отмена"";
	|            buttonCancel.Left = 507;
	|            buttonCancel.Top = 420;
	|            buttonCancel.Width = 75;
	|            buttonCancel.Anchor = System.Windows.Forms.AnchorStyles.Right |
	|                System.Windows.Forms.AnchorStyles.Bottom;
	|            buttonCancel.Click += ButtonCancel_Click;
	|
	|            settingsForm.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
	|
	|            if (settingsForm.ShowDialog() == System.Windows.Forms.DialogResult.OK)
	|            {
	|                // Записываем значения в Settings.
	|                Settings.Default[""osPath""] = textBox_osPath.Text;
	|                Settings.Default[""dllPath""] = textBox_dllPath.Text;
	|                Settings.Default.Save();
	|            }
	|        }
	|
	|        private void Button_dllPath_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.InitialDirectory = ""C:\\"";
	|            OpenFileDialog1.Filter = ""DLL files (*.dll)|*.dll|All files (*.*)|*.*"";
	|            OpenFileDialog1.FilterIndex = 1;
	|            OpenFileDialog1.RestoreDirectory = true;
	|            OpenFileDialog1.Multiselect = false;
	|            OpenFileDialog1.SupportMultiDottedExtensions = true;
	|
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            textBox_dllPath.Text = OpenFileDialog1.FileName;
	|        }
	|
	|        private void ButtonCancel_Click(object sender, EventArgs e)
	|        {
	|            settingsForm.DialogResult = System.Windows.Forms.DialogResult.Cancel;
	|        }
	|
	|        private void ButtonOK_Click(object sender, EventArgs e)
	|        {
	|            settingsForm.DialogResult = System.Windows.Forms.DialogResult.OK;
	|        }
	|
	|        private void button_osPath_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.InitialDirectory = ""C:\\"";
	|            OpenFileDialog1.Filter = ""EXE files (*.exe)|*.exe|All files (*.*)|*.*"";
	|            OpenFileDialog1.FilterIndex = 1;
	|            OpenFileDialog1.RestoreDirectory = true;
	|            OpenFileDialog1.Multiselect = false;
	|            OpenFileDialog1.SupportMultiDottedExtensions = true;
	|
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            textBox_osPath.Text = OpenFileDialog1.FileName;
	|        }
	|
	|        private void _exit_Click(object sender, EventArgs e)
	|        {
	|            //* 18.12.2021 perfolenta
	|            this.DialogResult = System.Windows.Forms.DialogResult.Cancel;
	|            this.Close();
	|            //***
	|        }
	|
	|        private void _saveForm_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.SaveFileDialog saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
	|            saveFileDialog1.RestoreDirectory = true;
	|            saveFileDialog1.OverwritePrompt = true;
	|            saveFileDialog1.Filter = ""OSD files(*.osd)|*.osd|All files(*.*)|*.*"";
	|            if (saveFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            File.WriteAllText(saveFileDialog1.FileName, SaveForm.GetScriptText(saveFileDialog1.FileName), Encoding.UTF8);
	|
	|            //File.WriteAllText(""C:\\444\\Форма1сохран\\Форма1сохран.osd"", SaveForm.GetScriptText(""C:\\444\\Форма1сохран\\""), Encoding.UTF8);
	|        }
	|
	|        private void _loadForm_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.RestoreDirectory = true;
	|            OpenFileDialog1.Filter = ""OSD files(*.osd)|*.osd|All files(*.*)|*.*"";
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            string strOSD = File.ReadAllText(OpenFileDialog1.FileName);
	|
	|            //string strOSD = File.ReadAllText(""C:\\444\\Форма1сохран\\Форма1сохран.osd"");
	|
	|            strOSD = strOSD.Replace("" "", """");
	|
	|            string[] result = null;
	|            string[] stringSeparators = new string[] { Environment.NewLine };
	|            string ComponentBlok = null;
	|            string rootBlok = null;
	|
	|            // Соберем из блока конструкторов имена компонентов в CompNames.
	|            List<string> CompNames = new List<string>();
	|            Dictionary<string, object> dictObjects = new Dictionary<string, object>(); // Словарь для соответствия имени переменной в скрипте объекту в библиотеке.
	|            string ConstructorBlok = OneScriptFormsDesigner.ParseBetween(strOSD, @""[<Конструкторы]"", @""[Конструкторы>]"");
	|            result = ConstructorBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|            for (int i = 0; i < result.Length; i++)
	|            {
	|                string s = OneScriptFormsDesigner.ParseBetween(result[i], null, @""=Ф."");
	|                if (s != null)
	|                {
	|                    if (s.Substring(0, 2) != @""//"")
	|                    {
	|                        CompNames.Add(s);
	|                        dictObjects.Add(s, null);
	|                    }
	|                }
	|            }
	|            result = null;
	|
	|            // Добавим вкладку и создадим на ней загружаемую форму.
	|            DesignSurfaceExt2 var1 = IpDesignerCore.AddDesignSurface<Form>(670, 600, AlignmentModeEnum.SnapLines, new Size(1, 1), CompNames[0]);
	|            Component rootComponent = (Component)var1.ComponentContainer.Components[0];
	|
	|            dictObjects[CompNames[0]] = rootComponent;
	|
	|            string formName = CompNames[0];
	|            rootComponent.GetType().GetProperty(""Text"").SetValue(rootComponent, formName);
	|            rootBlok = OneScriptFormsDesigner.ParseBetween(strOSD, @""[<"" + formName + @""]"", @""["" + formName + @"">]"");
	|            if (rootBlok != null)
	|            {
	|                // Установим для формы свойства.
	|                result = rootBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strCurrent = result[i1];
	|                    if (strCurrent.Length >= 2)
	|                    {
	|                        if (strCurrent.Substring(0, 2) != @""//"")
	|                        {
	|                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, formName + ""."", ""="");
	|                            if (displayName != ""КнопкаОтмена"" && displayName != ""КнопкаПринять"" && !strCurrent.StartsWith(""Подсказка""))
	|                            {
	|                                string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                PropValueConverter.SetPropValue(rootComponent, displayName, strPropertyValue);
	|                            }
	|                        }
	|                    }
	|                }
	|                propertyGrid1.Refresh();
	|                result = null;
	|            }
	|
	|            // Создадим остальные компоненты но пока не устанавливаем для них свойства, так как могут быть не все родители созданы.
	|            IDesignSurfaceExt surface = pDesigner.DSME.ActiveDesignSurface;
	|            for (int i = 1; i < CompNames.Count; i++)
	|            {
	|                string componentName = CompNames[i];
	|                string type_NameRu = componentName;
	|                for (int i1 = 0; i1 < 10; i1++)
	|                {
	|                    type_NameRu = type_NameRu.Replace(i1.ToString(), """");
	|                }
	|
	|                string type_NameEn = ""osfDesigner."" + OneScriptFormsDesigner.namesRuEn[type_NameRu];
	|                Type type = Type.GetType(type_NameEn);
	|
	|                if (type == typeof(osfDesigner.ImageList))
	|                {
	|                    ToolboxItem toolImageList1 = new ToolboxItem(typeof(System.Windows.Forms.ImageList));
	|                    Component comp1 = (Component)toolImageList1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    // Для comp1 уже создан дублер, получим его.
	|                    osfDesigner.ImageList SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(comp1);
	|                    dictObjects[componentName] = SimilarObj;
	|                }
	|                else if (type == typeof(osfDesigner.MainMenu))
	|                {
	|                    ToolboxItem toolMainMenu1 = new ToolboxItem(typeof(System.Windows.Forms.MainMenu));
	|                    Component comp1 = (Component)toolMainMenu1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    // Для comp1 уже создан дублер, получим его.
	|                    osfDesigner.MainMenu SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(comp1);
	|                    dictObjects[componentName] = SimilarObj;
	|                }
	|                else if (type == typeof(osfDesigner.TabPage))
	|                {
	|                    ToolboxItem toolTabPage1 = new ToolboxItem(typeof(System.Windows.Forms.TabPage));
	|                    Component comp1 = (Component)toolTabPage1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    // Для comp1 уже создан дублер, получим его.
	|                    osfDesigner.TabPage SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(comp1);
	|                    SimilarObj.OriginalObj = (System.Windows.Forms.TabPage)comp1;
	|                    OneScriptFormsDesigner.PassProperties(comp1, SimilarObj); // Передадим свойства.
	|                    dictObjects[componentName] = SimilarObj;
	|
	|                    GetDefaultValues(SimilarObj);
	|                }
	|                else if (type == typeof(osfDesigner.TabControl))
	|                {
	|                    ToolboxItem toolTabControl1 = new ToolboxItem(typeof(osfDesigner.TabControl));
	|                    Component comp1 = (Component)toolTabControl1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    // Удалим две вкладки, которые панель вкладок создает автоматически.
	|                    IDesignerEventService des = (IDesignerEventService)pDesigner.DSME.GetService(typeof(IDesignerEventService));
	|                    if (des != null)
	|                    {
	|                        for (int i1 = 0; i1 < ((osfDesigner.TabControl)comp1).TabPages.Count; i1++)
	|                        {
	|                            des.ActiveDesigner.Container.Remove(((osfDesigner.TabControl)comp1).TabPages[i1]);
	|                        }
	|                        ((osfDesigner.TabControl)comp1).TabPages.Clear();
	|                    }
	|                    dictObjects[componentName] = comp1;
	|                }
	|
	|                else if (type == typeof(osfDesigner.FileSystemWatcher) ||
	|                    type == typeof(osfDesigner.FolderBrowserDialog) ||
	|                    type == typeof(osfDesigner.ColorDialog) ||
	|                    type == typeof(osfDesigner.FontDialog) ||
	|                    type == typeof(osfDesigner.OpenFileDialog) ||
	|                    type == typeof(osfDesigner.SaveFileDialog) ||
	|                    type == typeof(osfDesigner.NotifyIcon) ||
	|                    type == typeof(osfDesigner.ToolTip) ||
	|                    type == typeof(osfDesigner.Timer))
	|                {
	|                    ToolboxItem toolComp1 = new ToolboxItem(type);
	|                    Component comp1 = (Component)toolComp1.CreateComponents(pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost())[0];
	|                    dictObjects[componentName] = comp1;
	|                }
	|                else
	|                {
	|                    Component control1 = surface.CreateControl(type, new Size(200, 20), new Point(10, 200));
	|                    dictObjects[componentName] = control1;
	|                }
	|                ((Component)dictObjects[componentName]).Site.Name = componentName;
	|            }
	|
	|            // Установим свойства компонентов.
	|            for (int i = 1; i < CompNames.Count; i++)
	|            {
	|                string componentName = CompNames[i];
	|                Component control = (Component)dictObjects[componentName];
	|                ComponentBlok = OneScriptFormsDesigner.ParseBetween(strOSD, @""[<"" + componentName + @""]"", @""["" + componentName + @"">]"");
	|                if (ComponentBlok != null)
	|                {
	|                    result = ComponentBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                    for (int i1 = 0; i1 < result.Length; i1++)
	|                    {
	|                        string strCurrent = result[i1];
	|                        if (strCurrent.Length >= 2)
	|                        {
	|                            if (strCurrent.Substring(0, 2) != @""//"")
	|                            {
	|                                if (componentName.Contains(""СписокИзображений""))
	|                                {
	|                                    if (strCurrent.Contains(""=""))
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                    }
	|                                    else
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""."");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""Ф.Картинка(\u0022"", ""\u0022)"");
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""Календарь""))
	|                                {
	|                                    if (strCurrent.Contains(""=""))
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                        Control parent = (Control)dictObjects[parentName];
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                    }
	|                                    else
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""."");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""Дата("", ""))"");
	|                                        string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                        Control parent = (Control)dictObjects[parentName];
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""ГлавноеМеню""))
	|                                {
	|                                    string controlName = ((osfDesigner.MainMenu)control).Name;
	|                                    if (strCurrent.Contains("".ЭлементыМеню.Добавить(Ф.ЭлементМеню(""))
	|                                    {
	|                                        osfDesigner.MainMenu MainMenu1 = (osfDesigner.MainMenu)control;
	|                                        System.Windows.Forms.TreeView TreeView1 = MainMenu1.TreeView;
	|                                        string Text = OneScriptFormsDesigner.ParseBetween(strCurrent, ""(\u0022"", ""\u0022)"");
	|                                        string Name = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                        if (strCurrent.Contains(componentName + ""."")) // Создаем элемент главного меню.
	|                                        {
	|                                            if (!Name.Contains(""Сепаратор""))
	|                                            {
	|                                                MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|                                                dictObjects.Add(componentName + Name, MenuItemEntry1);
	|                                                MenuItemEntry1.DefaultValues = @""Доступность == Истина
	|Нажатие == 
	|Отображать == Истина
	|Переключатель == Ложь
	|Помечен == Ложь
	|ПорядокСлияния == 0
	|СочетаниеКлавиш == Отсутствие
	|Текст == 
	|ТипСлияния == Добавить
	|(Name) == "";
	|                                                MenuItemEntry1.Text = Text;
	|                                                MenuItemEntry1.Name = Name;
	|                                                MainMenu1.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|                                                OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|                                                System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|                                                TreeNode1.Tag = MenuItemEntry1;
	|                                                TreeNode1.Text = MenuItemEntry1.Text;
	|                                                TreeView1.Nodes.Add(TreeNode1);
	|                                                TreeView1.SelectedNode = TreeNode1;
	|                                            }
	|                                            else
	|                                            {
	|                                                MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|                                                dictObjects.Add(componentName + Name, MenuItemEntry1);
	|                                                MenuItemEntry1.DefaultValues = @""Доступность == Истина
	|Нажатие == 
	|Отображать == Истина
	|Переключатель == Ложь
	|Помечен == Ложь
	|ПорядокСлияния == 0
	|СочетаниеКлавиш == Отсутствие
	|Текст == 
	|ТипСлияния == Добавить
	|(Name) == "";
	|                                                MenuItemEntry1.Name = Name;
	|                                                // Имя в виде тире не присваивать, заменять на тире только во время формирования сценария.
	|                                                MenuItemEntry1.Text = MenuItemEntry1.Name;
	|                                                MainMenu1.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|                                                OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|
	|                                                System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|                                                TreeNode1.Tag = MenuItemEntry1;
	|                                                TreeNode1.Text = MenuItemEntry1.Name;
	|                                                TreeView1.Nodes.Add(TreeNode1);
	|                                                TreeView1.SelectedNode = TreeNode1;
	|
	|                                                // Свойство Checked у родителя нужно установить в false.
	|                                                if (MenuItemEntry1.Parent.GetType() != typeof(osfDesigner.MainMenu))
	|                                                {
	|                                                    ((MenuItem)MenuItemEntry1.Parent).Checked = false;
	|                                                }
	|                                                TreeView1.SelectedNode.Expand();
	|                                            }
	|                                        }
	|                                        else // Создаем элемент подменю.
	|                                        {
	|                                            if (!Name.Contains(""Сепаратор""))
	|                                            {
	|                                                MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|                                                dictObjects.Add(componentName + Name, MenuItemEntry1);
	|                                                MenuItemEntry1.DefaultValues = @""Доступность == Истина
	|Нажатие == 
	|Отображать == Истина
	|Переключатель == Ложь
	|Помечен == Ложь
	|ПорядокСлияния == 0
	|СочетаниеКлавиш == Отсутствие
	|Текст == 
	|ТипСлияния == Добавить
	|(Name) == "";
	|                                                MenuItemEntry1.Text = Text;
	|                                                MenuItemEntry1.Name = Name;
	|
	|                                                string nameNodeParent = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", ""."");
	|                                                System.Windows.Forms.TreeNode SelectedNode = null;
	|                                                SelectedNodeSearch(TreeView1, nameNodeParent, ref SelectedNode, null);
	|                                                TreeView1.SelectedNode = SelectedNode;
	|
	|                                                MenuItemEntry MenuItemParent = (MenuItemEntry)TreeView1.SelectedNode.Tag;
	|                                                MenuItemParent.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|                                                OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|                                                System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|                                                TreeNode1.Tag = MenuItemEntry1;
	|                                                TreeNode1.Text = MenuItemEntry1.Text;
	|                                                TreeView1.SelectedNode.Nodes.Add(TreeNode1);
	|
	|                                                // Свойство Checked у родителя нужно установить в false.
	|                                                if (MenuItemEntry1.Parent.GetType() != typeof(osfDesigner.MainMenu))
	|                                                {
	|                                                    ((MenuItem)MenuItemEntry1.Parent).Checked = false;
	|                                                }
	|                                                TreeView1.SelectedNode = TreeNode1;
	|                                            }
	|                                            else
	|                                            {
	|                                                MenuItemEntry MenuItemEntry1 = new MenuItemEntry();
	|                                                dictObjects.Add(componentName + Name, MenuItemEntry1);
	|                                                MenuItemEntry1.DefaultValues = @""Доступность == Истина
	|Нажатие == 
	|Отображать == Истина
	|Переключатель == Ложь
	|Помечен == Ложь
	|ПорядокСлияния == 0
	|СочетаниеКлавиш == Отсутствие
	|Текст == 
	|ТипСлияния == Добавить
	|(Name) == "";
	|                                                MenuItemEntry1.Name = Name;
	|                                                // Имя в виде тире не присваивать, заменять на тире только во время формирования сценария.
	|                                                MenuItemEntry1.Text = MenuItemEntry1.Name;
	|                                                string nameNodeParent = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", ""."");
	|
	|                                                System.Windows.Forms.TreeNode SelectedNode = null;
	|                                                SelectedNodeSearch(TreeView1, nameNodeParent, ref SelectedNode, null);
	|                                                TreeView1.SelectedNode = SelectedNode;
	|
	|                                                MenuItemEntry MenuItemParent = (MenuItemEntry)TreeView1.SelectedNode.Tag;
	|                                                MenuItemParent.MenuItems.Add(MenuItemEntry1.M_MenuItem);
	|                                                OneScriptFormsDesigner.AddToHashtable(MenuItemEntry1.M_MenuItem, MenuItemEntry1);
	|
	|                                                System.Windows.Forms.TreeNode TreeNode1 = new System.Windows.Forms.TreeNode();
	|                                                TreeNode1.Tag = MenuItemEntry1;
	|                                                TreeNode1.Text = MenuItemEntry1.Name;
	|                                                TreeView1.SelectedNode.Nodes.Add(TreeNode1);
	|
	|                                                // Свойство Checked у родителя нужно установить в false.
	|                                                if (MenuItemEntry1.Parent.GetType() != typeof(osfDesigner.MainMenu))
	|                                                {
	|                                                    ((MenuItem)MenuItemEntry1.Parent).Checked = false;
	|                                                }
	|                                                TreeView1.SelectedNode.Expand();
	|                                            }
	|                                        }
	|                                    }
	|                                    else // Обрабатываем как свойство элемента меню.
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""="");
	|                                        string nameObj = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                        object control2 = (object)dictObjects[nameObj];
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        PropValueConverter.SetPropValue(control2, displayName, strPropertyValue, null);
	|                                    }
	|                                }
	|                                else if (control.GetType() == typeof(osfDesigner.FileSystemWatcher) ||
	|                                    control.GetType() == typeof(osfDesigner.FolderBrowserDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.ColorDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.FontDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.OpenFileDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.SaveFileDialog) ||
	|                                    control.GetType() == typeof(osfDesigner.NotifyIcon) ||
	|                                    control.GetType() == typeof(osfDesigner.ToolTip) ||
	|                                    control.GetType() == typeof(osfDesigner.Timer))
	|                                {
	|                                    string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                    string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                }
	|                                else if (strCurrent.StartsWith(""Подсказка""))
	|                                {
	|                                    string displayName = ""ToolTip на "" + OneScriptFormsDesigner.ParseBetween(strCurrent, null, "".УстановитьПодсказку"");
	|                                    string strPropertyValue = strCurrent;
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, null);
	|                                }
	|                                else if (componentName.Contains(""Вкладка""))
	|                                {
	|                                    string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                    string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                    string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                    Control parent = (Control)dictObjects[parentName];
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                }
	|                                else if (componentName.Contains(""СтрокаСостояния""))
	|                                {
	|                                    string controlName = ((osfDesigner.StatusBar)control).Name;
	|                                    string header = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                    if (header.Contains(""СтрокаСостояния""))
	|                                    {
	|                                        if (strCurrent.Contains("".Панели.Добавить("")) // Добавляем панель.
	|                                        {
	|                                            string nameItem = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, ""("", "")"");
	|                                            StatusBarPanel StatusBarPanel1 = (StatusBarPanel)dictObjects[nameItem];
	|                                            ((osfDesigner.StatusBar)control).Panels.Add(StatusBarPanel1);
	|                                        }
	|                                        else // Обрабатываем как свойство строки состояния.
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                            Control parent = (Control)dictObjects[parentName];
	|                                            PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                        }
	|                                    }
	|                                    else 
	|                                    {
	|                                        if (strCurrent.Contains(""Ф.ПанельСтрокиСостояния();"")) // Создаем панель.
	|                                        {
	|                                            StatusBarPanel StatusBarPanel1 = new StatusBarPanel();
	|                                            string nameItem = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            StatusBarPanel1.Name = nameItem;
	|                                            dictObjects.Add(controlName + nameItem, StatusBarPanel1);
	|
	|                                            StatusBarPanel1.DefaultValues = @""АвтоРазмер == Отсутствие
	|Значок == 
	|СтильГраницы == Утопленная
	|Текст == 
	|Ширина == 100
	|МинимальнаяШирина == 10
	|(Name) == 
	|"";
	|                                        }
	|                                        else // Обрабатываем как свойство панели строки состояния.
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""="");
	|                                            string nameObj = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                            object control2 = dictObjects[nameObj];
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            PropValueConverter.SetPropValue(control2, displayName, strPropertyValue, null);
	|                                        }
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""ПанельИнструментов""))
	|                                {
	|                                    string controlName = ((osfDesigner.ToolBar)control).Name;
	|                                    string header = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                    if (header.Contains(""ПанельИнструментов""))
	|                                    {
	|                                        if (strCurrent.Contains("".Кнопки.Добавить("")) // Добавляем кнопку панели инструментов.
	|                                        {
	|                                            System.Windows.Forms.ToolBarButton OriginalObj = new System.Windows.Forms.ToolBarButton();
	|                                            osfDesigner.ToolBarButton SimilarObj = new osfDesigner.ToolBarButton();
	|                                            OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                                            SimilarObj.OriginalObj = OriginalObj;
	|                                            SimilarObj.Parent = OriginalObj.Parent;
	|                                            SimilarObj.Style = (osfDesigner.ToolBarButtonStyle)OriginalObj.Style;
	|                                            OriginalObj.Tag = SimilarObj;
	|
	|                                            string nameItem = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            SimilarObj.Name = nameItem;
	|                                            ((osfDesigner.ToolBar)control).Buttons.Add(OriginalObj);
	|                                            dictObjects.Add(controlName + nameItem, SimilarObj);
	|
	|                                            SimilarObj.DefaultValues = @""Доступность == Истина
	|ИндексИзображения == -1
	|Нажата == Ложь
	|НейтральноеПоложение == Ложь
	|Отображать == Истина
	|Прямоугольник == 
	|Стиль == СтандартнаяТрехмерная
	|Текст == 
	|ТекстПодсказки == 
	|(Name) == "";
	|                                        }
	|                                        else // Обрабатываем как свойство панели инструментов.
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                            Control parent = (Control)dictObjects[parentName];
	|                                            PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                        }
	|                                    }
	|                                    else // Обрабатываем как свойство кнопки панели инструментов.
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""="");
	|                                        string nameObj = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                        object control2 = dictObjects[nameObj];
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        PropValueConverter.SetPropValue(control2, displayName, strPropertyValue, null);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""СписокЭлементов""))
	|                                {
	|                                    string controlName = ((osfDesigner.ListView)control).Name;
	|                                    string header = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                    if (header.Contains(""СписокЭлементов"")) // Обрабатываем как свойство списка элементов.
	|                                    {
	|                                        if (strCurrent.Contains("".Элементы.Добавить("")) // Добавляем элемент списка элементов.
	|                                        {
	|                                            string nameItem = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, ""("", "")"");
	|                                            ListViewItem ListViewItem1 = (ListViewItem)dictObjects[nameItem];
	|                                            ((osfDesigner.ListView)control).Items.Add(ListViewItem1);
	|                                        }
	|                                        else if (strCurrent.Contains("".Колонки.Добавить("")) // Добавляем колонку списка элементов.
	|                                        {
	|                                            string nameItem = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, ""("", "")"");
	|                                            ColumnHeader ColumnHeader1 = (ColumnHeader)dictObjects[nameItem];
	|                                            ((osfDesigner.ListView)control).Columns.Add(ColumnHeader1);
	|                                        }
	|                                        else // Обрабатываем как свойство для СписокЭлементов.
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                            Control parent = (Control)dictObjects[parentName];
	|                                            PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                        }
	|                                    }
	|                                    else
	|                                    {
	|                                        if (strCurrent.Contains(""Ф.ЭлементСпискаЭлементов();"")) // Создаем элемент списка элементов.
	|                                        {
	|                                            ListViewItem ListViewItem1 = new ListViewItem();
	|                                            string nameItem = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            ListViewItem1.Name = nameItem;
	|                                            dictObjects.Add(controlName + nameItem, ListViewItem1);
	|
	|                                            ListViewItem1.DefaultValues = @""ИспользоватьСтильДляПодэлементов == Истина
	|ОсновнойЦвет == ТекстОкна
	|Помечен == Ложь
	|Текст == 
	|ЦветФона == Окно
	|Шрифт == Microsoft Sans Serif; 7,8pt
	|Подэлементы == (Коллекция)
	|ИндексИзображения == -1
	|(Name) == "";
	|                                        }
	|                                        else if (strCurrent.Contains(""Ф.ПодэлементСпискаЭлементов();"")) // Создаем подэлемент списка элементов.
	|                                        {
	|                                            ListViewSubItem ListViewSubItem1 = new ListViewSubItem();
	|                                            string nameItem = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            ListViewSubItem1.Name = nameItem;
	|                                            dictObjects.Add(controlName + nameItem, ListViewSubItem1);
	|
	|                                            ListViewSubItem1.DefaultValues = @""ОсновнойЦвет == ТекстОкна
	|Текст == 
	|ЦветФона == Окно
	|Шрифт == Microsoft Sans Serif; 7,8pt
	|(Name) == "";
	|                                        }
	|                                        else if (strCurrent.Contains(""Ф.Колонка();"")) // Создаем колонку списка элементов.
	|                                        {
	|                                            ColumnHeader ColumnHeader1 = new ColumnHeader();
	|                                            string nameItem = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            ColumnHeader1.Name = nameItem;
	|                                            dictObjects.Add(controlName + nameItem, ColumnHeader1);
	|
	|                                            ColumnHeader1.DefaultValues = @""ВыравниваниеТекста == Лево
	|Текст == 
	|ТипСортировки == Текст
	|Ширина == 60
	|(Name) == "";
	|                                        }
	|                                        else if (strCurrent.Contains("".Подэлементы.Добавить("")) // Добавляем подэлемент списка элементов.
	|                                        {
	|                                            string nameItem = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                            ListViewItem ListViewItem1 = (osfDesigner.ListViewItem)dictObjects[nameItem];
	|                                            string nameSubItem = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, ""("", "")"");
	|                                            ListViewSubItem ListViewSubItem1 = (osfDesigner.ListViewSubItem)dictObjects[nameSubItem];
	|                                            ListViewItem1.SubItems.Add(ListViewSubItem1);
	|                                        }
	|                                        else // Обрабатываем как свойство для элемента или подэлемента СписокЭлементов.
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""="");
	|                                            string nameObj = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                            object control2 = dictObjects[nameObj];
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            PropValueConverter.SetPropValue(control2, displayName, strPropertyValue, null);
	|                                        }
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""ПолеСписка""))
	|                                {
	|                                    if (strCurrent.Contains("".Элементы.Добавить(Ф.ЭлементСписка("")) // Добавляем элемент поля списка.
	|                                    {
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""(Ф.ЭлементСписка"", "");"");
	|                                        string itemText = OneScriptFormsDesigner.ParseBetween(strPropertyValue, ""("", "","").Replace(""\u0022"", """");
	|                                        string itemValue = OneScriptFormsDesigner.ParseBetween(strPropertyValue, "","", "")"");
	|
	|                                        osfDesigner.ListItemListBox ListItemListBox1 = new ListItemListBox();
	|                                        ListItemListBox1.Text = itemText;
	|
	|                                        if (itemValue.StartsWith(""\u0022"") && itemValue.EndsWith(""\u0022"")) // Тип Строка.
	|                                        {
	|                                            itemValue = itemValue.Replace(""\u0022"", """");
	|                                            ListItemListBox1.Value = itemValue;
	|                                            ListItemListBox1.ValueType = DataType.Строка;
	|                                        }
	|                                        else if (strPropertyValue.Contains(""Ложь"") || strPropertyValue.Contains(""Истина"")) // Тип Булево.
	|                                        {
	|                                            ListItemListBox1.Value = true;
	|                                            ListItemListBox1.ValueType = DataType.Булево;
	|                                            if (itemValue == ""Ложь"")
	|                                            {
	|                                                ListItemListBox1.Value = false;
	|                                            }
	|                                        }
	|                                        else if (strPropertyValue.Contains(""Дата"")) // Тип Дата.
	|                                        {
	|                                            DateTime rez1 = new DateTime();
	|                                            string[] result1 = OneScriptFormsDesigner.ParseBetween(strPropertyValue, ""Дата("", ""))"").Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                                            for (int i2 = 0; i2 < result1.Length; i2++)
	|                                            {
	|                                                if (i2 == 0)
	|                                                {
	|                                                    rez1 = rez1.AddYears(Int32.Parse(result1[0]) - 1);
	|                                                }
	|                                                if (i2 == 1)
	|                                                {
	|                                                    rez1 = rez1.AddMonths(Int32.Parse(result1[1]) - 1);
	|                                                }
	|                                                if (i2 == 2)
	|                                                {
	|                                                    rez1 = rez1.AddDays(Int32.Parse(result1[2]) - 1);
	|                                                }
	|                                                if (i2 == 3)
	|                                                {
	|                                                    rez1 = rez1.AddHours(Int32.Parse(result1[3]));
	|                                                }
	|                                                if (i2 == 4)
	|                                                {
	|                                                    rez1 = rez1.AddMinutes(Int32.Parse(result1[4]));
	|                                                }
	|                                                if (i2 == 5)
	|                                                {
	|                                                    rez1 = rez1.AddSeconds(Int32.Parse(result1[5]));
	|                                                }
	|                                            }
	|                                            ListItemListBox1.Value = rez1;
	|                                            ListItemListBox1.ValueType = DataType.Дата;
	|                                        }
	|                                        else // Тип Число.
	|                                        {
	|                                            ListItemListBox1.Value = Int32.Parse(itemValue);
	|                                            ListItemListBox1.ValueType = DataType.Число;
	|                                        }
	|                                        ((ListBox)control).Items.Add(ListItemListBox1);
	|                                    }
	|                                    else // Обрабатываем как свойство поля списка.
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                        Control parent = (Control)dictObjects[parentName];
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""ПолеВыбора""))
	|                                {
	|                                    if (strCurrent.Contains("".Элементы.Добавить(Ф.ЭлементСписка("")) // Добавляем элемент поля выбора.
	|                                    {
	|                                        // Определяем тип элемента списка и создаем его.
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""(Ф.ЭлементСписка"", "");"");
	|                                        string itemText = OneScriptFormsDesigner.ParseBetween(strPropertyValue, ""("", "","").Replace(""\u0022"", """");
	|                                        string itemValue = OneScriptFormsDesigner.ParseBetween(strPropertyValue, "","", "")"");
	|
	|                                        osfDesigner.ListItemComboBox ListItemComboBox1 = new ListItemComboBox();
	|                                        ListItemComboBox1.Text = itemText;
	|
	|                                        if (itemValue.StartsWith(""\u0022"") && itemValue.EndsWith(""\u0022"")) // Тип Строка.
	|                                        {
	|                                            itemValue = itemValue.Replace(""\u0022"", """");
	|                                            ListItemComboBox1.Value = itemValue;
	|                                            ListItemComboBox1.ValueType = DataType.Строка;
	|                                        }
	|                                        else if (strPropertyValue.Contains(""Ложь"") || strPropertyValue.Contains(""Истина"")) // Тип Булево.
	|                                        {
	|                                            ListItemComboBox1.Value = true;
	|                                            ListItemComboBox1.ValueType = DataType.Булево;
	|                                            if (itemValue == ""Ложь"")
	|                                            {
	|                                                ListItemComboBox1.Value = false;
	|                                            }
	|                                        }
	|                                        else if (strPropertyValue.Contains(""Дата"")) // Тип Дата.
	|                                        {
	|                                            DateTime rez1 = new DateTime();
	|                                            string[] result1 = OneScriptFormsDesigner.ParseBetween(strPropertyValue, ""Дата("", ""))"").Split(new string[] { "","" }, StringSplitOptions.RemoveEmptyEntries);
	|                                            for (int i2 = 0; i2 < result1.Length; i2++)
	|                                            {
	|                                                if (i2 == 0)
	|                                                {
	|                                                    rez1 = rez1.AddYears(Int32.Parse(result1[0]) - 1);
	|                                                }
	|                                                if (i2 == 1)
	|                                                {
	|                                                    rez1 = rez1.AddMonths(Int32.Parse(result1[1]) - 1);
	|                                                }
	|                                                if (i2 == 2)
	|                                                {
	|                                                    rez1 = rez1.AddDays(Int32.Parse(result1[2]) - 1);
	|                                                }
	|                                                if (i2 == 3)
	|                                                {
	|                                                    rez1 = rez1.AddHours(Int32.Parse(result1[3]));
	|                                                }
	|                                                if (i2 == 4)
	|                                                {
	|                                                    rez1 = rez1.AddMinutes(Int32.Parse(result1[4]));
	|                                                }
	|                                                if (i2 == 5)
	|                                                {
	|                                                    rez1 = rez1.AddSeconds(Int32.Parse(result1[5]));
	|                                                }
	|                                            }
	|                                            ListItemComboBox1.Value = rez1;
	|                                            ListItemComboBox1.ValueType = DataType.Дата;
	|                                        }
	|                                        else // это тип Число
	|                                        {
	|                                            ListItemComboBox1.Value = Int32.Parse(itemValue);
	|                                            ListItemComboBox1.ValueType = DataType.Число;
	|                                        }
	|                                        ((ComboBox)control).Items.Add(ListItemComboBox1);
	|                                    }
	|                                    else // Обрабатываем как свойство поля выбора.
	|                                    {
	|                                        string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                        string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                        string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                        Control parent = (Control)dictObjects[parentName];
	|                                        PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""СеткаДанных""))
	|                                {
	|                                    string controlName = ((osfDesigner.DataGrid)control).Name;
	|                                    string header = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                    if (header.Contains(""СеткаДанных"")) // Обрабатываем как свойство сетки данных.
	|                                    {
	|                                        if (!strCurrent.Contains("".СтилиТаблицы.Добавить(""))
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                            Control parent = (Control)dictObjects[parentName];
	|                                            PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                        }
	|                                    }
	|                                    else
	|                                    {
	|                                        if (strCurrent.Contains(""Ф.СтильТаблицыСеткиДанных();""))
	|                                        {
	|                                            osfDesigner.DataGridTableStyle SimilarObj = new osfDesigner.DataGridTableStyle();
	|                                            System.Windows.Forms.DataGridTableStyle OriginalObj = new System.Windows.Forms.DataGridTableStyle();
	|                                            SimilarObj.OriginalObj = OriginalObj;
	|                                            OneScriptFormsDesigner.AddToHashtable(OriginalObj, SimilarObj);
	|                                            OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                                            string nameStyle = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            SimilarObj.NameStyle = nameStyle;
	|                                            ((osfDesigner.DataGrid)control).TableStyles.Add(OriginalObj);
	|                                            dictObjects.Add(controlName + nameStyle, SimilarObj);
	|
	|                                            SimilarObj.DefaultValues = @""ШрифтЗаголовков == Microsoft Sans Serif; 7,8pt
	|ПредпочтительнаяВысотаСтрок == 18
	|ПредпочтительнаяШиринаСтолбцов == 75
	|ШиринаЗаголовковСтрок == 35
	|РазрешитьСортировку == Истина
	|ОтображатьЗаголовкиСтолбцов == Истина
	|ОтображатьЗаголовкиСтрок == Истина
	|ИмяОтображаемого == 
	|СтилиКолонкиСеткиДанных == (Коллекция)
	|ТолькоЧтение == Ложь
	|ОсновнойЦвет == ТекстОкна
	|ОсновнойЦветЗаголовков == ТекстЭлемента
	|ЦветСетки == ЛицеваяЭлемента
	|ЦветФона == Окно
	|ЦветФонаЗаголовков == ЛицеваяЭлемента
	|ЦветФонаНечетныхСтрок == Окно"";
	|                                        }
	|                                        else if (strCurrent.Contains(""Ф.СтильКолонкиБулево();""))
	|                                        {
	|                                            string nameObj = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            DataGridBoolColumn DataGridBoolColumn1 = new DataGridBoolColumn();
	|                                            dictObjects.Add(controlName + nameObj, DataGridBoolColumn1);
	|                                            DataGridBoolColumn1.NameStyle = nameObj;
	|
	|                                            DataGridBoolColumn1.DefaultValues = @""Ширина == 75
	|Выравнивание == Лево
	|ТекстЗаголовка == 
	|ИмяОтображаемого == 
	|ТолькоЧтение == Ложь"";
	|                                        }
	|                                        else if (strCurrent.Contains(""Ф.СтильКолонкиПолеВвода();""))
	|                                        {
	|                                            string nameObj = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            DataGridTextBoxColumn DataGridTextBoxColumn1 = new DataGridTextBoxColumn();
	|                                            dictObjects.Add(controlName + nameObj, DataGridTextBoxColumn1);
	|                                            DataGridTextBoxColumn1.NameStyle = nameObj;
	|
	|                                            DataGridTextBoxColumn1.DefaultValues = @""Ширина == 75
	|Выравнивание == Лево
	|ТекстЗаголовка == 
	|ДвойноеНажатие == 
	|ИмяОтображаемого == 
	|ТолькоЧтение == Ложь"";
	|                                        }
	|                                        else if (strCurrent.Contains(""Ф.СтильКолонкиПолеВыбора();""))
	|                                        {
	|                                            string nameObj = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""="");
	|                                            DataGridComboBoxColumnStyle DataGridComboBoxColumnStyle1 = new DataGridComboBoxColumnStyle();
	|                                            dictObjects.Add(controlName + nameObj, DataGridComboBoxColumnStyle1);
	|                                            DataGridComboBoxColumnStyle1.NameStyle = nameObj;
	|
	|                                            DataGridComboBoxColumnStyle1.DefaultValues = @""Ширина == 75
	|Выравнивание == Лево
	|ТекстЗаголовка == 
	|ИмяОтображаемого == 
	|ТолькоЧтение == Ложь"";
	|                                        }
	|                                        else if (strCurrent.Contains("".СтилиКолонкиСеткиДанных.Добавить(""))
	|                                        {
	|                                            string nameTableStyle = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                            osfDesigner.DataGridTableStyle tableStyle = (osfDesigner.DataGridTableStyle)dictObjects[nameTableStyle];
	|                                            string nameColumnStyle = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, ""("", "")"");
	|                                            Component columnStyle = (Component)dictObjects[nameColumnStyle];
	|                                            tableStyle.OriginalObj.GridColumnStyles.Add((DataGridColumnStyle)columnStyle);
	|                                        }
	|                                        else
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""="");
	|                                            string nameObj = controlName + OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                            Component control2 = (Component)dictObjects[nameObj];
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            PropValueConverter.SetPropValue(control2, displayName, strPropertyValue, null);
	|                                        }
	|                                    }
	|                                }
	|                                else if (componentName.Contains(""Дерево""))
	|                                {
	|                                    string header = OneScriptFormsDesigner.ParseBetween(strCurrent, null, ""."");
	|                                    if (header.Contains(""Дерево"")) // Обрабатываем как свойство дерева.
	|                                    {
	|                                        if (strCurrent.Contains(""Узлы""))
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""."");
	|                                            PropValueConverter.SetPropValue(control, displayName, strCurrent, null);
	|                                        }
	|                                        else
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                            string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                            string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                            Control parent = (Control)dictObjects[parentName];
	|                                            PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                        }
	|                                    }
	|                                    else // Обрабатываем как свойство узла.
	|                                    {
	|                                        if (strCurrent.Contains(""Узлы""))
	|                                        {
	|                                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, ""."", ""."");
	|                                            PropValueConverter.SetPropValue(control, displayName, strCurrent, null);
	|                                        }
	|                                        else
	|                                        {
	|                                            string displayName = ""Узлы"";
	|                                            PropValueConverter.SetPropValue(control, displayName, strCurrent, null);
	|                                        }
	|                                    }
	|                                }
	|                                else
	|                                {
	|                                    string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, componentName + ""."", ""="");
	|                                    string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                    string parentName = OneScriptFormsDesigner.ParseBetween(ComponentBlok, componentName + @"".Родитель="", @"";"");
	|                                    Control parent = (Control)dictObjects[parentName];
	|
	|                                    if (parent.GetType() == typeof(osfDesigner.TabPage))
	|                                    {
	|                                        parent = OneScriptFormsDesigner.RevertOriginalObj(parent);
	|                                    }
	|
	|                                    PropValueConverter.SetPropValue(control, displayName, strPropertyValue, parent);
	|                                }
	|                            }
	|                        }
	|                    }
	|
	|                    if (control.GetType() == typeof(osfDesigner.ToolBar) || 
	|                        control.GetType() == typeof(osfDesigner.Splitter) || 
	|                        control.GetType() == typeof(osfDesigner.StatusBar))
	|                    {
	|                        ((Control)control).BringToFront();
	|                    }
	|
	|                    result = null;
	|                    ComponentBlok = null;
	|                    propertyGrid1.Refresh();
	|                }
	|
	|            }
	|
	|            // Если для формы заданы КнопкаОтмена и/или КнопкаПринять, установим их.
	|            if (rootBlok != null)
	|            {
	|                // Установим для формы свойства.
	|                result = rootBlok.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                for (int i1 = 0; i1 < result.Length; i1++)
	|                {
	|                    string strCurrent = result[i1];
	|                    if (strCurrent.Length >= 2)
	|                    {
	|                        if (strCurrent.Substring(0, 2) != @""//"")
	|                        {
	|                            string displayName = OneScriptFormsDesigner.ParseBetween(strCurrent, formName + ""."", ""="");
	|                            if (displayName == ""КнопкаОтмена"" || displayName == ""КнопкаПринять"")
	|                            {
	|                                string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                PropValueConverter.SetPropValue(rootComponent, displayName, strPropertyValue);
	|                            }
	|	
	|                            if (displayName == ""Меню"")
	|                            {
	|                                string strPropertyValue = OneScriptFormsDesigner.ParseBetween(strCurrent, ""="", "";"");
	|                                ((Form)rootComponent).Menu = (System.Windows.Forms.MainMenu)dictObjects[strPropertyValue];
	|                            }
	|
	|                            if (strCurrent.StartsWith(""Подсказка""))
	|                            {
	|                                displayName = ""ToolTip на "" + OneScriptFormsDesigner.ParseBetween(strCurrent, null, "".УстановитьПодсказку"");
	|                                string strPropertyValue = strCurrent;
	|                                PropValueConverter.SetPropValue(rootComponent, displayName, strPropertyValue);
	|                            }
	|                        }
	|                    }
	|                }
	|                propertyGrid1.Refresh();
	|            }
	|
	|            ComponentCollection ctrlsExisting = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost().Container.Components;
	|            ISelectionService iSel = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost().GetService(typeof(ISelectionService)) as ISelectionService;
	|            if (iSel == null)
	|            {
	|                return;
	|            }
	|            iSel.SetSelectedComponents(new IComponent[] { ctrlsExisting[0] });
	|
	|            pDesigner.DSME.PropertyGridHost.ReloadTreeView();
	|            pDesigner.DSME.PropertyGridHost.ChangeSelectNode((Component)ctrlsExisting[0]);
	|        }
	|
	|        private void _form_Click(object sender, EventArgs e)
	|        {
	|            pDesigner.SplitterpDesigner.Visible = true;
	|            pDesigner.CodePanel.Visible = false;
	|            this._addForm.Enabled = true; // ""Добавить Форму""
	|            this._deleteForm.Enabled = true; // ""Удалить Форму""
	|            this._edit.Enabled = true; // ""Правка""
	|            this._tools.Enabled = true; // ""Инструменты""
	|            pDesigner.SplitterpDesigner.Panel2Collapsed = false;
	|            pnl4Toolbox.Visible = true;
	|            this._form.Enabled = false;
	|            this._code.Enabled = true;
	|            this._form.CheckState = System.Windows.Forms.CheckState.Checked;
	|            this._code.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|        }
	|
	|        private void _code_Click(object sender, EventArgs e)
	|        {
	|            SaveScript.comps.Clear();
	|            pDesigner.SplitterpDesigner.Visible = false;
	|            pDesigner.CodePanel.Visible = true;
	|            this._addForm.Enabled = false; // ""Добавить Форму""
	|            this._deleteForm.Enabled = false; // ""Удалить Форму""
	|            this._edit.Enabled = false; // ""Правка""
	|            this._tools.Enabled = false; // ""Инструменты""
	|            pDesigner.SplitterpDesigner.Panel2Collapsed = true;
	|            pnl4Toolbox.Visible = false;
	|            this._form.Enabled = true;
	|            this._code.Enabled = false;
	|            this._form.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            this._code.CheckState = System.Windows.Forms.CheckState.Checked;
	|            pDesigner.RichTextBox.Text = SaveScript.GetScriptText();
	|        }
	|
	|        public string Version
	|        {
	|            get
	|            {
	|                if (string.IsNullOrEmpty(_version))
	|                {
	|                    // Получение версии файла запущенной сборки.
	|                    System.Diagnostics.FileVersionInfo FVI = System.Diagnostics.FileVersionInfo.GetVersionInfo(Assembly.GetExecutingAssembly().Location);
	|                    _version = FVI.ProductVersion;
	|                }
	|                return _version;
	|            }
	|        }
	|
	|        // Очистка используемых ресурсов.
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing && (components != null))
	|            {
	|                components.Dispose();
	|            }
	|            base.Dispose(disposing);
	|        }
	|
	|        public void ChangeImage(bool change)
	|        {
	|            if (change)
	|            {
	|                _tabOrder1.CheckState = System.Windows.Forms.CheckState.Checked;
	|            }
	|            else
	|            {
	|                _tabOrder1.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            }
	|        }
	|
	|        public Control GetmainForm()
	|        {
	|            return this;
	|        }
	|
	|        private void pDesignerMainForm_Load(object sender, EventArgs e)
	|        {
	|            // таймер для обеспечения срабатывания по правой кнопке мыши сворачивания раскрытого свойства СписокИзображений.
	|            this.timerLoad = new System.Windows.Forms.Timer();
	|            this.timerLoad.Enabled = true;
	|            this.timerLoad.Tick += new EventHandler(this.timerLoad_Tick);
	|        }
	|
	|        private void _deleteForm_Click(object sender, EventArgs e)
	|        {
	|            if (pDesigner.TabControl.TabPages.Count <= 1)
	|            {
	|                System.Windows.Forms.MessageBox.Show(
	|                    ""Удалить единственную форму не допускается."",
	|                    """",
	|                    MessageBoxButtons.OK,
	|                    MessageBoxIcon.Exclamation,
	|                    MessageBoxDefaultButton.Button1
	|                    );
	|            }
	|            else
	|            {
	|                IpDesignerCore.RemoveDesignSurface(IpDesignerCore.ActiveDesignSurface);
	|            }
	|        }
	|
	|        private void _generateScript_Click(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.SaveFileDialog saveFileDialog1 = new System.Windows.Forms.SaveFileDialog();
	|            saveFileDialog1.RestoreDirectory = true;
	|            saveFileDialog1.OverwritePrompt = true;
	|            saveFileDialog1.Filter = ""OS files(*.os)|*.os|All files(*.*)|*.*"";
	|            if (saveFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            SaveScript.comps.Clear();
	|            File.WriteAllText(saveFileDialog1.FileName, SaveScript.GetScriptText(saveFileDialog1.FileName), Encoding.UTF8);
	|
	|            //File.WriteAllText(""C:\\444\\Проба.os"", SaveScript.GetScriptText(""C:\\444\\""), Encoding.UTF8);
	|        }
	|
	|        private void _unDo_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.UndoOnDesignSurface();
	|        }
	|
	|        private void _reDo_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.RedoOnDesignSurface();
	|        }
	|
	|        private void OnMenuClick(object sender, EventArgs e)
	|        {
	|            string cmd = (sender as ToolStripMenuItem).Text;
	|            if (cmd == ""Вырезать"")
	|            {
	|                IpDesignerCore.CutOnDesignSurface();
	|            }
	|            else if (cmd == ""Копировать"")
	|            {
	|                IpDesignerCore.CopyOnDesignSurface();
	|            }
	|            else if (cmd == ""Вставить"")
	|            {
	|                IpDesignerCore.PasteOnDesignSurface();
	|            }
	|            else if (cmd == ""Удалить"")
	|            {
	|                IpDesignerCore.DeleteOnDesignSurface();
	|            }
	|        }
	|
	|        private void _tabOrder_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.SwitchTabOrder();
	|
	|            if (_tabOrder.CheckState == System.Windows.Forms.CheckState.Unchecked)
	|            {
	|                _tabOrder.CheckState = System.Windows.Forms.CheckState.Checked;
	|            }
	|            else if (_tabOrder.CheckState == System.Windows.Forms.CheckState.Checked)
	|            {
	|                _tabOrder.CheckState = System.Windows.Forms.CheckState.Unchecked;
	|            }
	|        }
	|
	|        private void _about_Click(object sender, EventArgs e)
	|        {
	|            string str1 = ""Дизайнер форм от ahyahy "" + Environment.NewLine + 
	|                ""Версия "" + Version + Environment.NewLine + 
	|                ""(Создана на основе программы: "" + Environment.NewLine + 
	|                ""picoFormDesigner coded by Paolo Foti "" + Environment.NewLine +
	|                ""Version is: 1.0.0.0)"";
	|            MessageBox.Show(str1, ""Дизайнер форм для OneScriptForms"", MessageBoxButtons.OK, MessageBoxIcon.Question);
	|        }
	|
	|        private void _useSnapLines_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.AddDesignSurface<Form>(640, 480, AlignmentModeEnum.SnapLines, new Size(1, 1));
	|        }
	|
	|        private void _useGrid_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.AddDesignSurface<Form>(640, 480, AlignmentModeEnum.Grid, new Size(16, 16));
	|        }
	|
	|        private void _useGridWithoutSnapping_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.AddDesignSurface<Form>(640, 480, AlignmentModeEnum.GridWithoutSnapping, new Size(16, 16));
	|        }
	|
	|        private void _useNoGuides_Click(object sender, EventArgs e)
	|        {
	|            IpDesignerCore.AddDesignSurface<Form>(640, 480, AlignmentModeEnum.NoGuides, new Size(1, 1));
	|        }
	|
	|        //* 17.12.2021 perfolenta
	|        private bool ГотовоКЗакрытию()
	|        {
	|            if (pDesignerCore.Dirty)
	|            {
	|                string str1 = ""Одна из редактируемых форм изменена! Изменения будут потеряны!\n\nВыйти из конструктора форм?"";
	|                if (MessageBox.Show(str1, ""Дизайнер форм для OneScriptForms"", MessageBoxButtons.YesNo, MessageBoxIcon.Question) != System.Windows.Forms.DialogResult.Yes)
	|                    return false;
	|            }
	|            return true;
	|        }
	|
	|        private void pDesignerMainForm_Closing(object sender, CancelEventArgs e)
	|        {
	|            if (!ГотовоКЗакрытию())
	|            {
	|                e.Cancel = true;
	|                return;
	|            }
	|
	|            if (DestroyDesignSurfaces())
	|                e.Cancel = false;
	|            else
	|                e.Cancel = true;
	|
	|        }
	|
	|        private bool DestroyDesignSurfaces()
	|        {
	|            //????????????? тут надо уничтожить все DesignSurfaces и вернуть успешность этой операции
	|
	|            return true;
	|        }
	|        //***
	|
	|        public void GetDefaultValues(dynamic comp)
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            string DefaultValues1 = """";
	|            object pg = pDesigner.DSME.PropertyGridHost.PropertyGrid;
	|            ((System.Windows.Forms.PropertyGrid)pg).SelectedObject = comp;
	|            object view1 = pg.GetType().GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            GridItemCollection GridItemCollection1 = (GridItemCollection)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            if (GridItemCollection1 == null)
	|            {
	|                return;
	|            }
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null)  // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"")  // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        public static void SelectedNodeSearch(System.Windows.Forms.TreeView treeView, string nameNodeParent, ref System.Windows.Forms.TreeNode node, System.Windows.Forms.TreeNodeCollection treeNodes = null)
	|        {
	|            System.Windows.Forms.TreeNodeCollection _treeNodes;
	|            if (treeNodes == null)
	|            {
	|                _treeNodes = treeView.Nodes;
	|            }
	|            else
	|            {
	|                _treeNodes = treeNodes;
	|            }
	|            System.Windows.Forms.TreeNode treeNode = null;
	|            for (int i = 0; i < _treeNodes.Count; i++)
	|            {
	|                treeNode = (System.Windows.Forms.TreeNode)_treeNodes[i];
	|                if (treeNode.Name == nameNodeParent)
	|                {
	|                    node = treeNode;
	|                    break;
	|                }
	|                if (treeNode.Nodes.Count > 0)
	|                {
	|                    SelectedNodeSearch(treeView, nameNodeParent, ref node, treeNode.Nodes);
	|                }
	|            }
	|        }
	|    }
	|
	|    public class PropertyGridMessageFilter : IMessageFilter
	|    {
	|        public Control Control; // Элемент управления для мониторинга.
	|
	|        public MouseEventHandler MouseUp;
	|
	|        public PropertyGridMessageFilter(Control c, MouseEventHandler meh)
	|        {
	|            this.Control = c;
	|            MouseUp = meh;
	|        }
	|
	|        public bool PreFilterMessage(ref Message m)
	|        {
	|            if (!this.Control.IsDisposed && m.HWnd == this.Control.Handle && MouseUp != null)
	|            {
	|                System.Windows.Forms.MouseButtons mb = System.Windows.Forms.MouseButtons.None;
	|
	|                switch (m.Msg)
	|                {
	|                    case 0x0202:/*WM_LBUTTONUP, see winuser.h*/
	|                        mb = System.Windows.Forms.MouseButtons.Left;
	|                        break;
	|                    case 0x0205:/*WM_RBUTTONUP*/
	|                        mb = System.Windows.Forms.MouseButtons.Right;
	|                        break;
	|                }
	|
	|                if (mb != System.Windows.Forms.MouseButtons.None)
	|                {
	|                    MouseEventArgs e = new MouseEventArgs(mb, 1, m.LParam.ToInt32() & 0xFFff, m.LParam.ToInt32() >> 16, 0);
	|                    MouseUp(Control, e);
	|                }
	|            }
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\pDesignerMainForm.cs");
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Drawing;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class pDesigner : System.Windows.Forms.UserControl, IpDesigner
	|    {
	|        private IContainer components = null;
	|        private SplitContainer splitterpDesigner;
	|        public static SplitContainer SplitterpDesigner;
	|        private System.Windows.Forms.Panel codePanel; // Панель с кодом скрипта.
	|        private System.Windows.Forms.RichTextBox richTextBox;
	|        public static System.Windows.Forms.Panel CodePanel = null;
	|        public static System.Windows.Forms.RichTextBox RichTextBox = null;
	|        private System.Windows.Forms.TabControl tbCtrlpDesigner;
	|        public static System.Windows.Forms.TabControl TabControl;
	|        public static DesignSurfaceManagerExt DSME = null;
	|        private System.Windows.Forms.Form form;
	|
	|        public pDesigner()
	|        {
	|            this.codePanel = new System.Windows.Forms.Panel();
	|            this.codePanel.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.richTextBox = new System.Windows.Forms.RichTextBox();
	|            this.richTextBox.Parent = this.codePanel;
	|            this.richTextBox.WordWrap = false;
	|            this.richTextBox.ReadOnly = true;
	|            this.richTextBox.BackColor = Color.White;
	|            this.richTextBox.EnableContextMenu();
	|
	|            this.richTextBox.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.codePanel.Hide();
	|
	|            this.splitterpDesigner = new SplitContainer();
	|            this.tbCtrlpDesigner = new System.Windows.Forms.TabControl();
	|            this.splitterpDesigner.Panel1.SuspendLayout();
	|            this.splitterpDesigner.SuspendLayout();
	|            this.SuspendLayout();
	|            //
	|            // splitterpDesigner
	|            //
	|            this.splitterpDesigner.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.splitterpDesigner.Location = new Point(0, 0);
	|            this.splitterpDesigner.BackColor = Color.LightSteelBlue;
	|            this.splitterpDesigner.Name = ""splitterpDesigner"";
	|            //
	|            // splitterpDesigner.Panel1
	|            //
	|            this.splitterpDesigner.Panel1.Controls.Add(this.tbCtrlpDesigner);
	|            this.splitterpDesigner.Size = new Size(635, 305);
	|            this.splitterpDesigner.SplitterDistance = 439;
	|            this.splitterpDesigner.TabIndex = 0;
	|            //
	|            // tbCtrlpDesigner
	|            //
	|            this.tbCtrlpDesigner.Dock = System.Windows.Forms.DockStyle.Fill;
	|            this.tbCtrlpDesigner.Location = new Point(0, 0);
	|            this.tbCtrlpDesigner.Name = ""tbCtrlpDesigner"";
	|            this.tbCtrlpDesigner.SelectedIndex = 0;
	|            this.tbCtrlpDesigner.Size = new Size(439, 305);
	|            this.tbCtrlpDesigner.TabIndex = 0;
	|            this.tbCtrlpDesigner.SelectedIndexChanged += new EventHandler(this.tbCtrlpDesigner_SelectedIndexChanged);
	|            //
	|            // pDesigner
	|            //
	|            this.AutoScaleDimensions = new SizeF(8F, 16F);
	|            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
	|            this.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
	|            this.Controls.Add(this.splitterpDesigner);
	|            this.Controls.Add(this.codePanel);
	|            this.Name = ""pDesigner"";
	|            this.Size = new Size(635, 305);
	|            this.splitterpDesigner.Panel1.ResumeLayout(false);
	|            this.splitterpDesigner.ResumeLayout(false);
	|            this.ResumeLayout(false);
	|
	|            DesignSurfaceManager = new DesignSurfaceManagerExt();
	|            DesignSurfaceManager.PropertyGridHost.Parent = this.splitterpDesigner.Panel2;
	|            Toolbox = null;
	|            this.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            DSME = DesignSurfaceManager;
	|            SplitterpDesigner = splitterpDesigner;
	|            CodePanel = codePanel;
	|            RichTextBox = richTextBox;
	|            TabControl = tbCtrlpDesigner;
	|        }
	|
	|        // Очистите все используемые ресурсы.
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing && (components != null))
	|            {
	|                components.Dispose();
	|            }
	|            base.Dispose(disposing);
	|        }
	|
	|        // Экземпляр класса DesignSurfaceManagerExt должен наблюдать за событиями которые изменяют активную область дизайнера.
	|        public DesignSurfaceManagerExt DesignSurfaceManager { get; private set; }
	|
	|        public static implicit operator bool(pDesigner d)
	|        {
	|            bool isValid = true;
	|            // Объект 'd' должен быть правильно инициализирован.
	|            isValid &= ((null == d.Toolbox) ? false : true);
	|            return isValid;
	|        }
	|
	|        private void tbCtrlpDesigner_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            System.Windows.Forms.TabControl tabCtrl = sender as System.Windows.Forms.TabControl;
	|            int index = this.tbCtrlpDesigner.SelectedIndex;
	|            if (index >= 0)
	|            {
	|                DesignSurfaceManager.ActiveDesignSurface = (DesignSurfaceExt2)DesignSurfaceManager.DesignSurfaces[index];
	|            }
	|            else
	|            {
	|                DesignSurfaceManager.ActiveDesignSurface = null;
	|                DesignSurfaceManager.PropertyGridHost.PropertyGrid.SelectedObject = null;
	|                DesignSurfaceManager.PropertyGridHost.ComboBox.Items.Clear();
	|            }
	|        }
	|
	|        // Получение и установка реальной панели элементов (Toolbox), предоставляемой пользователю.
	|        public System.Windows.Forms.ListBox Toolbox { get; set; }
	|
	|        public System.Windows.Forms.TabControl TabControlHostingDesignSurfaces
	|        {
	|            get { return this.tbCtrlpDesigner; }
	|        }
	|
	|        public PropertyGridHost PropertyGridHost
	|        {
	|            get { return DesignSurfaceManager.PropertyGridHost; }
	|        }
	|
	|        public DesignSurfaceExt2 ActiveDesignSurface
	|        {
	|            get { return DesignSurfaceManager.ActiveDesignSurface as DesignSurfaceExt2; }
	|        }
	|
	|        // Создайте область дизайнера (DesignSurface) и корневой компонент (rootComponent) (элемент управления .NET) используя IDesignSurfaceExt.CreateRootComponent().
	|        // Если режим выравнивания (alignmentMode) не использует сетку (GRID), то параметр gridSize игнорируется.
	|        // Примечание:
	|        //     Параметры используются для определения элемента управления, используемого в качестве корневого компонента (RootComponent).
	|        //     TT запрашивается как производное от .NET класса элемента управления.
	|        public DesignSurfaceExt2 AddDesignSurface<TT>(
	|            int startingFormWidth, 
	|            int startingFormHeight,
	|            AlignmentModeEnum alignmentMode, 
	|            Size gridSize,
	|            string formName = null
	|           ) where TT : Control
	|        {
	|            if (!this)
	|            {
	|                throw new Exception(@""pDesigner::AddDesignSurface<>() - Исключение: "" + ""pDesigner"" + "" не инициализирован! Пожалуйста, установите свойство: IpDesigner::Toolbox перед вызовом любых методов!"");
	|            }
	|            // Создание области дизайнера (DesignSurface).
	|            DesignSurfaceExt2 surface = DesignSurfaceManager.CreateDesignSurfaceExt2();
	|            this.DesignSurfaceManager.ActiveDesignSurface = surface;
	|            // Выбор режима выравнивания.
	|            switch (alignmentMode)
	|            {
	|                case AlignmentModeEnum.SnapLines:
	|                    surface.UseSnapLines();
	|                    break;
	|                case AlignmentModeEnum.Grid:
	|                    surface.UseGrid(gridSize);
	|                    break;
	|                case AlignmentModeEnum.GridWithoutSnapping:
	|                    surface.UseGridWithoutSnapping(gridSize);
	|                    break;
	|                case AlignmentModeEnum.NoGuides:
	|                    surface.UseNoGuides();
	|                    break;
	|                default:
	|                    surface.UseSnapLines();
	|                    break;
	|            }
	|            // Задействуем UndoEngine.
	|            ((IDesignSurfaceExt)surface).GetUndoEngineExt().Enabled = true;
	|            // Выбор службы IToolboxService и привязка её к ListBox.
	|            ToolboxServiceImp tbox = ((IDesignSurfaceExt2)surface).GetIToolboxService() as ToolboxServiceImp;
	|            // Мы не проверяем, имеет ли Toolbox значение null, поскольку самая первая проверка: if (!this)...
	|            if (null != tbox)
	|            {
	|                tbox.Toolbox = this.Toolbox;
	|            }
	|            // Создание корневого (Root) компонента, в случае если это Форма (Form).
	|            Control rootComponent = null;
	|            // Приведение к .NET элементу управления, поскольку объект TT имеет ограничение: может быть только .NET ""Control"".
	|            rootComponent = surface.CreateRootComponent(typeof(TT), new Size(startingFormWidth, startingFormHeight)) as Control;
	|            // Переименуем размещаемый компонент, потому что пользователь может добавить более одной формы
	|            // и каждая новая форма будет называться ""Form1"", если мы не зададим её имя (Name).
	|            if (formName != null)
	|            {
	|                // Организуем вопрос об имени загружаемой формы.
	|                form = new System.Windows.Forms.Form();
	|                form.Size = new Size(390, 120);
	|                form.Text = ""Имя для загружаемой формы:"";
	|                form.StartPosition = System.Windows.Forms.FormStartPosition.CenterParent;
	|                form.ControlBox = true;
	|                form.HelpButton = false;
	|                form.ShowIcon = false;
	|                form.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedDialog;
	|                form.SizeGripStyle = SizeGripStyle.Hide;
	|                form.MaximizeBox = false;
	|                form.MinimizeBox = false;
	|                form.ShowInTaskbar = false;
	|
	|                System.Windows.Forms.TextBox textBox = new System.Windows.Forms.TextBox();
	|                form.Controls.Add(textBox);
	|                textBox.Bounds = new Rectangle(10, 10, 350, 28);
	|                textBox.Anchor = System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left;
	|                textBox.Text = formName;
	|
	|                System.Windows.Forms.Button buttonOK = new System.Windows.Forms.Button();
	|                buttonOK.Parent = form;
	|                buttonOK.Text = ""OK"";
	|                buttonOK.Bounds = new Rectangle(280, 45, 75, 28);
	|                buttonOK.Anchor = System.Windows.Forms.AnchorStyles.Right | System.Windows.Forms.AnchorStyles.Top;
	|                buttonOK.Click += ButtonOK_Click;
	|
	|                System.Windows.Forms.DialogResult dr = form.ShowDialog();
	|                if (dr == System.Windows.Forms.DialogResult.Cancel)
	|                {
	|                    rootComponent.Site.Name = textBox.Text;
	|                }
	|                else if (dr == System.Windows.Forms.DialogResult.OK)
	|                {
	|                    rootComponent.Site.Name = textBox.Text;
	|                }
	|                form.Close();
	|                form.Dispose();
	|            }
	|            else
	|            {
	|                rootComponent.Site.Name = this.DesignSurfaceManager.GetValidFormName();
	|            }
	|
	|            // Разрешение перетаскивания (Drag&Drop) для RootComponent.
	|            ((DesignSurfaceExt2)surface).EnableDragandDrop();
	|            // IComponentChangeService помечена как незаменяемая служба.
	|            IComponentChangeService componentChangeService = (IComponentChangeService)(surface.GetService(typeof(IComponentChangeService)));
	|            if (null != componentChangeService)
	|            {
	|                // Тип ""ComponentEventHandler Delegate"" представляет метод который будет обрабатывать ComponentAdding, 
	|                // ComponentAdded, ComponentRemoving, и ComponentRemoved события, возникшие как события уровня компонента.
	|                componentChangeService.ComponentChanged += (Object sender, ComponentChangedEventArgs e) =>
	|                {
	|                    dynamic OriginalObj = e.Component;
	|                    if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.TabPage"")
	|                    {
	|                        dynamic SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|                        if (SimilarObj == null)
	|                        {
	|                            SimilarObj = new osfDesigner.TabPage();
	|                            OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                            SimilarObj.OriginalObj = OriginalObj;
	|                            OriginalObj.Tag = SimilarObj;
	|                            OneScriptFormsDesigner.AddToHashtable(OriginalObj, SimilarObj);
	|                        }
	|                        DesignSurfaceManager.PropertyGridHost.PropertyGrid.SelectedObject = SimilarObj;
	|                    }
	|                    else
	|                    {
	|                        DesignSurfaceManager.PropertyGridHost.PropertyGrid.SelectedObject = e.Component;
	|                    }
	|
	|                    PropertyGridHost.ReloadTreeView();
	|                    PropertyGridHost.ChangeSelectNode((Component)e.Component);
	|                };
	|                componentChangeService.ComponentAdded += (Object sender, ComponentEventArgs e) =>
	|                {
	|                    dynamic OriginalObj = e.Component;
	|                    if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.TabPage"")
	|                    {
	|                        osfDesigner.TabPage SimilarObj = new osfDesigner.TabPage();
	|                        OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                        SimilarObj.OriginalObj = OriginalObj;
	|                        OriginalObj.Tag = SimilarObj;
	|                        OneScriptFormsDesigner.AddToHashtable(OriginalObj, SimilarObj);
	|                    }
	|
	|                    if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.ImageList"" || 
	|                    OriginalObj.GetType().ToString() == ""osfDesigner.TreeView"" || 
	|                    OriginalObj.GetType().ToString() == ""osfDesigner.DataGrid"" || 
	|                    OriginalObj.GetType().ToString() == ""osfDesigner.RichTextBox"")
	|                    {
	|                        IDesignerHost designerHost = DSME.ActiveDesignSurface.GetIDesignerHost();
	|                        if (designerHost != null)
	|                        {
	|                            dynamic designer = designerHost.GetDesigner(OriginalObj);
	|                            if (designer != null)
	|                            {
	|                                designer.ActionLists.Clear();
	|                            }
	|                        }
	|                    }
	|
	|                    if (OriginalObj.GetType().ToString() == ""osfDesigner.DataGrid"" ||
	|                    OriginalObj.GetType().ToString() == ""osfDesigner.TabControl"")
	|                    {
	|                        IDesignerHost designerHost = DSME.ActiveDesignSurface.GetIDesignerHost();
	|                        if (designerHost != null)
	|                        {
	|                            dynamic designer = designerHost.GetDesigner(OriginalObj);
	|                            if (designer != null)
	|                            {
	|                                ((IDesigner)designer).Verbs.Clear();
	|                            }
	|                        }
	|                    }
	|
	|                    DesignSurfaceManager.UpdatePropertyGridHost(surface);
	|
	|                    // Получим начальные значения свойств для компонента, они нужны для создания скрипта
	|                    if (OriginalObj.GetType().ToString() == ""System.Windows.Forms.TabPage"")
	|                    {
	|                        GetDefaultValues(OneScriptFormsDesigner.RevertSimilarObj(OriginalObj));
	|                    }
	|                    else
	|                    {
	|                        GetDefaultValues(OriginalObj);
	|                    }
	|
	|                    PropertyGridHost.ReloadTreeView();
	|                    PropertyGridHost.ChangeSelectNode((Component)e.Component);
	|                };
	|
	|                componentChangeService.ComponentRemoving += (Object sender, ComponentEventArgs e) =>
	|                {
	|                };
	|
	|                componentChangeService.ComponentRemoved += (Object sender, ComponentEventArgs e) =>
	|                {
	|                    DesignSurfaceManager.UpdatePropertyGridHost(surface);
	|                    PropertyGridHost.ReloadTreeView();
	|                };
	|            }
	|            // Теперь установим свойство ""Форма.Текст"", потому что это будет пустая строка если мы не установим его.
	|            Control view = surface.GetView();
	|            if (null == view)
	|            {
	|                return null;
	|            }
	|            PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(view);
	|            // Установим значение свойства через PropertyDescriptor для конкретного свойства.
	|            PropertyDescriptor pdS = pdc.Find(""Text"", false);
	|            if (null != pdS)
	|            {
	|                pdS.SetValue(rootComponent, rootComponent.Site.Name);
	|            }
	|            // Отобразим область дизайнера (DesignSurface).
	|            System.Windows.Forms.TabPage newPage = new System.Windows.Forms.TabPage();
	|            string sTabPageText = OneScriptFormsDesigner.RevertDesignerTabName(rootComponent.Site.Name);
	|            // Свяжем rootComponent и создаваемую для него вкладку дризайнера, чтобы потом при удалении формы корректно удалить и вкладку.
	|            OneScriptFormsDesigner.AddToHashtableDesignerTabRootComponent(rootComponent, newPage);
	|            newPage.Text = sTabPageText;
	|            newPage.Name = sTabPageText;
	|            newPage.SuspendLayout();
	|            view.Dock = System.Windows.Forms.DockStyle.Fill;
	|            view.Parent = newPage;
	|            this.tbCtrlpDesigner.TabPages.Add(newPage);
	|            newPage.ResumeLayout();
	|            // Выберите созданную вкладку (TabPage).
	|            this.tbCtrlpDesigner.SelectedIndex = this.tbCtrlpDesigner.TabPages.Count - 1;
	|            this.PropertyGridHost.ReloadComboBox();
	|
	|            // Получим начальные значения свойств формы, они нужны для создания скрипта.
	|            GetDefaultValues(rootComponent);
	|
	|            //* 18.12.2021 perfolenta 
	|            surface.Dirty = false;
	|            //***
	|
	|            // Наконец, возвратим созданную область дизайнера, чтобы она снова изменялась пользователем.
	|            return surface;
	|        }
	|
	|        private void ButtonOK_Click(object sender, EventArgs e)
	|        {
	|            form.DialogResult = System.Windows.Forms.DialogResult.OK;
	|        }
	|
	|        public void GetDefaultValues(dynamic comp)
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            string DefaultValues1 = """";
	|            object pg = DesignSurfaceManager.PropertyGridHost.PropertyGrid;
	|            ((System.Windows.Forms.PropertyGrid)pg).SelectedObject = comp;
	|            object view1 = pg.GetType().GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            GridItemCollection GridItemCollection1 = (GridItemCollection)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            if (GridItemCollection1 == null)
	|            {
	|                return;
	|            }
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null)  // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"")  // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            if (comp.GetType() == typeof(System.Windows.Forms.ImageList) ||
	|                comp.GetType() == typeof(System.Windows.Forms.MainMenu))
	|            {
	|                OneScriptFormsDesigner.RevertSimilarObj(comp).DefaultValues = DefaultValues1;
	|            }
	|            else
	|            {
	|                comp.DefaultValues = DefaultValues1;
	|            }
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        public void RemoveDesignSurface(DesignSurfaceExt2 surfaceToErase)
	|        {
	|            try
	|            {
	|                // Удалить вкладку связанную через hashtableDesignerTabRootComponent с удаляемым корневым компонентом (RootComponent).
	|                // Примечание:
	|                //     DesignSurfaceManager продолжает ссылаться на удаленную поверхность DesignSurface, потому что Designsurface продолжает
	|                //     существовать, но он больше не доступен (не достижим). Этот факт будет полезен при создании новых имен для только
	|                //     что созданных поверхностей Designsurfaces, чтобы избежать конфликта имен.
	|                System.Windows.Forms.TabPage TabPage1 = OneScriptFormsDesigner.RevertDesignerTab(surfaceToErase.GetIDesignerHost().RootComponent);
	|                System.Windows.Forms.TabPage tpToRemove = null;
	|                foreach (System.Windows.Forms.TabPage tp in this.tbCtrlpDesigner.TabPages)
	|                {
	|                    if (tp.Equals(TabPage1))
	|                    {
	|                        tpToRemove = tp;
	|                        break;
	|                    }
	|                }
	|                if (null != tpToRemove)
	|                {
	|                    this.tbCtrlpDesigner.TabPages.Remove(tpToRemove);
	|                }
	|
	|                // Теперь удалите поверхность дизайнера.
	|                this.DesignSurfaceManager.DeleteDesignSurfaceExt2(surfaceToErase);
	|
	|                // Наконец, диспетчер DesignSurfaceManager удалит поверхность DesignSurface и установит в качестве активной 
	|                // поверхности дизайна последнюю, поэтому мы устанавливаем в качестве активной последнюю страницу вкладки.
	|                this.tbCtrlpDesigner.SelectedIndex = this.tbCtrlpDesigner.TabPages.Count - 1;
	|            }
	|            catch { }
	|        }
	|
	|        public void UndoOnDesignSurface()
	|        {
	|            IDesignSurfaceExt2 isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                isurf.GetUndoEngineExt().Undo();
	|            }
	|        }
	|
	|        public void RedoOnDesignSurface()
	|        {
	|            IDesignSurfaceExt2 isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                isurf.GetUndoEngineExt().Redo();
	|            }
	|        }
	|
	|        public void CutOnDesignSurface()
	|        {
	|            IDesignSurfaceExt isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                isurf.DoAction(""Cut"");
	|            }
	|        }
	|
	|        public void CopyOnDesignSurface()
	|        {
	|            IDesignSurfaceExt isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                isurf.DoAction(""Copy"");
	|            }
	|        }
	|
	|        public void PasteOnDesignSurface()
	|        {
	|            IDesignSurfaceExt isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                isurf.DoAction(""Paste"");
	|            }
	|        }
	|
	|        public void DeleteOnDesignSurface()
	|        {
	|            IDesignSurfaceExt isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                try
	|                {
	|                    SplitContainer SplitContainer1 = (SplitContainer)this.ActiveControl;
	|                    osfDesigner.PropertyGridHost PropertyGridHost1 = (osfDesigner.PropertyGridHost)SplitContainer1.ActiveControl;
	|                    bool ToolbarVisible1 = PropertyGridHost1.PropertyGrid.ToolbarVisible;
	|                }
	|                catch
	|                {
	|                    System.Windows.Forms.DialogResult res1 = System.Windows.Forms.MessageBox.Show(
	|                        ""Действительно удалить выбранные компоненты?"",
	|                        """",
	|                        MessageBoxButtons.YesNoCancel,
	|                        MessageBoxIcon.Exclamation,
	|                        MessageBoxDefaultButton.Button2
	|                       );
	|
	|                    if (res1 == System.Windows.Forms.DialogResult.OK || res1 == System.Windows.Forms.DialogResult.Yes)
	|                    {
	|                        isurf.DoAction(""Delete"");
	|                    }
	|                }
	|            }
	|        }
	|
	|        public void SwitchTabOrder()
	|        {
	|            IDesignSurfaceExt isurf = DesignSurfaceManager.ActiveDesignSurface;
	|            if (null != isurf)
	|            {
	|                isurf.SwitchTabOrder();
	|            }
	|        }
	|
	|        static bool VerifyPasswords(string lhs, string rhs)
	|        {
	|            int minLength = Math.Min(lhs.Length, rhs.Length);
	|            for (int i = 0; i < minLength; i++)
	|            {
	|                if (lhs[i] == rhs[i])
	|                {
	|                };
	|                if (lhs[i] != rhs[i])
	|                {
	|                    return false;
	|                }
	|            }
	|            return true;
	|        }
	|
	|        //* 17.12.2021 perfolenta
	|        public bool Dirty
	|        {
	|            get
	|            {
	|                //надо перебрать все дизайнеры форм и если хоть один модифицирован, то возвращаем Истина
	|                foreach (var dds in DSME.GetDesignSurfaces())
	|                {
	|                    if (dds.Dirty) return true;
	|                }
	|                return false;
	|            }
	|        }
	|        //***
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\pDesigner.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Linq;
	|using System.ComponentModel.Design.Serialization;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    // NameCreationServiceImp - реализовывает INameCreationService.
	|    // Интерфейс INameCreationService используется для предоставления имени только что созданному элементу управления
	|    // В CreateName() используется тот же алгоритм именования, что и Visual Studio:
	|    // приращение целочисленного счетчика до тех пор, пока не будет найдено имя, которое еще не используется.
	|
	|    internal class NameCreationServiceImp : INameCreationService
	|    {
	|        public NameCreationServiceImp()
	|        {
	|        }
	|
	|        public string CreateName(IContainer container, Type type)
	|        {
	|            string str1;
	|            string type_Name = type.Name;
	|
	|            if (null == container)
	|            {
	|                return string.Empty;
	|            }
	|
	|            ComponentCollection cc = container.Components;
	|            int min = Int32.MaxValue;
	|            int max = Int32.MinValue;
	|            int count = 0;
	|
	|            int i = 0;
	|            while (i < cc.Count)
	|            {
	|                Component comp = cc[i] as Component;
	|                for (int i2 = 0; i2 < OneScriptFormsDesigner.namesEnRu.Count; i2++)
	|                {
	|                    string key1 = OneScriptFormsDesigner.namesEnRu.ElementAt(i2).Key;
	|                    string value1 = OneScriptFormsDesigner.namesEnRu.ElementAt(i2).Value;
	|
	|                    if (type_Name.Contains(key1))
	|                    {
	|                        type_Name = type_Name.Replace(key1, value1);
	|                    }
	|                }
	|
	|                if (comp.GetType() == type)
	|                {
	|                    count++;
	|                    string name = comp.Site.Name;
	|
	|                    for (int i2 = 0; i2 < OneScriptFormsDesigner.namesEnRu.Count; i2++)
	|                    {
	|                        string key1 = OneScriptFormsDesigner.namesEnRu.ElementAt(i2).Key;
	|                        string value1 = OneScriptFormsDesigner.namesEnRu.ElementAt(i2).Value;
	|
	|                        if (name.Contains(key1))
	|                        {
	|                            name = name.Replace(key1, value1);
	|                        }
	|                    }
	|
	|                    if (name.StartsWith(type_Name))
	|                    {
	|                        try
	|                        {
	|                            int value = Int32.Parse(name.Substring (type_Name.Length));
	|                            if (value < min)
	|                            {
	|                                min = value;
	|                            }
	|                            if (value > max)
	|                            {
	|                                max = value;
	|                            }
	|                        }
	|                        catch { }
	|                    }
	|                }
	|                i++;
	|            }
	|
	|            if (0 == count)
	|            {
	|                str1 = type_Name + ""1"";
	|            }
	|            else if (min > 1)
	|            {
	|                int j = min - 1;
	|                str1 = type_Name + j.ToString();
	|            }
	|            else
	|            {
	|                int j = max + 1;
	|                str1 = type_Name + j.ToString();
	|            }
	|            return str1;
	|        }
	|
	|        public bool IsValidName(string name)
	|        {
	|            // Проверка того, что имя не пустое и что это строка хотя бы из одного символа.
	|            if (String.IsNullOrEmpty(name))
	|            {
	|                return false;
	|            }
	|
	|            // Далее первый символ должен быть буквой.
	|            if (!(char.IsLetter(name, 0)))
	|            {
	|                return false;
	|            }
	|
	|            // Затем не допустим ведущего подчеркивания.
	|            if (name.StartsWith(""_""))
	|            {
	|                return false;
	|            }
	|
	|            // Хорошо, это допустимое имя.
	|            return true;
	|        }
	|
	|        public void ValidateName(string name)
	|        {
	|            //  Используем этот метод для проверки, если он завершится неудачей, создадим исключение
	|            if (!(IsValidName(name)))
	|            {
	|                throw new ArgumentException(@""NameCreationServiceImp::ValidateName() - Исключение: Неверное имя: "" + name);
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\NameCreationServiceImp.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Windows.Forms;
	|using System.Drawing;
	|using System.ComponentModel.Design;
	|
	|namespace osfDesigner
	|{
	|    class MenuCommandServiceExt : IMenuCommandService
	|    {
	|        // Этот ServiceProvider является экземпляром DesignsurfaceExt2, переданным в качестве параметра внутри конструктора.
	|        IServiceProvider _serviceProvider = null;
	|        MenuCommandService _menuCommandService = null;
	|
	|        public MenuCommandServiceExt(IServiceProvider serviceProvider)
	|        {
	|            this._serviceProvider = serviceProvider;
	|            _menuCommandService = new MenuCommandService(serviceProvider);
	|        }
	|        
	|        public void ShowContextMenu(CommandID menuID, int x, int y)
	|        {
	|            ContextMenu contextMenu = new ContextMenu();
	|
	|            // Добавим стандартные команды CUT/COPY/PASTE/DELETE.
	|            MenuCommand command = FindCommand(StandardCommands.Cut);
	|            if (command != null)
	|            {
	|                MenuItem menuItem = new MenuItem(""Вырезать"", new EventHandler(OnMenuClicked));
	|                menuItem.Tag = command;
	|                contextMenu.MenuItems.Add(menuItem);
	|            }
	|            command = FindCommand(StandardCommands.Copy);
	|            if (command != null)
	|            {
	|                MenuItem menuItem = new MenuItem(""Копировать"", new EventHandler(OnMenuClicked));
	|                menuItem.Tag = command;
	|                contextMenu.MenuItems.Add(menuItem);
	|            }
	|            command = FindCommand(StandardCommands.Paste);
	|            if (command != null)
	|            {
	|                MenuItem menuItem = new MenuItem(""Вставить"", new EventHandler(OnMenuClicked));
	|                menuItem.Tag = command;
	|                contextMenu.MenuItems.Add(menuItem);
	|            }
	|            command = FindCommand(StandardCommands.Delete);
	|            if (command != null)
	|            {
	|                MenuItem menuItem = new MenuItem(""Удалить"", new EventHandler(OnMenuClicked));
	|                menuItem.Tag = command;
	|                contextMenu.MenuItems.Add(menuItem);
	|            }
	|
	|            // Покажем контекстное меню.
	|            DesignSurface surface = (DesignSurface)_serviceProvider;
	|            Control viewService = (Control)surface.View;
	|            
	|            if (viewService != null)
	|            {
	|                contextMenu.Show(viewService, viewService.PointToClient(new Point(x, y)));
	|            }
	|        }
	|
	|        // Управление при выборе контекстного меню.
	|        private void OnMenuClicked(object sender, EventArgs e)
	|        {
	|            MenuItem menuItem = sender as MenuItem;
	|            if (menuItem != null && menuItem.Tag is MenuCommand)
	|            {
	|                MenuCommand command = menuItem.Tag as MenuCommand;
	|                if (command.CommandID.ID == 17)
	|                {
	|                    System.Windows.Forms.DialogResult res1 = System.Windows.Forms.MessageBox.Show(
	|                        ""Действительно удалить выбранные компоненты?"",
	|                        """",
	|                        MessageBoxButtons.YesNoCancel,
	|                        MessageBoxIcon.Exclamation,
	|                        MessageBoxDefaultButton.Button2
	|                       );
	|
	|                    if (res1 == System.Windows.Forms.DialogResult.OK || res1 == System.Windows.Forms.DialogResult.Yes)
	|                    {
	|                        command.Invoke();
	|                    }
	|                }
	|                else
	|                {
	|                    command.Invoke();
	|                }
	|            }
	|        }
	|
	|        public void AddCommand(MenuCommand command)
	|        {
	|            _menuCommandService.AddCommand(command);
	|        }
	|
	|        public void AddVerb(DesignerVerb verb)
	|        {
	|            _menuCommandService.AddVerb(verb);
	|        }
	|
	|        public MenuCommand FindCommand(CommandID commandID)
	|        {
	|            return _menuCommandService.FindCommand(commandID);
	|        }
	|
	|        public bool GlobalInvoke(CommandID commandID)
	|        {
	|            return _menuCommandService.GlobalInvoke(commandID);
	|        }
	|
	|        public void RemoveCommand(MenuCommand command)
	|        {
	|            _menuCommandService.RemoveCommand(command);
	|        }
	|    
	|        public void RemoveVerb(DesignerVerb verb)
	|        {
	|            _menuCommandService.RemoveVerb(verb);
	|        }
	|
	|        public DesignerVerbCollection Verbs
	|        {
	|            get { return _menuCommandService.Verbs; }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MenuCommandServiceExt.cs");
	
	СтрВыгрузки = 
	"using System.Drawing;
	|using System.Windows.Forms;
	|
	|namespace osfDesigner
	|{
	|    public enum AlignmentModeEnum : int { SnapLines = 0, Grid, GridWithoutSnapping, NoGuides };
	|
	|    // Интерфейс, используется для
	|    //     * hosts: Toolbox;DesignSurfaces;PropertyGrid
	|    //     * add/remove DesignSurfaces
	|    //     * perform editing actions on active DesignSurface
	|    //
	|    public interface IpDesigner
	|    {
	|        // controls accessing section  -----------------------------------------------------------
	|        //     +-------------+-----------------------------+-----------+
	|        //     |toolboxItem1 | ____ ____ ____              |           |
	|        //     |toolboxItem2 ||____|____|____|___________  +-----------+
	|        //     |toolboxItem3 ||                          | |     |     |
	|        //     |             ||                          | |     |     |
	|        //     |  TOOLBOX    ||      DESIGNSURFACES      | | PROPERTY  |
	|        //     |             ||                          | |   GRID    |
	|        //     |             ||__________________________| |     |     |
	|        //     +-------------+-----------------------------+-----------+
	|        System.Windows.Forms.ListBox Toolbox { get; set; }                       // TOOLBOX
	|        System.Windows.Forms.TabControl TabControlHostingDesignSurfaces { get; } // DESIGNSURFACES HOST
	|        PropertyGridHost PropertyGridHost { get; }                               // PROPERTYGRID
	|
	|        // DesignSurfaces management section -----------------------------------------------------
	|        DesignSurfaceExt2 ActiveDesignSurface { get; }
	|        // Создайте DesignSurface и rootComponent (элемент управления .NET) используя IDesignSurfaceExt.CreateRootComponent()
	|        // Если режим выравнивания не использует СЕТКУ, то параметр размера сетки игнорируется.
	|        // Note:
	|        //     Общие параметры используются для определения типа элемента управления, который следует использовать в качестве корневого компонента.
	|        //     TT запрашивается как производное от Control класса .NET
	|
	|        DesignSurfaceExt2 AddDesignSurface<TT>(
	|            int startingFormWidth, int startingFormHeight,
	|            AlignmentModeEnum alignmentMode, Size gridSize,
	|            string formName = null
	|           ) where TT : Control;
	|        void RemoveDesignSurface(DesignSurfaceExt2 activeSurface);
	|
	|        // Раздел редактирования.
	|        void UndoOnDesignSurface();
	|        void RedoOnDesignSurface();
	|        void CutOnDesignSurface();
	|        void CopyOnDesignSurface();
	|        void PasteOnDesignSurface();
	|        void DeleteOnDesignSurface();
	|        void SwitchTabOrder();
	|
	|        //* 17.12.2021 perfolenta
	|        bool Dirty { get; }
	|        //***
	|
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\IpDesigner.cs");
	
	СтрВыгрузки = 
	"namespace osfDesigner
	|{
	|    public interface IDesignSurfaceExt2 : IDesignSurfaceExt
	|    {
	|        // Получаем IDesignerHost из .NET DesignSurface.
	|        ToolboxServiceImp GetIToolboxService();
	|        void EnableDragandDrop();
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\IDesignSurfaceExt2.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel;
	|using System.Drawing;
	|using System.ComponentModel.Design.Serialization;
	|
	|namespace osfDesigner
	|{
	|    public interface IDesignSurfaceExt
	|    {
	|        // Выполнение Cut/Copy/Paste/Delete команд.
	|        void DoAction(string command);
	|
	|        // Активация/деактивация возможности TabOrder.
	|        void SwitchTabOrder();
	|
	|        // Выбор режима выравнивания элементов управления.
	|        void UseSnapLines();
	|        void UseGrid(Size gridSize);
	|        void UseGridWithoutSnapping(Size gridSize);
	|        void UseNoGuides();
	|
	|        // Методы используются для создания элемента управления без помощи ToolBox.
	|        IComponent CreateRootComponent(Type controlType, Size controlSize);
	|        IComponent CreateRootComponent(DesignerLoader loader, Size controlSize);
	|        Control CreateControl(Type controlType, Size controlSize, Point controlLocation);
	|
	|        // Получение UndoEngineExtended объекта.
	|        UndoEngineExt GetUndoEngineExt();
	|
	|        // Получение IDesignerHost.
	|        IDesignerHost GetIDesignerHost();
	|
	|        // HostControl поверхности дизайнера .NET - это просто элемент управления.
	|        // Вы можете управлять этим элементом управления так же, как и любым другим элементом управления WinForms.
	|        // Вы можете закрепить его и добавить в другой элемент управления, чтобы просто отобразить его.
	|        // Получить элемент управления HostControl.
	|        Control GetView();
	|
	|        //* 17.12.2021 perfolenta
	|        bool Dirty { get; }
	|        //***
	|
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\IDesignSurfaceExt.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.ComponentModel.Design;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    // Этот класс управляет коллекцией экземпляров DesignSurfaceExt2.
	|    // Этот класс добавляет к экземплярам DesignSurfaceExt2 следующие объекты:
	|    // PropertyGridHost 
	|    //
	|    // DesignSurfaceExt2
	|    //     |
	|    //     +--|PropertyGridHost|
	|    //     |
	|    //     +--|Toolbox|
	|    //     |
	|    //     +--|ContextMenu|
	|    //     |
	|    //     +--|DesignSurfaceExt|
	|    //             |
	|    //             +--|DesignSurface|
	|    //             |
	|    //             +--|TabOrder|
	|    //             |
	|    //             +--|UndoEngine|
	|    //             |
	|    //             +--|Cut/Copy/Paste/Delete commands|
	|
	|    public class DesignSurfaceManagerExt : DesignSurfaceManager
	|    {
	|        // Список List<> необходим для удаления ранее созданных поверхностей проектирования
	|        // Note: 
	|        // Свойство DesignSurfaceManager.DesignSurfaces - это набор поверхностей проектирования,
	|        // которые в настоящее время размещены в DesignSurfaceManager, но доступны только для чтения.
	|        private List<DesignSurfaceExt2> DesignSurfaceExt2Collection = new List<DesignSurfaceExt2>();
	|
	|        public DesignSurfaceManagerExt() : base()
	|        {
	|            Init();
	|        }
	|        // Параметры:
	|        //   parentProvider:
	|        //      Родительский поставщик услуг. Запросы на обслуживание направляются этому поставщику, 
	|        //      если они не могут быть разрешены менеджером поверхности проектирования.
	|        public DesignSurfaceManagerExt(IServiceProvider parentProvider) : base(parentProvider)
	|        {
	|            Init();
	|        }
	|
	|        public PropertyGridHost PropertyGridHost { get; private set; }
	|
	|        private void Init()
	|        {
	|            this.PropertyGridHost = new PropertyGridHost(this);
	|            // Добавьте PropertyGridHost и ComboBox в качестве служб, чтобы они были доступны для каждой поверхности дизайна.
	|            // (DesignSurface нуждается в PropertyGridHost/ComboBox, а не в размещающем их UserControl, поэтому
	|            // мы предоставляем PropertyGridHost/ComboBox, встроенный в наш UserControl PropertyGridExt).
	|            this.ServiceContainer.AddService(typeof(System.Windows.Forms.PropertyGrid), PropertyGridHost.PropertyGrid);
	|            this.ServiceContainer.AddService(typeof(System.Windows.Forms.ComboBox), PropertyGridHost.ComboBox);
	|            this.ActiveDesignSurfaceChanged += (object sender, ActiveDesignSurfaceChangedEventArgs e) =>
	|            {
	|                // Меняем изображение на менюшке <Порядок обхода>.
	|                Program.pDesignerMainForm1.ChangeImage(pDesigner.DSME.ActiveDesignSurface.TabOrder._tabOrder != null);
	|
	|                DesignSurfaceExt2 surface = e.NewSurface as DesignSurfaceExt2;
	|                if (null == surface)
	|                {
	|                    return;
	|                }
	|
	|                UpdatePropertyGridHost(surface);
	|
	|                ISelectionService iSel = (ISelectionService)(surface.GetService(typeof(ISelectionService)));
	|                ICollection collection1 = iSel.GetSelectedComponents();
	|                System.ComponentModel.Component[] arr = new System.ComponentModel.Component[collection1.Count];
	|                collection1.CopyTo(arr, 0);
	|                System.ComponentModel.Component comp = null;
	|                try
	|                {
	|                    comp = arr[0];
	|                }
	|                catch { }
	|
	|                PropertyGridHost.ReloadTreeView();
	|                if (comp != null)
	|                {
	|                    PropertyGridHost.ChangeSelectNode(comp);
	|                }
	|            };
	|        }
	|
	|        public void UpdatePropertyGridHost(DesignSurfaceExt2 surface)
	|        {
	|            IDesignerHost host = (IDesignerHost)surface.GetService(typeof(IDesignerHost));
	|            if (null == host)
	|            {
	|                return;
	|            }
	|            if (null == host.RootComponent)
	|            {
	|                return;
	|            }
	|
	|            // Синхронизируем с PropertyGridHost.
	|            this.PropertyGridHost.SelectedObject = host.RootComponent;
	|            this.PropertyGridHost.ReloadComboBox();
	|        }
	|
	|        // Метод CreateDesignSurfaceCore вызывается обоими методами CreateDesignSurface.
	|        // Это реализация, которая фактически создает поверхность проектирования.
	|        // Реализация по умолчанию просто возвращает новую поверхность дизайна, мы переопределяем
	|        // этот метод, чтобы предоставить пользовательский объект, производный от класса DesignSurface
	|        // т. е. новый экземпляр DesignSurfaceExt2.
	|        protected override DesignSurface CreateDesignSurfaceCore(IServiceProvider parentProvider)
	|        {
	|            return new DesignSurfaceExt2(parentProvider);
	|        }
	|
	|        // Получим новый DesignSurfaceExt2 и загрузим его с соответствующим типом корневого компонента.
	|        public DesignSurfaceExt2 CreateDesignSurfaceExt2()
	|        {
	|            // С классом DesignSurfaceManager бесполезно добавлять новые службы для каждой поверхности дизайна, которую мы собираемся создать,
	|            // из-за параметра ""IServiceProvider"" метода CreateDesignSurface(IServiceProvider).
	|            // Этот параметр позволяет каждой созданной поверхности дизайнера использовать сервисы DesignSurfaceManager.
	|            // Будет создан новый объединенный поставщик услуг, который сначала запросит у этого поставщика услугу, а затем делегирует любые сбои 
	|            // к объекту диспетчера поверхности проектирования.
	|            // Note:
	|            //     Следующая строка кода создает совершенно новую поверхность дизайна, которая добавляется
	|            //     в коллекцию Designsurfeces, т.е. свойство ""this.DesignSurfaces""(.Count увеличится на единицу)
	|            DesignSurfaceExt2 surface = (DesignSurfaceExt2)(this.CreateDesignSurface(this.ServiceContainer));
	|
	|            // Каждый раз, когда создается совершенно новая поверхность дизайна, подписывайте наш обработчик на
	|            //  его SelectionService.SelectionChanged событие для синхронизации PropertyGridHost.
	|            ISelectionService selectionService = (ISelectionService)(surface.GetService(typeof(ISelectionService)));
	|            if (null != selectionService)
	|            {
	|                selectionService.SelectionChanged += (object sender, EventArgs e) =>
	|                {
	|                    ISelectionService selectService = sender as ISelectionService;
	|                    if (null == selectService)
	|                    {
	|                        return;
	|                    }
	|                    if (0 == selectService.SelectionCount)
	|                    {
	|                        return;
	|                    }
	|                    // Синхронизация с PropertyGridHost.
	|                    System.Windows.Forms.PropertyGrid propertyGrid = (System.Windows.Forms.PropertyGrid)this.GetService(typeof(System.Windows.Forms.PropertyGrid));
	|                    if (null == propertyGrid)
	|                    {
	|                        return;
	|                    }
	|                    ArrayList comps = new ArrayList();
	|                    comps.AddRange(selectService.GetSelectedComponents());
	|                    propertyGrid.SelectedObjects = comps.ToArray();
	|
	|                };
	|            }
	|            DesignSurfaceExt2Collection.Add(surface);
	|            this.ActiveDesignSurface = surface;
	|
	|            // И вернем поверхность дизайнера (чтобы можно было вызвать её метод BeginLoad()).
	|            return surface;
	|        }
	|
	|        public void DeleteDesignSurfaceExt2(DesignSurfaceExt2 item)
	|        {
	|            DesignSurfaceExt2Collection.Remove(item);
	|            try
	|            {
	|                item.Dispose();
	|            }
	|            catch { }
	|            int currentIndex = DesignSurfaceExt2Collection.Count - 1;
	|            if (currentIndex >= 0)
	|            {
	|                ActiveDesignSurface = DesignSurfaceExt2Collection[currentIndex];
	|            }
	|            else
	|            {
	|                ActiveDesignSurface = null;
	|            }
	|        }
	|
	|        public void DeleteDesignSurfaceExt2(int index)
	|        {
	|            DesignSurfaceExt2 item = DesignSurfaceExt2Collection[index];
	|            DesignSurfaceExt2Collection.RemoveAt(index);
	|            try
	|            {
	|                item.Dispose();
	|            }
	|            catch { }
	|            int currentIndex = DesignSurfaceExt2Collection.Count - 1;
	|            if (currentIndex >= 0)
	|            {
	|                ActiveDesignSurface = DesignSurfaceExt2Collection[currentIndex];
	|            }
	|            else
	|            {
	|                ActiveDesignSurface = null;
	|            }
	|        }
	|
	|        // Просмотрим коллекцию всех поверхностей дизайнера DesignSurface чтобы узнать новое имя формы.
	|        public string GetValidFormName()
	|        {
	|            // Мы решили использовать ""Form_"" с символом подчеркивания в качестве шаблона потому что .NET сервисы
	|            // дизайнера предоставляют имя типа: ""FormN"" с N=1,2,3,4,... поэтому использование ""Форма"",
	|            // без символа подчеркивания в качестве шаблона, вызовет некоторые проблемы, когда мы ищем, используется имя
	|            // или нет. Использование другого шаблона (с подчеркиванием) позволяет избежать этой проблемы.
	|            string newFormNameHeader = ""Form_"";
	|            newFormNameHeader = newFormNameHeader.Replace(""Form_"", ""Форма_"");
	|            int newFormNametrailer = -1;
	|            string newFormName = string.Empty;
	|            bool isNew = true;
	|            do
	|            {
	|                isNew = true;
	|                newFormNametrailer++;
	|                newFormName = newFormNameHeader + newFormNametrailer;
	|                foreach (DesignSurfaceExt2 item in DesignSurfaceExt2Collection)
	|                {
	|                    string currentFormName = item.GetIDesignerHost().RootComponent.Site.Name;
	|                    isNew &= ((newFormName == currentFormName) ? false : true);
	|                }
	|            } while (!isNew);
	|            return newFormName;
	|        }
	|
	|        public new DesignSurfaceExt2 ActiveDesignSurface
	|        {
	|            get { return base.ActiveDesignSurface as DesignSurfaceExt2; }
	|            set { base.ActiveDesignSurface = value; }
	|        }
	|
	|        //* 18.12.2021 perfolenta
	|        public IEnumerable<DesignSurfaceExt2> GetDesignSurfaces()
	|        {
	|            return DesignSurfaceExt2Collection;
	|        }
	|        //***
	|
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DesignSurfaceManagerExt.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|
	|namespace osfDesigner
	|{
	|    // Этот класс добавляет в экземпляр DesignSurfaceExt следующие средства:
	|    //     * Toolbox механизм (Контейнер ToolBox должен быть предоставлен пользователем)
	|    //     * ContextMenu on DesignSurface с командами Cut/Copy/Paste/Delete
	|    //
	|    // DesignSurfaceExt2
	|    //     |
	|    //     +--|Toolbox|
	|    //     |
	|    //     +--|ContextMenu|
	|    //     |
	|    //     +--|DesignSurfaceExt|
	|    //             |
	|    //             +--|DesignSurface|
	|    //             |
	|    //             +--|TabOrder|
	|    //             |
	|    //             +--|UndoEngine|
	|    //             |
	|    //             +--|Cut/Copy/Paste/Delete commands|
	|    //
	|    public class DesignSurfaceExt2 : DesignSurfaceExt, IDesignSurfaceExt2
	|    {
	|        private MenuCommandServiceExt _menuCommandService = null;
	|        private ToolboxServiceImp _toolboxService = null;
	|
	|        public DesignSurfaceExt2() : base()
	|        {
	|            InitServices();
	|        }
	|        public DesignSurfaceExt2(IServiceProvider parentProvider) : base(parentProvider)
	|        {
	|            InitServices();
	|        }
	|        public DesignSurfaceExt2(Type rootComponentType) : base(rootComponentType)
	|        {
	|            InitServices();
	|        }
	|        public DesignSurfaceExt2(IServiceProvider parentProvider, Type rootComponentType) : base(parentProvider, rootComponentType)
	|        {
	|            InitServices();
	|        }
	|
	|        public ToolboxServiceImp GetIToolboxService()
	|        {
	|            return (ToolboxServiceImp) this.GetService(typeof(IToolboxService));
	|        }
	|
	|        public void EnableDragandDrop()
	|        {
	|            // Для управления перетаскиванием элементов.
	|            Control ctrl = this.GetView();
	|            if (null == ctrl)
	|            {
	|                return;
	|            }
	|            ctrl.AllowDrop = true;
	|            ctrl.DragDrop += new DragEventHandler(OnDragDrop);
	|
	|            // Включить захват элемента внутри нашей панели инструментов.
	|            ToolboxServiceImp tbs = this.GetIToolboxService();
	|            if (null == tbs)
	|            {
	|                return;
	|            }
	|            if (null == tbs.Toolbox)
	|            {
	|                return;
	|            }
	|            tbs.Toolbox.MouseDown += new MouseEventHandler(OnListboxMouseDown);
	|        }
	|
	|        // Управление Drag&Drop для элементов, содержащихся внутри Toolbox.
	|        private void OnListboxMouseDown(object sender, MouseEventArgs e)
	|        {
	|            ToolboxServiceImp tbs = this.GetIToolboxService();
	|            if (null == tbs)
	|            {
	|                return;
	|            }
	|            if (null == tbs.Toolbox)
	|            {
	|                return;
	|            }
	|            if (null == tbs.Toolbox.SelectedItem)
	|            {
	|                return;
	|            }
	|            tbs.Toolbox.DoDragDrop(tbs.Toolbox.SelectedItem, DragDropEffects.Copy | DragDropEffects.Move);
	|        }
	|
	|        // Управление взятием и бросанием элементов.
	|        public void OnDragDrop(object sender, DragEventArgs e)
	|        {
	|            // Если пользователь не перетаскивает элемент ToolboxItem, то ничего не делаем.
	|            if (!e.Data.GetDataPresent(typeof(ToolboxItem)))
	|            {
	|                e.Effect = DragDropEffects.None;
	|                return;
	|            }
	|            // Теперь извлеките узел данных.
	|            ToolboxItem item = e.Data.GetData(typeof(ToolboxItem)) as ToolboxItem;
	|            e.Effect = DragDropEffects.Copy;
	|            item.CreateComponents(this.GetIDesignerHost());
	|        }
	|
	|        // Класс DesignSurface автоматически предоставляет несколько услуг во время проектирования.
	|        // Класс DesignSurface добавляет все свои службы в свой конструктор. Большинство этих служб можно переопределить, заменив их в свойстве ServiceContainer. 
	|        // Чтобы заменить службу, переопределите конструктор, вызовите базовый конструктор и внесите любые изменения с помощью свойства ServiceContainer.
	|        private void InitServices()
	|        {
	|            // Каждая поверхность дизайна имеет свои собственные службы по умолчанию.
	|            // Мы можем оставить службы по умолчанию в их нынешнем состоянии, или мы можем удалить их и заменить своими собственными.
	|            // Теперь добавьте наши собственные сервисы с помощью IServiceContainer.
	|            _menuCommandService = new MenuCommandServiceExt(this);
	|            if (_menuCommandService != null)
	|            {
	|                // Удалите старую службу, т. е. службу DesignsurfaceExt.
	|                this.ServiceContainer.RemoveService(typeof(IMenuCommandService), false);
	|                // Добавьте новую IMenuCommandService.
	|                this.ServiceContainer.AddService(typeof(IMenuCommandService), _menuCommandService);
	|            }
	|            // IToolboxService
	|            _toolboxService = new ToolboxServiceImp(this.GetIDesignerHost());
	|            if (_toolboxService != null)
	|            {
	|                this.ServiceContainer.RemoveService(typeof(IToolboxService), false);
	|                this.ServiceContainer.AddService(typeof(IToolboxService), _toolboxService);
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DesignSurfaceExt2.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel.Design;
	|using System.Drawing;
	|using System.ComponentModel;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design.Serialization;
	|using System.Diagnostics;
	|
	|namespace osfDesigner
	|{
	|    // Этот класс добавляет к экземпляру .NET DesignSurface следующие возможности:
	|    //     * TabOrder
	|    //     * UndoEngine
	|    //     * Cut/Copy/Paste/Delete commands
	|    //
	|    // DesignSurfaceExt
	|    //     |
	|    //     +--|DesignSurface|
	|    //     |
	|    //     +--|TabOrder|
	|    //     |
	|    //     +--|UndoEngine|
	|    //     |
	|    //     +--|Cut/Copy/Paste/Delete commands|
	|    //
	|    public class DesignSurfaceExt : DesignSurface, IDesignSurfaceExt
	|    {
	|        private TabOrderHooker _tabOrder = null;
	|        public static bool _tabOrderMode = false;
	|        private UndoEngineExt _undoEngine = null;
	|        private NameCreationServiceImp _nameCreationService = null;
	|        private DesignerSerializationServiceImpl _designerSerializationService = null;
	|        private CodeDomComponentSerializationService _codeDomComponentSerializationService = null;
	|
	|        //* 18.12.2021 perfolenta 
	|        private bool _dirty = false;
	|        //***
	|
	|        public DesignSurfaceExt() : base()
	|        {
	|            InitServices();
	|        }
	|
	|        public DesignSurfaceExt(IServiceProvider parentProvider) : base(parentProvider)
	|        {
	|            InitServices();
	|        }
	|        public DesignSurfaceExt(Type rootComponentType) : base(rootComponentType)
	|        {
	|            InitServices();
	|        }
	|
	|        public DesignSurfaceExt(IServiceProvider parentProvider, Type rootComponentType) : base(parentProvider, rootComponentType)
	|        {
	|            InitServices();
	|        }
	|
	|        public void SwitchTabOrder()
	|        {
	|            if (false == IsTabOrderMode)
	|            {
	|                InvokeTabOrder();
	|            }
	|            else
	|            {
	|                DisposeTabOrder();
	|            }
	|        }
	|
	|        public void UseSnapLines()
	|        {
	|            IServiceContainer serviceProvider = this.GetService(typeof(IServiceContainer)) as IServiceContainer;
	|            DesignerOptionService opsService = serviceProvider.GetService(typeof(DesignerOptionService)) as DesignerOptionService;
	|            if (null != opsService)
	|            {
	|                serviceProvider.RemoveService(typeof(DesignerOptionService));
	|            }
	|            DesignerOptionService opsService2 = new DesignerOptionServiceExt4SnapLines();
	|            serviceProvider.AddService(typeof(DesignerOptionService), opsService2);
	|        }
	|
	|        public void UseGrid(Size gridSize)
	|        {
	|            IServiceContainer serviceProvider = this.GetService(typeof(IServiceContainer)) as IServiceContainer;
	|            DesignerOptionService opsService = serviceProvider.GetService(typeof(DesignerOptionService)) as DesignerOptionService;
	|            if (null != opsService)
	|            {
	|                serviceProvider.RemoveService(typeof(DesignerOptionService));
	|            }
	|            DesignerOptionService opsService2 = new DesignerOptionServiceExt4Grid(gridSize);
	|            serviceProvider.AddService(typeof(DesignerOptionService), opsService2);
	|        }
	|
	|        public void UseGridWithoutSnapping(Size gridSize)
	|        {
	|            IServiceContainer serviceProvider = this.GetService(typeof(IServiceContainer)) as IServiceContainer;
	|            DesignerOptionService opsService = serviceProvider.GetService(typeof(DesignerOptionService)) as DesignerOptionService;
	|            if (null != opsService)
	|            {
	|                serviceProvider.RemoveService(typeof(DesignerOptionService));
	|            }
	|            DesignerOptionService opsService2 = new DesignerOptionServiceExt4GridWithoutSnapping(gridSize);
	|            serviceProvider.AddService(typeof(DesignerOptionService), opsService2);
	|        }
	|
	|        public void UseNoGuides()
	|        {
	|            IServiceContainer serviceProvider = this.GetService(typeof(IServiceContainer)) as IServiceContainer;
	|            DesignerOptionService opsService = serviceProvider.GetService(typeof(DesignerOptionService)) as DesignerOptionService;
	|            if (null != opsService)
	|            {
	|                serviceProvider.RemoveService(typeof(DesignerOptionService));
	|            }
	|            DesignerOptionService opsService2 = new DesignerOptionServiceExt4NoGuides();
	|            serviceProvider.AddService(typeof(DesignerOptionService), opsService2);
	|        }
	|
	|        public UndoEngineExt GetUndoEngineExt()
	|        {
	|            return this._undoEngine;
	|        }
	|
	|        private IComponent CreateRootComponentCore(Type controlType, Size controlSize, DesignerLoader loader)
	|        {
	|            try
	|            {
	|                // Получим IDesignerHost. Если мы не сможем его получить, тогда откат (возврат null)
	|                IDesignerHost host = GetIDesignerHost();
	|                if (null == host)
	|                {
	|                    return null;
	|                }
	|                // Проверьте, установлен ли уже корневой компонент.
	|                if (null != host.RootComponent)
	|                {
	|                    return null;
	|                }
	|                // Создайте новый корневой компонент и инициализируйте его с помощью конструктора.
	|                // Если компонент не имеет конструктора - откат, иначе выполните инициализацию
	|                if (null != loader)
	|                {
	|                    this.BeginLoad(loader);
	|                    if (this.LoadErrors.Count > 0)
	|                    {
	|                        throw new Exception(@""DesignSurfaceExt::CreateRootComponentCore() - Исключение: сбой в BeginLoad(loader)!"");
	|                    }
	|                }
	|                else
	|                {
	|                    if (controlType != null)
	|                    {
	|                        this.BeginLoad(controlType);
	|                        if (this.LoadErrors.Count > 0)
	|                        {
	|                            throw new Exception(@""DesignSurfaceExt::CreateRootComponentCore() - Исключение: сбой в BeginLoad(Type)! Некоторая ошибка во время "" + controlType.ToString() + "" загрузки"");
	|                        }
	|                    }
	|                }
	|                // Попробуйте изменить размер только что созданного объекта.
	|                IDesignerHost ihost = GetIDesignerHost();
	|                // Установите цвет фона и размер.
	|                Control ctrl = null;
	|                if (host.RootComponent is Form)
	|                {
	|                    ctrl = this.View as Control;
	|                    ctrl.BackColor = Color.LightGray;
	|                    // Установите размер.
	|                    PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(ctrl);
	|                    // Задайте свойство через PropertyDescriptor.
	|                    PropertyDescriptor pdS = pdc.Find(""Size"", false);
	|                    if (null != pdS)
	|                    {
	|                        pdS.SetValue(ihost.RootComponent, controlSize);
	|                    }
	|                }
	|                else if (host.RootComponent is UserControl)
	|                {
	|                    ctrl = this.View as Control;
	|                    ctrl.BackColor = SystemColors.ControlDarkDark;
	|                    // Установите размер.
	|                    PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(ctrl);
	|                    // Задайте свойство через PropertyDescriptor.
	|                    PropertyDescriptor pdS = pdc.Find(""Size"", false);
	|                    if (null != pdS)
	|                    {
	|                        pdS.SetValue(ihost.RootComponent, controlSize);
	|                    }
	|                }
	|                else if (host.RootComponent is Control)
	|                {
	|                    ctrl = this.View as Control;
	|                    ctrl.BackColor = Color.LightGray;
	|                    // Установите размер.
	|                    PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(ctrl);
	|                    // Задайте свойство через PropertyDescriptor.
	|                    PropertyDescriptor pdS = pdc.Find(""Size"", false);
	|                    if (null != pdS)
	|                    {
	|                        pdS.SetValue(ihost.RootComponent, controlSize);
	|                    }
	|                }
	|                else if (host.RootComponent is Component)
	|                {
	|                    ctrl = this.View as Control;
	|                    ctrl.BackColor = Color.White;
	|                    // Не устанавливайте размер.
	|                }
	|                else
	|                {
	|                    // Тип Хоста не определен
	|                    ctrl = this.View as Control;
	|                    ctrl.BackColor = Color.Red;
	|                }
	|                return ihost.RootComponent;
	|            }
	|            catch (Exception exx)
	|            {
	|                Debug.WriteLine(exx.Message);
	|                if (null != exx.InnerException)
	|                {
	|                    Debug.WriteLine(exx.InnerException.Message);
	|                }
	|                throw;
	|            }
	|        }
	|
	|        public IComponent CreateRootComponent(Type controlType, Size controlSize)
	|        {
	|            return CreateRootComponentCore(controlType, controlSize, null);
	|        }
	|
	|        public IComponent CreateRootComponent(DesignerLoader loader, Size controlSize)
	|        {
	|            return CreateRootComponentCore(null, controlSize, loader);
	|        }
	|
	|        public Control CreateControl(Type controlType, Size controlSize, Point controlLocation)
	|        {
	|            try
	|            {
	|                // Получим IDesignerHost. Если мы не сможем его получить, тогда откат (возврат null).
	|                IDesignerHost host = GetIDesignerHost();
	|                if (null == host)
	|                {
	|                    return null;
	|                }
	|                // Проверьте, установлен ли уже корневой компонент. Если это не так - откат (возврат null).
	|                if (null == host.RootComponent)
	|                {
	|                    return null;
	|                }
	|                // Создайте новый компонент и инициализируйте его с помощью конструктора.
	|                // Если компонент не имеет конструктора - откат (возврат null), иначе выполните инициализацию.
	|                IComponent newComp = host.CreateComponent(controlType);
	|                if (null == newComp)
	|                {
	|                    return null;
	|                }
	|                IDesigner designer = host.GetDesigner(newComp);
	|                if (null == designer)
	|                {
	|                    return null;
	|                }
	|                if (designer is IComponentInitializer)
	|                {
	|                    ((IComponentInitializer)designer).InitializeNewComponent(null);
	|                }
	|                // Попробуйте изменить размер/расположение только что созданного объекта
	|                PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(newComp);
	|                // Задайте свойство через PropertyDescriptor.
	|                PropertyDescriptor pdS = pdc.Find(""Size"", false);
	|                if (null != pdS)
	|                {
	|                    pdS.SetValue(newComp, controlSize);
	|                }
	|                PropertyDescriptor pdL = pdc.Find(""Location"", false);
	|                if (null != pdL)
	|                {
	|                    pdL.SetValue(newComp, controlLocation);
	|                }
	|                // Зафиксируйте операцию создания/добавления элемента управления в корневой компонент DesignSurface
	|                // и верните только что созданный элемент управления, чтобы провести дальнейшие инициализации.
	|                ((Control)newComp).Parent = host.RootComponent as Control;
	|                return newComp as Control;
	|            }
	|            catch (Exception exx)
	|            {
	|                Debug.WriteLine(exx.Message);
	|                if (null != exx.InnerException)
	|                {
	|                    Debug.WriteLine(exx.InnerException.Message);
	|                }
	|                throw;
	|            }
	|        }
	|
	|        public IDesignerHost GetIDesignerHost()
	|        {
	|            return (IDesignerHost)(this.GetService(typeof(IDesignerHost)));
	|        }
	|
	|        public Control GetView()
	|        {
	|            Control ctrl = this.View as Control;
	|            if (null == ctrl)
	|            {
	|                return null;
	|            }
	|            ctrl.Dock = System.Windows.Forms.DockStyle.Fill;
	|            return ctrl;
	|        }
	|
	|        public bool IsTabOrderMode
	|        {
	|            get { return _tabOrderMode; }
	|        }
	|
	|        public TabOrderHooker TabOrder
	|        {
	|            get
	|            {
	|                if (_tabOrder == null)
	|                {
	|                    _tabOrder = new TabOrderHooker();
	|                }
	|                return _tabOrder;
	|            }
	|            set { _tabOrder = value; }
	|        }
	|
	|        public void InvokeTabOrder()
	|        {
	|            TabOrder.HookTabOrder(this.GetIDesignerHost());
	|            _tabOrderMode = true;
	|        }
	|
	|        public void DisposeTabOrder()
	|        {
	|            TabOrder.HookTabOrder(this.GetIDesignerHost());
	|            _tabOrderMode = false;
	|        }
	|
	|        // Класс DesignSurface автоматически предоставляет несколько услуг во время проектирования.
	|        // Класс DesignSurface добавляет все свои службы в своем конструкторе.
	|        // Большинство этих служб можно переопределить, заменив их в свойстве ServiceContainer. 
	|        // Чтобы заменить службу, переопределите конструктор, вызовите базовый и внесите любые изменения с помощью свойства ServiceContainer.
	|        private void InitServices()
	|        {
	|            // Каждая поверхность дизайна имеет свои собственные службы по умолчанию.
	|            // Мы можем оставить службы по умолчанию в их нынешнем состоянии, или мы можем удалить их и заменить своими собственными.
	|            // Добавьте наши собственные сервисы с помощью IServiceContainer.
	|            // 1. NameCreationService
	|            _nameCreationService = new NameCreationServiceImp();
	|            if (_nameCreationService != null)
	|            {
	|                this.ServiceContainer.RemoveService(typeof(INameCreationService), false);
	|                this.ServiceContainer.AddService(typeof(INameCreationService), _nameCreationService);
	|            }
	|            // 2. CodeDomComponentSerializationService
	|            _codeDomComponentSerializationService = new CodeDomComponentSerializationService(this.ServiceContainer);
	|            if (_codeDomComponentSerializationService != null)
	|            {
	|                this.ServiceContainer.RemoveService(typeof(ComponentSerializationService), false);
	|                this.ServiceContainer.AddService(typeof(ComponentSerializationService), _codeDomComponentSerializationService);
	|            }
	|            // 3. IDesignerSerializationService
	|            _designerSerializationService = new DesignerSerializationServiceImpl(this.ServiceContainer);
	|            if (_designerSerializationService != null)
	|            {
	|                this.ServiceContainer.RemoveService(typeof(IDesignerSerializationService), false);
	|                this.ServiceContainer.AddService(typeof(IDesignerSerializationService), _designerSerializationService);
	|            }
	|            // 4. UndoEngine
	|            _undoEngine = new UndoEngineExt(this.ServiceContainer);
	|            // Отключим UndoEngine.
	|            _undoEngine.Enabled = false;
	|            if (_undoEngine != null)
	|            {
	|                this.ServiceContainer.RemoveService(typeof(UndoEngine), false);
	|                this.ServiceContainer.AddService(typeof(UndoEngine), _undoEngine);
	|            }
	|            // 5. IMenuCommandService
	|            this.ServiceContainer.AddService(typeof(IMenuCommandService), new MenuCommandService(this));
	|
	|            //* 18.12.2021 perfolenta
	|            // 6.
	|            IComponentChangeService cs = this.ServiceContainer.GetService(typeof(IComponentChangeService)) as IComponentChangeService;
	|
	|                if (!(cs == null)){
	|                cs.ComponentChanged += new ComponentChangedEventHandler(OnComponentChanged);
	|                cs.ComponentAdded += new ComponentEventHandler(OnComponentAdded);
	|                cs.ComponentRemoved += new ComponentEventHandler(OnComponentRemoved);
	|            };
	|
	|            //***
	|        }
	|
	|        //* 18.12.2021 perfolenta
	|        private void OnComponentChanged(object sender, ComponentChangedEventArgs e)
	|        {
	|            _dirty = true;
	|        }
	|        private void OnComponentAdded(object sender, ComponentEventArgs e)
	|        {
	|            _dirty = true;
	|        }
	|        private void OnComponentRemoved(object sender, ComponentEventArgs e)
	|        {
	|            _dirty = true;
	|        }
	|        //***
	|
	|
	|        // Выполните некоторые команды меню Edit с помощью MenuCommandServiceImp.
	|        public void DoAction(string command)
	|        {
	|            if (string.IsNullOrEmpty(command))
	|            {
	|                return;
	|            }
	|
	|            IMenuCommandService ims = this.GetService(typeof(IMenuCommandService)) as IMenuCommandService;
	|            if (null == ims)
	|            {
	|                return;
	|            }
	|
	|            try
	|            {
	|                switch (command.ToUpper())
	|                {
	|                    case ""CUT"":
	|                        ims.GlobalInvoke(StandardCommands.Cut);
	|                        break;
	|                    case ""COPY"":
	|                        ims.GlobalInvoke(StandardCommands.Copy);
	|                        break;
	|                    case ""PASTE"":
	|                        ims.GlobalInvoke(StandardCommands.Paste);
	|                        break;
	|                    case ""DELETE"":
	|                        ims.GlobalInvoke(StandardCommands.Delete);
	|                        break;
	|                    default:
	|                        // do nothing;
	|                        break;
	|                }
	|            }
	|            catch { }
	|        }
	|
	|        //* 17.12.2021 perfolenta
	|        public bool Dirty
	|        {
	|            get
	|            {
	|                return _dirty;
	|            }
	|            set
	|            {
	|                _dirty = value;
	|            }
	|        }
	|        //***
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DesignSurfaceExt.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design.Serialization;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    internal class DesignerSerializationServiceImpl : IDesignerSerializationService
	|    {
	|        private IServiceProvider _serviceProvider;
	|
	|        public DesignerSerializationServiceImpl(IServiceProvider serviceProvider)
	|        {
	|            this._serviceProvider = serviceProvider;
	|        }
	|
	|        public ICollection Deserialize(object serializationData)
	|        {
	|            SerializationStore serializationStore = serializationData as SerializationStore;
	|            if (serializationStore != null)
	|            {
	|                ComponentSerializationService componentSerializationService = _serviceProvider.GetService(typeof(ComponentSerializationService)) as ComponentSerializationService;
	|                ICollection collection = componentSerializationService.Deserialize(serializationStore);
	|                return collection;
	|            }
	|            return new object[] {};
	|        }
	|
	|        public object Serialize(ICollection objects)
	|        {
	|            ComponentSerializationService componentSerializationService = _serviceProvider.GetService(typeof(ComponentSerializationService)) as ComponentSerializationService;
	|            SerializationStore returnObject = null;
	|            using (SerializationStore serializationStore = componentSerializationService.CreateStore())
	|            {
	|                foreach (object obj in objects)
	|                {
	|                    if (obj is Control)
	|                    {
	|                        componentSerializationService.Serialize(serializationStore, obj);
	|                    }
	|                }
	|                returnObject = serializationStore;
	|            }
	|            return returnObject;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DesignerSerializationServiceImpl.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel.Design;
	|using System.Windows.Forms.Design;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    internal class DesignerOptionServiceExt4SnapLines : DesignerOptionService
	|    {
	|        public DesignerOptionServiceExt4SnapLines() : base() { }
	|
	|        protected override void PopulateOptionCollection(DesignerOptionCollection options)
	|        {
	|            if (null != options.Parent)
	|            {
	|                return;
	|            }
	|
	|            DesignerOptions ops = new DesignerOptions();
	|            ops.UseSnapLines = true;
	|            ops.UseSmartTags = true;
	|            DesignerOptionCollection wfd = this.CreateOptionCollection(options, ""WindowsFormsDesigner"", null);
	|            this.CreateOptionCollection(wfd, ""General"", ops);
	|        }
	|    }
	|
	|    internal class DesignerOptionServiceExt4Grid : DesignerOptionService
	|    {
	|        private Size _gridSize;
	|
	|        public DesignerOptionServiceExt4Grid(Size gridSize) : base() { _gridSize = gridSize; }
	|
	|        protected override void PopulateOptionCollection(DesignerOptionCollection options)
	|        {
	|            if (null != options.Parent)
	|            {
	|                return;
	|            }
	|
	|            DesignerOptions ops = new DesignerOptions();
	|            ops.GridSize = _gridSize;
	|            ops.SnapToGrid = true;
	|            ops.ShowGrid = true;
	|            ops.UseSnapLines = false;
	|            ops.UseSmartTags = true;
	|            DesignerOptionCollection wfd = this.CreateOptionCollection(options, ""WindowsFormsDesigner"", null);
	|            this.CreateOptionCollection(wfd, ""General"", ops);
	|        }
	|    }
	|
	|    internal class DesignerOptionServiceExt4GridWithoutSnapping : DesignerOptionService
	|    {
	|        private Size _gridSize;
	|
	|        public DesignerOptionServiceExt4GridWithoutSnapping(Size gridSize) : base() { _gridSize = gridSize; }
	|
	|        protected override void PopulateOptionCollection(DesignerOptionCollection options)
	|        {
	|            if (null != options.Parent)
	|            {
	|                return;
	|            }
	|
	|            DesignerOptions ops = new DesignerOptions();
	|            ops.GridSize = _gridSize;
	|            ops.SnapToGrid = false;
	|            ops.ShowGrid = true;
	|            ops.UseSnapLines = false;
	|            ops.UseSmartTags = true;
	|            DesignerOptionCollection wfd = this.CreateOptionCollection(options, ""WindowsFormsDesigner"", null);
	|            this.CreateOptionCollection(wfd, ""General"", ops);
	|        }
	|    }
	|
	|    internal class DesignerOptionServiceExt4NoGuides : DesignerOptionService
	|    {
	|        public DesignerOptionServiceExt4NoGuides() : base() { }
	|
	|        protected override void PopulateOptionCollection(DesignerOptionCollection options)
	|        {
	|            if (null != options.Parent)
	|            {
	|                return;
	|            }
	|
	|            DesignerOptions ops = new DesignerOptions();
	|            ops.GridSize = new Size(8, 8);
	|            ops.SnapToGrid = false;
	|            ops.ShowGrid = false;
	|            ops.UseSnapLines = false;
	|            ops.UseSmartTags = true;
	|            DesignerOptionCollection wfd = this.CreateOptionCollection(options, ""WindowsFormsDesigner"", null);
	|            this.CreateOptionCollection(wfd, ""General"", ops);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DesignerOptionServiceExt.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using System.Globalization;
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class MySelectedObjectConverter : ReferenceConverter
	|    {
	|        dynamic Converter;
	|
	|        public MySelectedObjectConverter(Type type) : base(type)
	|        {
	|            Type ConverterType = typeof(System.Windows.Forms.PropertyGrid).GetNestedType(""SelectedObjectConverter"", BindingFlags.NonPublic);
	|            var ConverterConstructor = ConverterType.GetConstructors()[0];
	|            Converter = ConverterConstructor.Invoke(null);
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == null)
	|            {
	|                throw new ArgumentNullException(""destinationType"");
	|            }
	|
	|            if (destinationType == typeof(string))
	|            {
	|                if (value != null)
	|                {
	|                    if (context != null)
	|                    {
	|                        IReferenceService refSvc = (IReferenceService)context.GetService(typeof(IReferenceService));
	|                        if (refSvc != null)
	|                        {
	|                            string name = refSvc.GetName(value);
	|                            if (name != null)
	|                            {
	|                                return name;
	|                            }
	|                        }
	|                    }
	|                    if (!System.Runtime.InteropServices.Marshal.IsComObject(value) && value is IComponent)
	|                    {
	|                        IComponent comp = (IComponent)value;
	|                        ISite site = comp.Site;
	|                        if (site != null)
	|                        {
	|                            string name = site.Name;
	|                            if (name != null)
	|                            {
	|                                return name;
	|                            }
	|                        }
	|                    }
	|                    return String.Empty;
	|                }
	|                return ""(отсутствует)"";
	|            }
	|
	|            return Converter.ConvertTo(context, culture, value, destinationType);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MySelectedObjectConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class ListItemListBox : FilterablePropertyBase
	|    {
	|        private string M_Text;
	|        private object M_Value;
	|
	|        public ListItemListBox()
	|        {
	|        }
	|
	|        [DisplayName(""ТипЗначения"")]
	|        [Description(""Указывает тип значения элемента."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        public DataType ValueType { get; set; }
	|
	|
	|        [DisplayName(""Текст"")]
	|        [Description(""Возвращает или задает текст, отображаемый в элементе списка."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public string Text
	|        {
	|            get { return M_Text; }
	|            set { M_Text = value; }
	|        }
	|
	|        [Browsable(false)]
	|        public object Value
	|        {
	|            get { return M_Value; }
	|            set
	|            {
	|                M_Value = value;
	|                if (value.GetType() == typeof(bool))
	|                {
	|                    if ((bool)value)
	|                    {
	|                        M_Text = ""Истина"";
	|                    }
	|                    else
	|                    {
	|                        M_Text = ""Ложь"";
	|                    }
	|                }
	|                else
	|                {
	|                    M_Text = Convert.ToString(M_Value);
	|                }
	|            }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem)."")]
	|        [Category(""Прочее"")]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        [DynamicPropertyFilter(""ValueType"", ""Булево"")]
	|        public bool ValueBool
	|        {
	|            get { return (bool)Value; }
	|            set { Value = value; }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem)."")]
	|        [Category(""Прочее"")]
	|        [DynamicPropertyFilter(""ValueType"", ""Дата"")]
	|        public DateTime ValueDateTime
	|        {
	|            get { return (DateTime)Value; }
	|            set { Value = value; }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem)."")]
	|        [Category(""Прочее"")]
	|        [DynamicPropertyFilter(""ValueType"", ""Строка"")]
	|        public string ValueString
	|        {
	|            get { return (string)Value; }
	|            set { Value = value; }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem). Для разделения разрядов используйте запятую."")]
	|        [Category(""Прочее"")]
	|        [DynamicPropertyFilter(""ValueType"", ""Число"")]
	|        [DefaultValue(0)]
	|        public decimal ValueNumber
	|        {
	|            get { return Convert.ToDecimal(Value); }
	|            set { Value = value; }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\ListItemListBox.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyListBoxCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private osfDesigner.ListBox MyListBox1;
	|
	|        public MyListBoxCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Зададим нужный нам тип коллекции.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            return new Type[] { typeof(ListItemListBox) };
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            MyListBox1 = (osfDesigner.ListBox)this.Context.Instance;
	|            collectionForm.Text = ""Редактор элементов ПолеСписка"";
	|            collectionForm.Shown += CollectionForm_Shown;
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|
	|        private void CollectionForm_Shown(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        void PropertyGrid1_PropertyValueChanged(object sender, PropertyValueChangedEventArgs e)
	|        {
	|            if (e.ChangedItem.Value.ToString() == ""Строка"")
	|            {
	|                try
	|                {
	|                    string znach = (string)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)MyListBox1.Items[ListBox1.SelectedIndex]).Value = """";
	|                }
	|            }
	|            else if (e.ChangedItem.Value.ToString() == ""Число"")
	|            {
	|                try
	|                {
	|                    decimal znach = (decimal)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)MyListBox1.Items[ListBox1.SelectedIndex]).Value = 0;
	|                }
	|            }
	|            else if (e.ChangedItem.Value.ToString() == ""Булево"")
	|            {
	|                try
	|                {
	|                    bool znach = (bool)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)MyListBox1.Items[ListBox1.SelectedIndex]).Value = false;
	|                }
	|            }
	|            else if (e.ChangedItem.Value.ToString() == ""Дата"")
	|            {
	|                try
	|                {
	|                    DateTime znach = (DateTime)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)MyListBox1.Items[ListBox1.SelectedIndex]).Value = new DateTime(1, 1, 1, 0, 0, 0);
	|                }
	|            }
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            MyListBox1.Items.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyListBox1.Items });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            MyListBox1.SelectedIndex = index;
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string FileName = """";
	|                try
	|                {
	|                    ListItemListBox ListItemListBox1 = (ListItemListBox)MyListBox1.Items[e.Index];
	|                    ListItem1.Value = ListItemListBox1.Value;
	|                    FileName = ListItemListBox1.Text;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset,
	|                                            e.Bounds.Y,
	|                                            e.Bounds.Width - offset,
	|                                            e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                string itemText = FileName;
	|                try
	|                {
	|                    Graphics1.DrawString(itemText,
	|                        ListBox1.Font,
	|                        textBrush,
	|                        new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                }
	|
	|                finally
	|                {
	|                    textBrush?.Dispose();
	|                }
	|
	|                // Проверьте, нужно ли нам изменять горизонтальный экстент списка.
	|                int width = offset + (int)Graphics1.MeasureString(itemText, ListBox1.Font).Width;
	|                if (width > e.Bounds.Width && ListBox1.HorizontalExtent < width)
	|                {
	|                    ListBox1.HorizontalExtent = width;
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyListBoxCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyComboBoxCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private ComboBox ComboBox1;
	|
	|        public MyComboBoxCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Зададим нужный нам тип коллекции.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            return new Type[] { typeof(ListItemComboBox) };
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            ComboBox1 = (ComboBox)this.Context.Instance;
	|            collectionForm.Text = ""Редактор элементов ПолеВыбора"";
	|            collectionForm.Shown += CollectionForm_Shown;
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid1_SelectedObjectsChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                        ButtonOk1.Click += ButtonOk1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|
	|        private void ButtonOk1_Click(object sender, EventArgs e)
	|        {
	|            ComboBox1.SelectedIndex = ListBox1.SelectedIndex;
	|        }
	|
	|        private void PropertyGrid1_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            ComboBox1.SelectedIndex = ListBox1.SelectedIndex;
	|        }
	|
	|        private void CollectionForm_Shown(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        void PropertyGrid1_PropertyValueChanged(object sender, PropertyValueChangedEventArgs e)
	|        {
	|            if (e.ChangedItem.Value.ToString() == ""Строка"")
	|            {
	|                try
	|                {
	|                    string znach = (string)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)ComboBox1.Items[ListBox1.SelectedIndex]).Value = """";
	|                }
	|            }
	|            else if (e.ChangedItem.Value.ToString() == ""Число"")
	|            {
	|                try
	|                {
	|                    decimal znach = (decimal)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)ComboBox1.Items[ListBox1.SelectedIndex]).Value = 0;
	|                }
	|            }
	|            else if (e.ChangedItem.Value.ToString() == ""Булево"")
	|            {
	|                try
	|                {
	|                    bool znach = (bool)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)ComboBox1.Items[ListBox1.SelectedIndex]).Value = false;
	|                }
	|            }
	|            else if (e.ChangedItem.Value.ToString() == ""Дата"")
	|            {
	|                try
	|                {
	|                    DateTime znach = (DateTime)e.ChangedItem.Parent.GridItems[""Значение""].Value;
	|                }
	|                catch
	|                {
	|                    ((dynamic)ComboBox1.Items[ListBox1.SelectedIndex]).Value = new DateTime(1, 1, 1, 0, 0, 0);
	|                }
	|            }
	|            ComboBox1.SelectedIndex = ListBox1.SelectedIndex;
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            ComboBox1.Items.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ComboBox1.Items });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            ComboBox1.SelectedIndex = index;
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string FileName = """";
	|                try
	|                {
	|                    ListItemComboBox ListItemComboBox1 = (ListItemComboBox)ComboBox1.Items[e.Index];
	|                    ListItem1.Value = ListItemComboBox1.Value;
	|                    FileName = ListItemComboBox1.Text;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset,
	|                                            e.Bounds.Y,
	|                                            e.Bounds.Width - offset,
	|                                            e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                string itemText = FileName;
	|                try
	|                {
	|                    Graphics1.DrawString(itemText,
	|                        ListBox1.Font,
	|                        textBrush,
	|                        new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                }
	|
	|                finally
	|                {
	|                    textBrush?.Dispose();
	|                }
	|
	|                // Проверьте, нужно ли нам изменять горизонтальный экстент списка.
	|                int width = offset + (int)Graphics1.MeasureString(itemText, ListBox1.Font).Width;
	|                if (width > e.Bounds.Width && ListBox1.HorizontalExtent < width)
	|                {
	|                    ListBox1.HorizontalExtent = width;
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyComboBoxCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class ListItemComboBox : FilterablePropertyBase
	|    {
	|        private string M_Text;
	|        private object M_Value;
	|
	|        public ListItemComboBox()
	|        {
	|        }
	|
	|        [DisplayName(""ТипЗначения"")]
	|        [Description(""Указывает тип значения элемента."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        public DataType ValueType { get; set; }
	|
	|
	|        [DisplayName(""Текст"")]
	|        [Description(""Возвращает или задает текст, отображаемый в элементе списка."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public string Text
	|        {
	|            get { return M_Text; }
	|            set { M_Text = value; }
	|        }
	|
	|        [Browsable(false)]
	|        public object Value
	|        {
	|            get { return M_Value; }
	|            set
	|            {
	|                M_Value = value;
	|                if (value.GetType() == typeof(bool))
	|                {
	|                    if ((bool)value)
	|                    {
	|                        M_Text = ""Истина"";
	|                    }
	|                    else
	|                    {
	|                        M_Text = ""Ложь"";
	|                    }
	|                }
	|                else
	|                {
	|                    M_Text = Convert.ToString(M_Value);
	|                }
	|            }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem)."")]
	|        [Category(""Прочее"")]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        [DynamicPropertyFilter(""ValueType"", ""Булево"")]
	|        public bool ValueBool
	|        {
	|            get { return (bool)Value; }
	|            set { Value = value; }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem)."")]
	|        [Category(""Прочее"")]
	|        [DynamicPropertyFilter(""ValueType"", ""Дата"")]
	|        public DateTime ValueDateTime
	|        {
	|            get { return (DateTime)Value; }
	|            set { Value = value; }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem)."")]
	|        [Category(""Прочее"")]
	|        [DynamicPropertyFilter(""ValueType"", ""Строка"")]
	|        public string ValueString
	|        {
	|            get { return (string)Value; }
	|            set { Value = value; }
	|        }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Возвращает или задает значение, связанное с ЭлементСписка (ListItem). Для разделения разрядов используйте запятую."")]
	|        [Category(""Прочее"")]
	|        [DynamicPropertyFilter(""ValueType"", ""Число"")]
	|        [DefaultValue(0)]
	|        public decimal ValueNumber
	|        {
	|            get { return Convert.ToDecimal(Value); }
	|            set { Value = value; }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\ListItemComboBox.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    // Атрибут для поддержки динамически показываемых свойств.
	|    [AttributeUsage(AttributeTargets.Property, Inherited = true)]
	|    class DynamicPropertyFilterAttribute : Attribute
	|    {
	|        string _propertyName; // Название свойства, от которого будет зависеть видимость.
	|        string _showOn; // Значения свойства, от которого зависит видимость (через запятую, если несколько), при котором свойство, к которому применен атрибут, будет видимо. 
	|        
	|        public string PropertyName
	|        {
	|            get { return _propertyName; }
	|        }
	|
	|        public string ShowOn
	|        {
	|            get { return _showOn; }
	|        }
	|
	|        public DynamicPropertyFilterAttribute(string propertyName, string value)
	|        {
	|            _propertyName = propertyName;
	|            _showOn = value;
	|        }
	|    }
	|
	|    // Базовый класс для объектов, поддерживающих динамическое отображение свойств в PropertyGrid.
	|    public class FilterablePropertyBase : ICustomTypeDescriptor
	|    {
	|        protected PropertyDescriptorCollection GetFilteredProperties(Attribute[] attributes)
	|        {
	|            PropertyDescriptorCollection pdc = TypeDescriptor.GetProperties(this, attributes, true);
	|            PropertyDescriptorCollection finalProps = new PropertyDescriptorCollection(new PropertyDescriptor[0]);
	|
	|            foreach (PropertyDescriptor pd in pdc)
	|            {
	|                bool include = false;
	|                bool dynamic = false;
	|
	|                foreach (Attribute a in pd.Attributes)
	|                {
	|                    if (a is DynamicPropertyFilterAttribute)
	|                    {
	|                        dynamic = true;
	|                        DynamicPropertyFilterAttribute dpf = (DynamicPropertyFilterAttribute)a;
	|                        PropertyDescriptor temp = pdc[dpf.PropertyName];
	|
	|                        if (dpf.ShowOn.IndexOf(temp.GetValue(this).ToString()) > -1)
	|                        {
	|                            include = true;
	|                        }
	|                    }
	|                }
	|
	|                if (!dynamic || include)
	|                {
	|                    finalProps.Add(pd);
	|                }
	|            }
	|
	|            return finalProps;
	|        }
	|
	|        public TypeConverter GetConverter()
	|        {
	|            return TypeDescriptor.GetConverter(this, true);
	|        }
	|
	|        public EventDescriptorCollection GetEvents(Attribute[] attributes)
	|        {
	|            return TypeDescriptor.GetEvents(this, attributes, true);
	|        }
	|
	|        EventDescriptorCollection ICustomTypeDescriptor.GetEvents()
	|        {
	|            return TypeDescriptor.GetEvents(this, true);
	|        }
	|
	|        public string GetComponentName()
	|        {
	|            return TypeDescriptor.GetComponentName(this, true);
	|        }
	|
	|        public object GetPropertyOwner(PropertyDescriptor pd)
	|        {
	|            return this;
	|        }
	|
	|        public AttributeCollection GetAttributes()
	|        {
	|            return TypeDescriptor.GetAttributes(this, true);
	|        }
	|
	|        public PropertyDescriptorCollection GetProperties(Attribute[] attributes)
	|        {
	|            return GetFilteredProperties(attributes);
	|        }
	|
	|        PropertyDescriptorCollection ICustomTypeDescriptor.GetProperties()
	|        {
	|            return GetFilteredProperties(new Attribute[0]);
	|        }
	|
	|        public object GetEditor(Type editorBaseType)
	|        {
	|            return TypeDescriptor.GetEditor(this, editorBaseType, true);
	|        }
	|
	|        public PropertyDescriptor GetDefaultProperty()
	|        {
	|            return TypeDescriptor.GetDefaultProperty(this, true);
	|        }
	|
	|        public EventDescriptor GetDefaultEvent()
	|        {
	|            return TypeDescriptor.GetDefaultEvent(this, true);
	|        }
	|
	|        public string GetClassName()
	|        {
	|            return TypeDescriptor.GetClassName(this, true);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DynamicPropertyFilter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.Windows.Forms; 
	|
	|namespace osfDesigner
	|{
	|    public class MyImageIndexConverter : ImageIndexConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            object res = base.ConvertTo(context, culture, value, destinationType);
	|
	|            if (value.ToString() == ""-1"")
	|            {
	|                return ""(Нет)"";
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
	|        {
	|            if (value is string)
	|            {
	|                if (value.ToString() == ""(Нет)"" || value.ToString() == ""(none)"")
	|                {
	|                    value = ""-1"";
	|                    return base.ConvertFrom(context, culture, value);
	|                }
	|            }
	|
	|            return base.ConvertFrom(context, culture, value);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyImageIndexConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyImageListConverter : ComponentConverter
	|    {
	|        public MyImageListConverter() : base(typeof(System.Windows.Forms.ImageList))
	|        {
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                if (value != null)
	|                {
	|                    return base.ConvertTo(context, culture, value, destinationType);
	|                }
	|
	|                return ""(Нет)"";
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyImageListConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyCollectionConverter : CollectionConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                return ""(Коллекция)"";
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyCollectionConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MyMaximumSizeEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmMaxWidthHeight _frmMaxWidthHeight = new frmMaxWidthHeight();
	|
	|                _frmMaxWidthHeight.numericUpDown1.Value = ((Size)value).Width;
	|                _frmMaxWidthHeight.numericUpDown2.Value = ((Size)value).Height;
	|                _frmMaxWidthHeight._wfes = wfes;
	|
	|                wfes.DropDownControl(_frmMaxWidthHeight);
	|                int _Width = Convert.ToInt32(_frmMaxWidthHeight.numericUpDown1.Value);
	|                int _Height = Convert.ToInt32(_frmMaxWidthHeight.numericUpDown2.Value);
	|                value = new Size(_Width, _Height);
	|            }
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    public class frmMaxWidthHeight : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label label1;
	|        public System.Windows.Forms.NumericUpDown numericUpDown1;
	|        private System.Windows.Forms.Label label2;
	|        public System.Windows.Forms.NumericUpDown numericUpDown2;
	|        private Container components = null;
	|
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmMaxWidthHeight()
	|        {
	|            this.ClientSize = new Size(192, 70);
	|            this.ControlBox = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmMaxWidthHeight"";
	|            this.ShowInTaskbar = false;
	|            this.Closed += FrmMaxWidthHeight_Closed;
	|
	|            label1 = new System.Windows.Forms.Label();
	|            label1.Parent = this;
	|            label1.Location = new Point(10, 10);
	|            label1.Text = ""Ширина"";
	|            label1.Width = 55;
	|
	|            numericUpDown1 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown1.Parent = this;
	|            numericUpDown1.Location = new Point(label1.Left + label1.Width + 5, label1.Top);
	|            numericUpDown1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown1.ThousandsSeparator = true;
	|            numericUpDown1.Minimum = 0;
	|            numericUpDown1.Maximum = 7680;
	|
	|            label2 = new System.Windows.Forms.Label();
	|            label2.Parent = this;
	|            label2.Location = new Point(label1.Left, label1.Bottom + 5);
	|            label2.Text = ""Высота"";
	|            label2.Width = 55;
	|
	|            numericUpDown2 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown2.Parent = this;
	|            numericUpDown2.Location = new Point(label2.Left + label2.Width + 5, label2.Top);
	|            numericUpDown2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown2.ThousandsSeparator = true;
	|            numericUpDown2.Minimum = 0;
	|            numericUpDown2.Maximum = 4800;
	|
	|            TopLevel = false;
	|        }
	|
	|        private void FrmMaxWidthHeight_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyMaximumSizeEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MyMinimumSizeEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmMinWidthHeight _frmMinWidthHeight = new frmMinWidthHeight();
	|
	|                _frmMinWidthHeight.numericUpDown1.Value = ((Size)value).Width;
	|                _frmMinWidthHeight.numericUpDown2.Value = ((Size)value).Height;
	|                _frmMinWidthHeight._wfes = wfes;
	|
	|                wfes.DropDownControl(_frmMinWidthHeight);
	|                int _Width = Convert.ToInt32(_frmMinWidthHeight.numericUpDown1.Value);
	|                int _Height = Convert.ToInt32(_frmMinWidthHeight.numericUpDown2.Value);
	|                value = new Size(_Width, _Height);
	|            }
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    public class frmMinWidthHeight : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label label1;
	|        public System.Windows.Forms.NumericUpDown numericUpDown1;
	|        private System.Windows.Forms.Label label2;
	|        public System.Windows.Forms.NumericUpDown numericUpDown2;
	|        private Container components = null;
	|
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmMinWidthHeight()
	|        {
	|            this.ClientSize = new Size(192, 70);
	|            this.ControlBox = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmMinWidthHeight"";
	|            this.ShowInTaskbar = false;
	|            this.Closed += FrmMinWidthHeight_Closed;
	|
	|            label1 = new System.Windows.Forms.Label();
	|            label1.Parent = this;
	|            label1.Location = new Point(10, 10);
	|            label1.Text = ""Ширина"";
	|            label1.Width = 55;
	|
	|            numericUpDown1 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown1.Parent = this;
	|            numericUpDown1.Location = new Point(label1.Left + label1.Width + 5, label1.Top);
	|            numericUpDown1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown1.ThousandsSeparator = true;
	|            numericUpDown1.Minimum = 0;
	|            numericUpDown1.Maximum = 7680;
	|
	|            label2 = new System.Windows.Forms.Label();
	|            label2.Parent = this;
	|            label2.Location = new Point(label1.Left, label1.Bottom + 5);
	|            label2.Text = ""Высота"";
	|            label2.Width = 55;
	|
	|            numericUpDown2 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown2.Parent = this;
	|            numericUpDown2.Location = new Point(label2.Left + label2.Width + 5, label2.Top);
	|            numericUpDown2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown2.ThousandsSeparator = true;
	|            numericUpDown2.Minimum = 0;
	|            numericUpDown2.Maximum = 4800;
	|
	|            TopLevel = false;
	|        }
	|
	|        private void FrmMinWidthHeight_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyMinimumSizeEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyStatusBarPanelCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private StatusBar StatusBar1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyStatusBarPanelCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Зададим нужный нам тип коллекции.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            return new Type[] { typeof(osfDesigner.StatusBarPanel) };
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            StatusBar1 = (StatusBar)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции ПанелиСтрокиСостояния"";
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                PropertiesLabel1.Text = ""Свойства:"";
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            dynamic comp = PropertyGrid1.SelectedObject;
	|            if (comp.DefaultValues != null)
	|            {
	|                return;
	|            }
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            dynamic GridItemCollection1 = (dynamic)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            StatusBar1.Panels.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { StatusBar1.Panels });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            osfDesigner.StatusBarPanel SimilarObj = (osfDesigner.StatusBarPanel)PropertyGrid1.SelectedObject;
	|            SimilarObj.Text = OneScriptFormsDesigner.RevertStatusBarPanelName(StatusBar1);
	|            SimilarObj.Name = SimilarObj.Text;
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = SimilarObj;
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            GetDefaultValues();
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ListItem1Text = """";
	|                try
	|                {
	|                    System.Windows.Forms.StatusBarPanel StatusBarPanel1 = (System.Windows.Forms.StatusBarPanel)StatusBar1.Panels[e.Index];
	|                    ListItem1.Value = StatusBarPanel1;
	|                    ListItem1Text = StatusBarPanel1.Text;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                Graphics1.DrawString(ListItem1Text, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyStatusBarPanelCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyColumnHeaderCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private ListView ListView1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyColumnHeaderCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // зададим нужный нам тип коллекции.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            return new Type[] { typeof(osfDesigner.ColumnHeader) };
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            ListView1 = (ListView)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции Колонки"";
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                PropertiesLabel1.Text = ""Свойства:"";
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            dynamic comp = PropertyGrid1.SelectedObject;
	|            if (comp.DefaultValues != null)
	|            {
	|                return;
	|            }
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            dynamic GridItemCollection1 = (dynamic)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null)  // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"")  // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|	
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            ListView1.Columns.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ListView1.Columns });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            ColumnHeader SimilarObj = (ColumnHeader)PropertyGrid1.SelectedObject;
	|            SimilarObj.Text = OneScriptFormsDesigner.RevertColumnHeaderName(ListView1);
	|            SimilarObj.Name = SimilarObj.Text;
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = SimilarObj;
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            GetDefaultValues();
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ListItem1Text = """";
	|                try
	|                {
	|                    System.Windows.Forms.ColumnHeader ColumnHeader1 = (System.Windows.Forms.ColumnHeader)ListView1.Columns[e.Index];
	|                    ListItem1.Value = ColumnHeader1;
	|                    ListItem1Text = ColumnHeader1.Text;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                Graphics1.DrawString(ListItem1Text, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyColumnHeaderCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design; 
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyListViewItemCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private ListView ListView1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyListViewItemCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Зададим нужный нам тип коллекции.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            return new Type[] { typeof(osfDesigner.ListViewItem) };
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            ListView1 = (ListView)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции ЭлементыСпискаЭлементов"";
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                PropertiesLabel1.Text = ""Свойства:"";
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            dynamic comp = PropertyGrid1.SelectedObject;
	|            if (comp.DefaultValues != null)
	|            {
	|                return;
	|            }
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            dynamic GridItemCollection1 = (dynamic)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            ListView1.Items.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ListView1.Items });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            collectionForm.Refresh();
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            osfDesigner.ListViewItem SimilarObj = (osfDesigner.ListViewItem)PropertyGrid1.SelectedObject;
	|            SimilarObj.Text = OneScriptFormsDesigner.RevertListViewItemName(ListView1);
	|            SimilarObj.Name = SimilarObj.Text;
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = SimilarObj;
	|            GetDefaultValues();
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ListItem1Text = ""{}"";
	|                try
	|                {
	|                    System.Windows.Forms.ListViewItem ListViewItem1 = (System.Windows.Forms.ListViewItem)ListView1.Items[e.Index];
	|                    ListItem1.Value = ListViewItem1;
	|                    ListItem1Text = ""{"" + ListViewItem1.Text + ""}"";
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                Graphics1.DrawString(ListItem1Text, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyListViewItemCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyListViewSubItemCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private ListViewItem ListViewItem1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyListViewSubItemCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Зададим нужный нам тип коллекции.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            return new Type[] { typeof(osfDesigner.ListViewSubItem) };
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции.
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            ListViewItem1 = (ListViewItem)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции ПодэлементыСпискаЭлементов"";
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                SetEnabledButtons();
	|                PropertiesLabel1.Text = ""Свойства:"";
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid_SelectedObjectsChanged;
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            dynamic comp = PropertyGrid1.SelectedObject;
	|            if (comp.DefaultValues != null)
	|            {
	|                return;
	|            }
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            dynamic GridItemCollection1 = (dynamic)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            SetEnabledButtons();
	|        }
	|
	|        private void SetEnabledButtons()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            if (index == 0)
	|            {
	|                ButtonUp1.Enabled = false;
	|                ButtonDown1.Enabled = false;
	|                ButtonRemove1.Enabled = false;
	|                if (PropertyGrid1.SelectedObject != null)
	|                {
	|                    PropertyGrid1.SelectedObject = null;
	|                }
	|            }
	|            if (index == 1)
	|            {
	|                ButtonUp1.Enabled = false;
	|            }
	|            if (index == ListBox1.Items.Count - 1)
	|            {
	|                ButtonDown1.Enabled = false;
	|            }
	|
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            SetEnabledButtons();
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            ListViewItem1.SubItems.Clear();
	|            System.Windows.Forms.ListViewItem.ListViewSubItem[] SubItem1 = new System.Windows.Forms.ListViewItem.ListViewSubItem[ListViewItem1.SubItems.Count - 1];
	|            for (int i = 1; i < ListViewItem1.SubItems.Count; i++)
	|            {
	|                SubItem1[i] = ListViewItem1.SubItems[i];
	|            }
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { SubItem1 });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            collectionForm.Refresh();
	|        }
	|
	|        private void PropertyGrid_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            osfDesigner.ListViewSubItem SimilarObj = (osfDesigner.ListViewSubItem)PropertyGrid1.SelectedObject;
	|            SimilarObj.Text = OneScriptFormsDesigner.RevertListViewSubItemName(ListViewItem1);
	|            SimilarObj.Name = SimilarObj.Text;
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = SimilarObj;
	|            GetDefaultValues();
	|        }
	|	
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|            SetEnabledButtons();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|            SetEnabledButtons();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ListViewSubItem1Text = ""{}"";
	|                try
	|                {
	|                    System.Windows.Forms.ListViewItem.ListViewSubItem ListViewSubItem1 = (System.Windows.Forms.ListViewItem.ListViewSubItem)ListViewItem1.SubItems[e.Index];
	|                    ListItem1.Value = ListViewSubItem1;
	|                    ListViewSubItem1Text = ""{"" + ListViewSubItem1.Text + ""}"";
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                Graphics1.DrawString(ListViewSubItem1Text, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyListViewSubItemCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyGridColumnStylesCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private System.Windows.Forms.PropertyGrid TopLevelPropertyGrid1;
	|        private System.Windows.Forms.DataGridTableStyle DataGridTableStyle1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyGridColumnStylesCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Создадим перечень нужных нам в коллекции типов.
	|        protected override Type[] CreateNewItemTypes()
	|        {
	|            Type[] Type1;
	|            Type1 = new Type[]
	|            {
	|                typeof(osfDesigner.DataGridTextBoxColumn),
	|                typeof(osfDesigner.DataGridBoolColumn),
	|                typeof(osfDesigner.DataGridComboBoxColumnStyle)
	|            };
	|            return Type1;
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            DataGridTableStyle1 = OneScriptFormsDesigner.RevertOriginalObj((osfDesigner.DataGridTableStyle)this.Context.Instance);
	|            collectionForm.Text = ""Редактор коллекции СтилиКолонкиСеткиДанных"";
	|
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                PropertiesLabel1.Text = ""Свойства:"";
	|                TopLevelPropertyGrid1 = pDesigner.DSME.PropertyGridHost.PropertyGrid;
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid1_SelectedObjectsChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|
	|                        PropertyInfo PropertyInfo3 = ButtonAdd1.GetType().GetProperty(""ShowSplit"", BindingFlags.Public | BindingFlags.Instance);
	|                        PropertyInfo3.SetValue(ButtonAdd1, true);
	|                        foreach (ToolStripMenuItem item in ButtonAdd1.ContextMenuStrip.Items)
	|                        {
	|                            if (item.Text == ""DataGridBoolColumn"")
	|                            {
	|                                item.Text = ""СтильКолонкиБулево"";
	|                                item.Click += Item_BoolColumn_Click;
	|                            }
	|                            else if (item.Text == ""DataGridTextBoxColumn"")
	|                            {
	|                                item.Text = ""СтильКолонкиПолеВвода"";
	|                                item.Click += Item_BoolColumn_Click;
	|                            }
	|                            else if (item.Text == ""DataGridComboBoxColumnStyle"")
	|                            {
	|                                item.Text = ""СтильКолонкиПолеВыбора"";
	|                                item.Click += Item_ComboBoxColumn_Click;
	|                            }
	|                        }
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|
	|        private void Item_ComboBoxColumn_Click(object sender, EventArgs e)
	|        {
	|            dynamic ColumnStyle1 = PropertyGrid1.SelectedObject;
	|            ColumnStyle1.NameStyle = OneScriptFormsDesigner.RevertDataGridColumnStyleName(DataGridTableStyle1, ColumnStyle1);
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = ColumnStyle1;
	|            GetDefaultValues();
	|        }
	|
	|        private void Item_TextBoxColumn_Click(object sender, EventArgs e)
	|        {
	|            dynamic ColumnStyle1 = PropertyGrid1.SelectedObject;
	|            ColumnStyle1.NameStyle = OneScriptFormsDesigner.RevertDataGridColumnStyleName(DataGridTableStyle1, ColumnStyle1);
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = ColumnStyle1;
	|            GetDefaultValues();
	|        }
	|
	|        private void Item_BoolColumn_Click(object sender, EventArgs e)
	|        {
	|            dynamic ColumnStyle1 = PropertyGrid1.SelectedObject;
	|            ColumnStyle1.NameStyle = OneScriptFormsDesigner.RevertDataGridColumnStyleName(DataGridTableStyle1, ColumnStyle1);
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = ColumnStyle1;
	|            GetDefaultValues();
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            dynamic ColumnStyle1 = PropertyGrid1.SelectedObject;
	|            ColumnStyle1.NameStyle = OneScriptFormsDesigner.RevertDataGridColumnStyleName(DataGridTableStyle1, ColumnStyle1);
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = ColumnStyle1;
	|            GetDefaultValues();
	|        }
	|
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            dynamic comp = PropertyGrid1.SelectedObject;
	|            if (comp.DefaultValues != null)
	|            {
	|                return;
	|            }
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            dynamic GridItemCollection1 = (dynamic)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            DataGridTableStyle1.GridColumnStyles.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { DataGridTableStyle1.GridColumnStyles });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            collectionForm.Refresh();
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid1_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ListItem1Text = """";
	|                try
	|                {
	|                    dynamic ColumnStyle1 = DataGridTableStyle1.GridColumnStyles[e.Index];
	|                    ListItem1Text = ColumnStyle1.NameStyle;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                Graphics1.DrawString(ListItem1Text, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyGridColumnStylesCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class DataGridComboBoxColumnStyle : System.Windows.Forms.DataGridTextBoxColumn
	|    {
	|        private osfDesigner.HorizontalAlignment _Alignment;
	|        private osfDesigner.ComboBox _ComboBox = new osfDesigner.ComboBox();
	|
	|        public DataGridComboBoxColumnStyle()
	|        {
	|            _Alignment = (osfDesigner.HorizontalAlignment)(base.Alignment);
	|        }
	|
	|        [DisplayName(""Выравнивание"")]
	|        [Description(""Возвращает или задает выравнивание текста в колонке."")]
	|        [Category(""Показать"")]
	|        [Browsable(true)]
	|        public new HorizontalAlignment Alignment
	|        {
	|            get { return _Alignment; }
	|            set
	|            {
	|                base.Alignment = (System.Windows.Forms.HorizontalAlignment)value;
	|                _Alignment = value;
	|            }
	|        }
	|
	|        [DisplayName(""ИмяСтиля"")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public string NameStyle { get; set; }
	|
	|        [DisplayName(""ИмяОтображаемого"")]
	|        [Description(""Возвращает или задает имя элемента данных, на который отображается стиль столбца."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        public new string MappingName
	|        {
	|            get { return base.MappingName; }
	|            set { base.MappingName = value; }
	|        }
	|
	|        [DisplayName(""ПолеВыбора"")]
	|        [Description(""Возвращает объект класса ПолеВыбора (ComboBox), используемый в стиле колонки сетки данных."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        [TypeConverter(typeof(MyConverter))]
	|        public osfDesigner.ComboBox ComboBox
	|        {
	|            get { return _ComboBox; }
	|        }
	|
	|        [DisplayName(""ТекстЗаголовка"")]
	|        [Description(""Возвращает или задает текст заголовка колонки."")]
	|        [Category(""Показать"")]
	|        [Browsable(true)]
	|        public new string HeaderText
	|        {
	|            get { return base.HeaderText; }
	|            set { base.HeaderText = value; }
	|        }
	|
	|        [DisplayName(""ТолькоЧтение"")]
	|        [Description(""Возвращает или задает значение, указывающее, находится ли СтильКолонкиПолеВвода (DataGridTextBoxColumn) в состоянии 'только для чтения'."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        public new bool ReadOnly
	|        {
	|            get { return base.ReadOnly; }
	|            set { base.ReadOnly = value; }
	|        }
	|
	|        [DisplayName(""Ширина"")]
	|        [Description(""Возвращает или задает ширину колонки."")]
	|        [Category(""Макет"")]
	|        [Browsable(true)]
	|        public new int Width
	|        {
	|            get { return base.Width; }
	|            set { base.Width = value; }
	|        }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string NullText { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string Format { get; set; }
	|	
	|        [Browsable(false)]
	|        public string RequiredValues
	|        {
	|            get
	|            {
	|                return @""
	|"";
	|            }
	|        }
	|
	|        [Browsable(false)]
	|        public string DefaultValues { get; set; }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DataGridComboBoxColumnStyle.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Linq;
	|using System.Text;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.Runtime.CompilerServices;
	|
	|namespace osfDesigner
	|{
	|    public class MyConverter : TypeConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                if (value.GetType() == typeof(ComboBox))
	|                {
	|                    return ""ПолеВыбора, Элементов: "" + ((ComboBox)value).Items.Count;
	|                }
	|                return value.ToString();
	|            }
	|            return base.ConvertTo(context, cultureInfo, RuntimeHelpers.GetObjectValue(value), destinationType);
	|        }
	|
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|
	|        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	|        {
	|            PropertyDescriptorCollection originalCollection = TypeDescriptor.GetProperties(value, attributes);
	|            PropertyDescriptor[] pds = new PropertyDescriptor[originalCollection.Count];
	|            for (int i = 0; i < originalCollection.Count; i++)
	|            {
	|                pds[i] = new ExpandablePropertyDescriptor(originalCollection[i]);
	|            }
	|            return new PropertyDescriptorCollection(pds);
	|        }
	|    }
	|
	|    public class ExpandablePropertyDescriptor : PropertyDescriptor
	|    {
	|        private PropertyDescriptor _pd;
	|
	|        public ExpandablePropertyDescriptor(PropertyDescriptor pd) : base(GetDisplayName(pd.DisplayName), null)
	|        {
	|            _pd = pd;
	|        }
	|
	|        private static string GetDisplayName(string p1)
	|        {
	|            return p1;
	|        }
	|
	|        private static string CSharpName(Type type)
	|        {
	|            var sb = new StringBuilder();
	|            var name = type.Name;
	|            if (!type.IsGenericType)
	|            {
	|                return name;
	|            }
	|            sb.Append(name.Substring(0, name.IndexOf('`')));
	|            sb.Append(""<"");
	|            sb.Append(string.Join("", "", type.GetGenericArguments()
	|                                            .Select(CSharpName)));
	|            sb.Append("">"");
	|            return sb.ToString();
	|        }
	|
	|        public override bool CanResetValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override Type ComponentType
	|        {
	|            get { return _pd.GetType(); }
	|        }
	|
	|        public override object GetValue(object component)
	|        {
	|            object comp = _pd.GetValue(component);
	|            Type compType = null;
	|            try
	|            {
	|                compType = comp.GetType();
	|            }
	|            catch { }
	|            if (compType != null)
	|            {
	|                if (comp.GetType() == typeof(System.Windows.Forms.ComboBox.ObjectCollection))
	|                {
	|                    return ""(Коллекция)"";
	|                }
	|            }
	|            return OneScriptFormsDesigner.ObjectConvertToString(comp);
	|        }
	|
	|        public override bool IsReadOnly
	|        {
	|            get { return false; }
	|        }
	|
	|        public override string Name
	|        {
	|            get { return _pd.Name; }
	|        }
	|
	|        public override Type PropertyType
	|        {
	|            get { return _pd.GetType(); }
	|        }
	|
	|        public override void ResetValue(object component)
	|        {
	|        }
	|
	|        public override bool ShouldSerializeValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override void SetValue(object component, object value)
	|        {
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyGridTableStylesCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private DataGrid DataGrid1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyGridTableStylesCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            DataGrid1 = (DataGrid)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции СтилиТаблицыСеткиДанных"";
	|            collectionForm.Shown += CollectionForm_Shown;
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid1_SelectedObjectsChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            dynamic comp = ((System.Windows.Forms.PropertyGrid)pg).SelectedObject;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            GridItemCollection GridItemCollection1 = (GridItemCollection)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|	
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            DataGrid1.TableStyles.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { DataGrid1.TableStyles });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            osfDesigner.DataGridTableStyle SimilarObj = (osfDesigner.DataGridTableStyle)PropertyGrid1.SelectedObject;
	|            SimilarObj.NameStyle = OneScriptFormsDesigner.RevertDataGridTableStyleName(DataGrid1);
	|            ListBox1.Refresh();
	|            PropertyGrid1.SelectedObject = SimilarObj;
	|	
	|            GetDefaultValues();
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid1_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            if (PropertyGrid1.SelectedObject != null)
	|            {
	|                if (PropertyGrid1.SelectedObject.GetType().ToString() != ""osfDesigner.DataGridTableStyle"")
	|                {
	|                    dynamic OriginalObj = PropertyGrid1.SelectedObject;
	|                    dynamic SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|                    if (SimilarObj == null)
	|                    {
	|                        SimilarObj = new osfDesigner.DataGridTableStyle();
	|                        ((osfDesigner.DataGridTableStyle)SimilarObj).OriginalObj = OriginalObj;
	|                        OneScriptFormsDesigner.AddToHashtable(OriginalObj, SimilarObj);
	|                        OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                        PropertyGrid1.SelectedObject = SimilarObj;
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    else
	|                    {
	|                        PropertyGrid1.SelectedObject = SimilarObj;
	|                    }
	|                }
	|            }
	|        }
	|
	|        private void CollectionForm_Shown(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ListItem1Text = """";
	|                try
	|                {
	|                    System.Windows.Forms.DataGridTableStyle DataGridTableStyle1 = (System.Windows.Forms.DataGridTableStyle)DataGrid1.TableStyles[e.Index];
	|                    dynamic OriginalObj = DataGridTableStyle1;
	|                    dynamic SimilarObj = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|                    ListItem1.Value = DataGridTableStyle1;
	|                    ListItem1Text = ((DataGridTableStyle)SimilarObj).NameStyle;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                Graphics1.DrawString(ListItem1Text, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyGridTableStylesCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|
	|namespace osfDesigner
	|{
	|    public class MyRuntimeServiceProvider : IServiceProvider, ITypeDescriptorContext
	|    {
	|        dynamic instance;
	|
	|        public MyRuntimeServiceProvider(object p1 = null)
	|        {
	|            instance = p1;
	|        }
	|
	|        object IServiceProvider.GetService(Type serviceType)
	|        {
	|            if (serviceType == typeof(IWindowsFormsEditorService))
	|            {
	|                return new WindowsFormsEditorService();
	|            }
	|
	|            return null;
	|        }
	|
	|        public void OnComponentChanged()
	|        {
	|        }
	|
	|        public IContainer Container
	|        {
	|            get { return null; }
	|        }
	|
	|        public bool OnComponentChanging()
	|        {
	|            return true;
	|        }
	|
	|        public object Instance
	|        {
	|            get { return instance; }
	|        }
	|
	|        public PropertyDescriptor PropertyDescriptor
	|        {
	|            get { return null; }
	|        }
	|
	|        internal class WindowsFormsEditorService : IWindowsFormsEditorService
	|        {
	|            public void DropDownControl(Control control)
	|            {
	|            }
	|
	|            public void CloseDropDown()
	|            {
	|            }
	|
	|            public System.Windows.Forms.DialogResult ShowDialog(System.Windows.Forms.Form dialog)
	|            {
	|                return dialog.ShowDialog();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyRuntimeServiceProvider.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.ComponentModel;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    public class MyRectangleConverter : RectangleConverter
	|    {
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|
	|        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	|        {
	|            PropertyDescriptorCollection originalCollection = TypeDescriptor.GetProperties(value, attributes);
	|            PropertyDescriptor[] pds = new PropertyDescriptor[originalCollection.Count];
	|            originalCollection.CopyTo(pds, 0);
	|            PropertyDescriptorCollection newCollection = new PropertyDescriptorCollection(pds);
	|            for (int i = 0; i < originalCollection.Count; i++)
	|            {
	|                PropertyDescriptor pd = originalCollection[i];
	|                List<Attribute> la = new List<Attribute>();
	|                foreach (Attribute attribute in pd.Attributes)
	|                {
	|                    la.Add(attribute);
	|                }
	|                MyPropertyDescriptor cp = new MyPropertyDescriptor(pd, la.ToArray());
	|                newCollection.RemoveAt(i);
	|                newCollection.Insert(i, cp);
	|            }
	|            return newCollection.Sort(new string[] { ""Икс"", ""Игрек"", ""Ширина"", ""Высота"" });
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyRectangleConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.Reflection; 
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyToolBarButtonCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private System.Windows.Forms.PropertyGrid TopLevelPropertyGrid1;
	|        private ToolBar ToolBar1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyToolBarButtonCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            ToolBar1 = (ToolBar)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции Кнопки"";
	|
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                TopLevelPropertyGrid1 = pDesigner.DSME.PropertyGridHost.PropertyGrid;
	|                PropertiesLabel1.Text = ""Свойства:"";
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid1_SelectedObjectsChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void GetDefaultValues()
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            dynamic comp = PropertyGrid1.SelectedObject;
	|            if (comp.DefaultValues != null)
	|            {
	|                return;
	|            }
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            object view1 = typeof(System.Windows.Forms.PropertyGrid).GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            dynamic GridItemCollection1 = (dynamic)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            comp.DefaultValues = DefaultValues1;
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid1_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            if (PropertyGrid1.SelectedObject != null)
	|            {
	|                if (PropertyGrid1.SelectedObject.GetType().ToString() != ""osfDesigner.ToolBarButton"")
	|                {
	|                    System.Windows.Forms.ToolBarButton OriginalObj = (System.Windows.Forms.ToolBarButton)PropertyGrid1.SelectedObject;
	|                    if (OriginalObj.Tag == null)
	|                    {
	|                        osfDesigner.ToolBarButton SimilarObj = new osfDesigner.ToolBarButton();
	|                        OneScriptFormsDesigner.PassProperties(OriginalObj, SimilarObj); // Передадим свойства.
	|                        SimilarObj.OriginalObj = OriginalObj;
	|                        SimilarObj.Parent = OriginalObj.Parent;
	|                        SimilarObj.Style = (osfDesigner.ToolBarButtonStyle)OriginalObj.Style;
	|                        OriginalObj.Tag = SimilarObj;
	|                        PropertyGrid1.SelectedObject = SimilarObj;
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    else
	|                    {
	|                        PropertyGrid1.SelectedObject = OriginalObj.Tag;
	|                    }
	|                }
	|            }
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            ToolBar1.Buttons.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ToolBar1.Buttons });
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            ListBox1.SelectedItem = null;
	|            ListBox1.SelectedIndex = index;
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            ToolBar1.Buttons.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ToolBar1.Buttons });
	|            ListBox1.SelectedItem = SelectedItem1;
	|            if (ListBox1.SelectedIndex != (ListBox1.Items.Count - 1))
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            ToolBar1.Buttons.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ToolBar1.Buttons });
	|            ListBox1.SelectedItem = SelectedItem1;
	|            if (ListBox1.SelectedIndex != (ListBox1.Items.Count - 1))
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            osfDesigner.ToolBarButton SimilarObj = (osfDesigner.ToolBarButton)PropertyGrid1.SelectedObject;
	|            SimilarObj.Name = OneScriptFormsDesigner.RevertToolBarButtonName(ToolBar1);
	|            SimilarObj.Text = SimilarObj.Name;
	|            ListBox1.Refresh();
	|
	|            ToolBar1.Buttons.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { ToolBar1.Buttons });
	|
	|            PropertyGrid1.SelectedObject = SimilarObj;
	|            GetDefaultValues();
	|
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string ButtonText = """";
	|                try
	|                {
	|                    System.Windows.Forms.ToolBarButton ToolBarButton1 = (System.Windows.Forms.ToolBarButton)ToolBar1.Buttons[e.Index];
	|                    ListItem1.Value = ToolBarButton1;
	|                    if (ToolBarButton1.Text == """")
	|                    {
	|                        ButtonText = ""Кнопка"";
	|                    }
	|                    else
	|                    {
	|                        ButtonText = ToolBarButton1.Text;
	|                    }
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|
	|                Graphics1.DrawString(ButtonText, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyToolBarButtonCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|
	|namespace osfDesigner
	|{
	|    public class ListItem
	|    {
	|        private string M_Text;
	|        public object M_Value;
	|
	|        public ListItem(object p1)
	|        {
	|        }
	|
	|        public string Text
	|        {
	|            get
	|            {
	|                if (M_Text != null)
	|                {
	|                    return M_Text;
	|                }
	|                if (M_Value != null)
	|                {
	|                    return Convert.ToString(M_Value);
	|                }
	|                return """";
	|            }
	|            set { M_Text = value; }
	|        }
	|
	|        public object Value
	|        {
	|            get
	|            {
	|                if (M_Value != null)
	|                {
	|                    return M_Value;
	|                }
	|                if (M_Text != null)
	|                {
	|                    return M_Text;
	|                }
	|                return """";
	|            }
	|            set { M_Value = value; }
	|        }
	|
	|        //Методы============================================================
	|
	|        public override string ToString()
	|        {
	|            return Text;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\ListItem.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel;
	|using System.Windows.Forms;
	|
	|namespace osfDesigner
	|{
	|    public class MyLinkAreaConverter : LinkArea.LinkAreaConverter
	|    {
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyLinkAreaConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MySelectionRangeEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmSelectionRange _frmSelectionRange = new frmSelectionRange();
	|
	|                _frmSelectionRange.DateTimePicker1.Value = ((System.Windows.Forms.SelectionRange)value).Start;
	|                _frmSelectionRange.DateTimePicker2.Value = ((System.Windows.Forms.SelectionRange)value).End;
	|                _frmSelectionRange._wfes = wfes;
	|
	|                wfes.DropDownControl(_frmSelectionRange);
	|                DateTime _DateTime1 = _frmSelectionRange.DateTimePicker1.Value;
	|                DateTime _DateTime2 = _frmSelectionRange.DateTimePicker2.Value;
	|                value = new System.Windows.Forms.SelectionRange(_DateTime1, _DateTime2);
	|            }
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.DropDown;
	|        }
	|    }
	|
	|    public class frmSelectionRange : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label label1;
	|        public System.Windows.Forms.DateTimePicker DateTimePicker1;
	|        private System.Windows.Forms.Label label2;
	|        public System.Windows.Forms.DateTimePicker DateTimePicker2;
	|        private Container components = null;
	|
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmSelectionRange()
	|        {
	|            this.ClientSize = new Size(192, 70);
	|            this.ControlBox = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmSelectionRange"";
	|            this.ShowInTaskbar = false;
	|            this.Closed += FrmSelectionRange_Closed;
	|
	|            label1 = new System.Windows.Forms.Label();
	|            label1.Parent = this;
	|            label1.Location = new Point(10, 10);
	|            label1.Text = ""Начало"";
	|            label1.Width = 55;
	|
	|            DateTimePicker1 = new System.Windows.Forms.DateTimePicker();
	|            DateTimePicker1.Parent = this;
	|            DateTimePicker1.Location = new Point(label1.Left + label1.Width + 5, label1.Top);
	|            DateTimePicker1.CustomFormat = ""dd.MM.yyyy"";
	|            DateTimePicker1.Format = DateTimePickerFormat.Custom;
	|            DateTimePicker1.Width = 100;
	|
	|            label2 = new System.Windows.Forms.Label();
	|            label2.Parent = this;
	|            label2.Location = new Point(label1.Left, label1.Bottom + 5);
	|            label2.Text = ""Конец"";
	|            label2.Width = 55;
	|
	|            DateTimePicker2 = new System.Windows.Forms.DateTimePicker();
	|            DateTimePicker2.Parent = this;
	|            DateTimePicker2.Location = new Point(label2.Left + label2.Width + 5, label2.Top);
	|            DateTimePicker2.CustomFormat = ""dd.MM.yyyy"";
	|            DateTimePicker2.Format = DateTimePickerFormat.Custom;
	|            DateTimePicker2.Width = 100;
	|
	|            TopLevel = false;
	|        }
	|
	|        private void FrmSelectionRange_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MySelectionRangeEditor.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel;
	|using System.Windows.Forms; 
	|
	|namespace osfDesigner
	|{
	|    public class MySelectionRangeConverter : SelectionRangeConverter
	|    {
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MySelectionRangeConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    // Один из вариантов показать в сетке свойств расширяемое свойство.
	|    // Так можно вывести русские названия свойств. Тип раскрываемого свойства должен соответствовать унаследованному классу, если 
	|    // их нужно будет редактировать тут же в раскытом списке. На расскытые свойства возможно нужно будет повесить свой редактор.
	|    // Вызывается в конвертере примерно так:
	|    ////public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	|    ////{
	|    ////    //MySelectionRange MySelectionRange1 = new MySelectionRange((SelectionRange)value);
	|    ////    //PropertyDescriptorCollection originalCollection = TypeDescriptor.GetProperties(MySelectionRange1, attributes);
	|
	|    ////    //PropertyDescriptorCollection originalCollection = TypeDescriptor.GetProperties(value, attributes);
	|
	|    ////    PropertyDescriptorCollection originalCollection = TypeDescriptor.GetProperties(typeof(MySelectionRange), attributes);
	|    ////    PropertyDescriptor[] pds = new PropertyDescriptor[originalCollection.Count];
	|    ////    originalCollection.CopyTo(pds, 0);
	|    ////    PropertyDescriptorCollection newCollection = new PropertyDescriptorCollection(pds);
	|    ////    for (int i = 0; i < originalCollection.Count; i++)
	|    ////    {
	|    ////        PropertyDescriptor pd = originalCollection[i];
	|    ////        List<Attribute> la = new List<Attribute>();
	|    ////        foreach (Attribute attribute in pd.Attributes)
	|    ////        {
	|    ////            la.Add(attribute);
	|    ////        }
	|    ////        MyPropertyDescriptor cp = new MyPropertyDescriptor(pd, la.ToArray());
	|    ////        newCollection.RemoveAt(i);
	|    ////        newCollection.Insert(i, cp);
	|    ////    }
	|    ////    return newCollection;
	|    ////}
	|
	|    public class MyPropertyDescriptor : PropertyDescriptor
	|    {
	|        private PropertyDescriptor _innerPropertyDescriptor;
	|        private bool _ronly;
	|
	|        public MyPropertyDescriptor(PropertyDescriptor inner, Attribute[] attrs) : base(GetDisplayName(inner), attrs)
	|        {
	|            _innerPropertyDescriptor = inner;
	|            _ronly = inner.IsReadOnly;
	|        }
	|
	|        public static string GetDisplayName(PropertyDescriptor inner)
	|        {
	|            if (inner.Name == ""Start"")
	|            {
	|                return ""Начало"";
	|            }
	|            else if (inner.Name == ""End"")
	|            {
	|                return ""Конец"";
	|            }
	|            else if (inner.Name == ""Width"")
	|            {
	|                return ""Ширина"";
	|            }
	|            else if (inner.Name == ""Height"")
	|            {
	|                return ""Высота"";
	|            }
	|            else if (inner.Name == ""X"")
	|            {
	|                return ""Икс"";
	|            }
	|            else if (inner.Name == ""Y"")
	|            {
	|                return ""Игрек"";
	|            }
	|            else
	|            {
	|                return inner.Name;
	|            }
	|        }
	|
	|        public override object GetValue(object component)
	|        {
	|            return _innerPropertyDescriptor.GetValue(component);
	|        }
	|
	|        public override bool SupportsChangeEvents
	|        {
	|            get { return true; }
	|        }
	|
	|        public override Type PropertyType
	|        {
	|            get { return _innerPropertyDescriptor.PropertyType; }
	|        }
	|
	|        public override void ResetValue(object component)
	|        {
	|        }
	|
	|        public override void SetValue(object component, object value)
	|        {
	|            _innerPropertyDescriptor = (MyPropertyDescriptor)value;
	|        }
	|
	|        public override bool ShouldSerializeValue(object component)
	|        {
	|            return false;
	|        }
	|
	|        public override bool CanResetValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override Type ComponentType
	|        {
	|            get { return _innerPropertyDescriptor.PropertyType; }
	|        }
	|
	|        public override bool IsReadOnly
	|        {
	|            get
	|            {
	|                return true;
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyPropertyDescriptor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Windows.Forms;
	|using System.ComponentModel.Design;
	|using System.ComponentModel;
	|using System.Reflection;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    public class MyTabPageCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private System.Windows.Forms.PropertyGrid TopLevelPropertyGrid1;
	|        private osfDesigner.TabControl TabControl1;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyTabPageCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            TabControl1 = (osfDesigner.TabControl)this.Context.Instance;
	|            collectionForm.Text = ""Редактор коллекции Вкладки"";
	|
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                TopLevelPropertyGrid1 = pDesigner.DSME.PropertyGridHost.PropertyGrid;
	|                PropertiesLabel1.Text = ""Свойства:"";
	|                OneScriptFormsDesigner.block1 = true;
	|            };
	|
	|            collectionForm.FormClosed += delegate (object sender, FormClosedEventArgs e)
	|            {
	|                OneScriptFormsDesigner.block1 = false;
	|                TopLevelPropertyGrid1.SelectedObject = TabControl1;
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid_SelectedObjectsChanged;
	|                        PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|	
	|        private void PropertyGrid1_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
	|        {
	|            if (PropertyGrid1.SelectedGridItem.Label == ""(Name)"")
	|            {
	|                System.Windows.Forms.MessageBox.Show(
	|                    ""Для правильного формирования файла сценария не допускается изменять имя компонента."",
	|                    """",
	|                    MessageBoxButtons.OK,
	|                    MessageBoxIcon.Exclamation,
	|                    MessageBoxDefaultButton.Button1
	|                    );
	|                PropertyDescriptor pd = TypeDescriptor.GetProperties(((dynamic)PropertyGrid1.SelectedObject).M_TabPage)[""Name""];
	|                pd.SetValue(((dynamic)PropertyGrid1.SelectedObject).M_TabPage, (string)e.OldValue);
	|            }
	|            UpdateListBox1();
	|        }
	|
	|        private void UpdateListBox1()
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            TabControl1.TabPages.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { TabControl1.TabPages });
	|            ListBox1.SelectedIndex = index;
	|            if (index != ListBox1.Items.Count - 1)
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            TabControl1.SelectedIndex = index;
	|            collectionForm.Refresh();
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            TabControl1.SelectedIndex = ListBox1.SelectedIndex;
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            UpdateListBox1();
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            System.Windows.Forms.TabPage OriginalObj = TabControl1.TabPages[index];
	|            PropertyGrid1.SelectedObject = OneScriptFormsDesigner.RevertSimilarObj(OriginalObj);
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            int index = ListBox1.SelectedIndex;
	|            System.Windows.Forms.TabPage OriginalObj = TabControl1.TabPages[index];
	|            OriginalObj.Text = OriginalObj.Name;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyTabPageCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Linq;
	|using System.Text;
	|using System.ComponentModel;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyDateCollectionConverter : CollectionConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                return ""(Коллекция)"";
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|	
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|
	|        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	|        {
	|            dynamic DatesList1 = value;
	|
	|            int count1 = DatesList1.Count;
	|            DateTime[] DateTime1 = new DateTime[count1];
	|            for (int i = 0; i < DatesList1.Count; i++)
	|            {
	|                DateTime1[i] = DatesList1[i].Value;
	|            }
	|
	|            if (DatesList1 == null || DatesList1.Count == 0)
	|            {
	|                return base.GetProperties(context, value, attributes);
	|            }
	|
	|            var items = new PropertyDescriptorCollection(null);
	|            for (int i = 0; i < DateTime1.Length; i++)
	|            {
	|                object item = DateTime1[i];
	|                items.Add(new ExpandableDatesCollectionPropertyDescriptor(DateTime1, i));
	|            }
	|            return items;
	|        }
	|    }
	|
	|    public class ExpandableDatesCollectionPropertyDescriptor : PropertyDescriptor
	|    {
	|        private System.DateTime[] collection;
	|        private readonly int _index;
	|
	|        public ExpandableDatesCollectionPropertyDescriptor(System.DateTime[] coll, int idx) : base(GetDisplayName(coll, idx), null)
	|        {
	|            collection = coll;
	|            _index = idx;
	|        }
	|
	|        private static string GetDisplayName(System.DateTime[] list, int index)
	|        {
	|            return ""["" + index + ""]"";
	|        }
	|
	|        private static string CSharpName(Type type)
	|        {
	|            var sb = new StringBuilder();
	|            var name = type.Name;
	|            if (!type.IsGenericType)
	|            {
	|                return name;
	|            }
	|            sb.Append(name.Substring(0, name.IndexOf('`')));
	|            sb.Append(""<"");
	|            sb.Append(string.Join("", "", type.GetGenericArguments()
	|                                            .Select(CSharpName)));
	|            sb.Append("">"");
	|            return sb.ToString();
	|        }
	|
	|        public override bool CanResetValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override Type ComponentType
	|        {
	|            get { return this.collection.GetType(); }
	|        }
	|
	|        public override object GetValue(object component)
	|        {
	|            return collection[_index];
	|        }
	|
	|        public override bool IsReadOnly
	|        {
	|            get { return true; }
	|        }
	|
	|        public override string Name
	|        {
	|            get { return _index.ToString(CultureInfo.InvariantCulture); }
	|        }
	|
	|        public override Type PropertyType
	|        {
	|            get { return collection[_index].GetType(); }
	|        }
	|
	|        public override void ResetValue(object component)
	|        {
	|        }
	|
	|        public override bool ShouldSerializeValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override void SetValue(object component, object value)
	|        {
	|            collection[_index] = (DateTime)value;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyDateCollectionConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.ComponentModel;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    [TypeConverter(typeof(ExpandableObjectConverter))]
	|    public class MyBoldedDatesList : IList, IList<DateEntry>
	|    {
	|        List<DateEntry> _list = new List<DateEntry>();
	|
	|        public DateEntry this[int index]
	|        {
	|            get { return ((IList<DateEntry>)_list)[index]; }
	|            set { ((IList<DateEntry>)_list)[index] = value; }
	|        }
	|
	|        object IList.this[int index]
	|        {
	|            get { return ((IList)_list)[index]; }
	|            set { ((IList)_list)[index] = value; }
	|        }
	|
	|        public int Count
	|        {
	|            get { return ((IList<DateEntry>)_list).Count; }
	|        }
	|
	|        public bool IsFixedSize
	|        {
	|            get { return ((IList)_list).IsFixedSize; }
	|        }
	|
	|        public bool IsReadOnly
	|        {
	|            get { return ((IList<DateEntry>)_list).IsReadOnly; }
	|        }
	|
	|        public bool IsSynchronized
	|        {
	|            get { return ((IList)_list).IsSynchronized; }
	|        }
	|
	|        public object SyncRoot
	|        {
	|            get { return ((IList)_list).SyncRoot; }
	|        }
	|
	|        public int Add(object value)
	|        {
	|            return ((IList)_list).Add(value);
	|        }
	|
	|        public void Add(DateEntry item)
	|        {
	|            ((IList<DateEntry>)_list).Add(item);
	|        }
	|
	|        public void Clear()
	|        {
	|            ((IList<DateEntry>)_list).Clear();
	|        }
	|
	|        public bool Contains(object value)
	|        {
	|            return ((IList)_list).Contains(value);
	|        }
	|
	|        public bool Contains(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).Contains(item);
	|        }
	|
	|        public void CopyTo(Array array, int index)
	|        {
	|            ((IList)_list).CopyTo(array, index);
	|        }
	|
	|        public void CopyTo(DateEntry[] array, int arrayIndex)
	|        {
	|            ((IList<DateEntry>)_list).CopyTo(array, arrayIndex);
	|        }
	|
	|        public IEnumerator<DateEntry> GetEnumerator()
	|        {
	|            return ((IList<DateEntry>)_list).GetEnumerator();
	|        }
	|
	|        public int IndexOf(object value)
	|        {
	|            return ((IList)_list).IndexOf(value);
	|        }
	|
	|        public int IndexOf(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).IndexOf(item);
	|        }
	|
	|        public void Insert(int index, object value)
	|        {
	|            ((IList)_list).Insert(index, value);
	|        }
	|
	|        public void Insert(int index, DateEntry item)
	|        {
	|            ((IList<DateEntry>)_list).Insert(index, item);
	|        }
	|
	|        public void Remove(object value)
	|        {
	|            ((IList)_list).Remove(value);
	|        }
	|
	|        public bool Remove(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).Remove(item);
	|        }
	|
	|        public void RemoveAt(int index)
	|        {
	|            ((IList<DateEntry>)_list).RemoveAt(index);
	|        }
	|
	|        IEnumerator IEnumerable.GetEnumerator()
	|        {
	|            return ((IList)_list).GetEnumerator();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyBoldedDatesList.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.ComponentModel;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    [TypeConverter(typeof(ExpandableObjectConverter))]
	|    public class MyAnnuallyBoldedDatesList : IList, IList<DateEntry>
	|    {
	|        List<DateEntry> _list = new List<DateEntry>();
	|
	|        public DateEntry this[int index]
	|        {
	|            get { return ((IList<DateEntry>)_list)[index]; }
	|            set { ((IList<DateEntry>)_list)[index] = value; }
	|        }
	|
	|        object IList.this[int index]
	|        {
	|            get { return ((IList)_list)[index]; }
	|            set { ((IList)_list)[index] = value; }
	|        }
	|
	|        public int Count
	|        {
	|            get { return ((IList<DateEntry>)_list).Count; }
	|        }
	|
	|        public bool IsFixedSize
	|        {
	|            get { return ((IList)_list).IsFixedSize; }
	|        }
	|
	|        public bool IsReadOnly
	|        {
	|            get { return ((IList<DateEntry>)_list).IsReadOnly; }
	|        }
	|
	|        public bool IsSynchronized
	|        {
	|            get { return ((IList)_list).IsSynchronized; }
	|        }
	|
	|        public object SyncRoot
	|        {
	|            get { return ((IList)_list).SyncRoot; }
	|        }
	|
	|        public int Add(object value)
	|        {
	|            return ((IList)_list).Add(value);
	|        }
	|
	|        public void Add(DateEntry item)
	|        {
	|            ((IList<DateEntry>)_list).Add(item);
	|        }
	|
	|        public void Clear()
	|        {
	|            ((IList<DateEntry>)_list).Clear();
	|        }
	|
	|        public bool Contains(object value)
	|        {
	|            return ((IList)_list).Contains(value);
	|        }
	|
	|        public bool Contains(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).Contains(item);
	|        }
	|
	|        public void CopyTo(Array array, int index)
	|        {
	|            ((IList)_list).CopyTo(array, index);
	|        }
	|
	|        public void CopyTo(DateEntry[] array, int arrayIndex)
	|        {
	|            ((IList<DateEntry>)_list).CopyTo(array, arrayIndex);
	|        }
	|
	|        public IEnumerator<DateEntry> GetEnumerator()
	|        {
	|            return ((IList<DateEntry>)_list).GetEnumerator();
	|        }
	|
	|        public int IndexOf(object value)
	|        {
	|            return ((IList)_list).IndexOf(value);
	|        }
	|
	|        public int IndexOf(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).IndexOf(item);
	|        }
	|
	|        public void Insert(int index, object value)
	|        {
	|            ((IList)_list).Insert(index, value);
	|        }
	|
	|        public void Insert(int index, DateEntry item)
	|        {
	|            ((IList<DateEntry>)_list).Insert(index, item);
	|        }
	|
	|        public void Remove(object value)
	|        {
	|            ((IList)_list).Remove(value);
	|        }
	|
	|        public bool Remove(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).Remove(item);
	|        }
	|
	|        public void RemoveAt(int index)
	|        {
	|            ((IList<DateEntry>)_list).RemoveAt(index);
	|        }
	|
	|        IEnumerator IEnumerable.GetEnumerator()
	|        {
	|            return ((IList)_list).GetEnumerator();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyAnnuallyBoldedDatesList.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    [DesignTimeVisible(false)]
	|    public class DateEntry : Component
	|    {
	|        public DateEntry()
	|        {
	|        }
	|
	|        public DateEntry(System.DateTime p1)
	|        {
	|            M_DateTime = p1;
	|        }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public System.DateTime M_DateTime { get; set; }
	|
	|        [DisplayName(""Значение"")]
	|        [Description(""Текущее время, обычно выраженное как дата и время суток."")]
	|        [Category(""Дата"")]
	|        [Browsable(true)]
	|        public System.DateTime Value
	|        {
	|            get { return M_DateTime; }
	|            set { M_DateTime = value; }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\DateEntry.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.ComponentModel;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    [TypeConverter(typeof(ExpandableObjectConverter))]
	|    public class MyMonthlyBoldedDatesList : IList, IList<DateEntry>
	|    {
	|        List<DateEntry> _list = new List<DateEntry>();
	|
	|        public DateEntry this[int index]
	|        {
	|            get { return ((IList<DateEntry>)_list)[index]; }
	|            set { ((IList<DateEntry>)_list)[index] = value; }
	|        }
	|
	|        object IList.this[int index]
	|        {
	|            get { return ((IList)_list)[index]; }
	|            set { ((IList)_list)[index] = value; }
	|        }
	|
	|        public int Count
	|        {
	|            get { return ((IList<DateEntry>)_list).Count; }
	|        }
	|
	|        public bool IsFixedSize
	|        {
	|            get { return ((IList)_list).IsFixedSize; }
	|        }
	|
	|        public bool IsReadOnly
	|        {
	|            get { return ((IList<DateEntry>)_list).IsReadOnly; }
	|        }
	|
	|        public bool IsSynchronized
	|        {
	|            get { return ((IList)_list).IsSynchronized; }
	|        }
	|
	|        public object SyncRoot
	|        {
	|            get { return ((IList)_list).SyncRoot; }
	|        }
	|
	|        public int Add(object value)
	|        {
	|            return ((IList)_list).Add(value);
	|        }
	|
	|        public void Add(DateEntry item)
	|        {
	|            ((IList<DateEntry>)_list).Add(item);
	|        }
	|
	|        public void Clear()
	|        {
	|            ((IList<DateEntry>)_list).Clear();
	|        }
	|
	|        public bool Contains(object value)
	|        {
	|            return ((IList)_list).Contains(value);
	|        }
	|
	|        public bool Contains(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).Contains(item);
	|        }
	|
	|        public void CopyTo(Array array, int index)
	|        {
	|            ((IList)_list).CopyTo(array, index);
	|        }
	|
	|        public void CopyTo(DateEntry[] array, int arrayIndex)
	|        {
	|            ((IList<DateEntry>)_list).CopyTo(array, arrayIndex);
	|        }
	|
	|        public IEnumerator<DateEntry> GetEnumerator()
	|        {
	|            return ((IList<DateEntry>)_list).GetEnumerator();
	|        }
	|
	|        public int IndexOf(object value)
	|        {
	|            return ((IList)_list).IndexOf(value);
	|        }
	|
	|        public int IndexOf(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).IndexOf(item);
	|        }
	|
	|        public void Insert(int index, object value)
	|        {
	|            ((IList)_list).Insert(index, value);
	|        }
	|
	|        public void Insert(int index, DateEntry item)
	|        {
	|            ((IList<DateEntry>)_list).Insert(index, item);
	|        }
	|
	|        public void Remove(object value)
	|        {
	|            ((IList)_list).Remove(value);
	|        }
	|
	|        public bool Remove(DateEntry item)
	|        {
	|            return ((IList<DateEntry>)_list).Remove(item);
	|        }
	|
	|        public void RemoveAt(int index)
	|        {
	|            ((IList<DateEntry>)_list).RemoveAt(index);
	|        }
	|
	|        IEnumerator IEnumerable.GetEnumerator()
	|        {
	|            return ((IList)_list).GetEnumerator();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyMonthlyBoldedDatesList.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel; 
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyDateCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|        private dynamic MyDateList = null;
	|        private dynamic MyDateListForCancel = null;
	|        private dynamic MyDateListType;
	|        private MonthCalendar MonthCalendar1;
	|        private DateTime[] DateTimeForCancel;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyDateCollectionEditor(Type type) : base(type)
	|        {
	|            MyDateListType = type;
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции.
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            MonthCalendar1 = (MonthCalendar)this.Context.Instance;
	|            if (MyDateListType.ToString() == ""osfDesigner.MyBoldedDatesList"")
	|            {
	|                MyDateList = MonthCalendar1.BoldedDates_osf;
	|                MyDateListForCancel = new osfDesigner.MyBoldedDatesList();
	|                collectionForm.Text = ""Редактор коллекции ВыделенныеДаты"";
	|            }
	|            else if (MyDateListType.ToString() == ""osfDesigner.MyAnnuallyBoldedDatesList"")
	|            {
	|                MyDateList = MonthCalendar1.AnnuallyBoldedDates_osf;
	|                MyDateListForCancel = new osfDesigner.MyAnnuallyBoldedDatesList();
	|                collectionForm.Text = ""Редактор коллекции ЕжегодныеДаты"";
	|            }
	|            else if (MyDateListType.ToString() == ""osfDesigner.MyMonthlyBoldedDatesList"")
	|            {
	|                MyDateList = MonthCalendar1.MonthlyBoldedDates_osf;
	|                MyDateListForCancel = new osfDesigner.MyMonthlyBoldedDatesList();
	|                collectionForm.Text = ""Редактор коллекции ЕжемесячныеДаты"";
	|            }
	|	
	|            collectionForm.Shown += delegate (object sender, EventArgs e)
	|            {
	|                int count1 = MyDateList.Count;
	|                DateTimeForCancel = new DateTime[count1];
	|                for (int i = 0; i < MyDateList.Count; i++)
	|                {
	|                    DateTimeForCancel[i] = MyDateList[i].Value;
	|                }
	|
	|                for (int i = 0; i < MyDateList.Count; i++)
	|                {
	|                    MyDateListForCancel.Add(new DateEntry(MyDateList[i].Value));
	|                }
	|            };
	|
	|            collectionForm.FormClosed += delegate (object sender, FormClosedEventArgs e)
	|            {
	|                if (collectionForm.DialogResult != System.Windows.Forms.DialogResult.OK)
	|                {
	|                    if (MyDateListType.ToString() == ""osfDesigner.MyBoldedDatesList"")
	|                    {
	|                        MonthCalendar1.BoldedDates = DateTimeForCancel;
	|
	|                        MonthCalendar1.BoldedDates_osf.Clear();
	|                        for (int i = 0; i < MyDateListForCancel.Count; i++)
	|                        {
	|                            MonthCalendar1.BoldedDates_osf.Add(new DateEntry(MyDateListForCancel[i].Value));
	|                        }
	|                    }
	|                    else if (MyDateListType.ToString() == ""osfDesigner.MyAnnuallyBoldedDatesList"")
	|                    {
	|                        MonthCalendar1.AnnuallyBoldedDates = DateTimeForCancel;
	|
	|                        MonthCalendar1.AnnuallyBoldedDates_osf.Clear();
	|                        for (int i = 0; i < MyDateListForCancel.Count; i++)
	|                        {
	|                            MonthCalendar1.AnnuallyBoldedDates_osf.Add(new DateEntry(MyDateListForCancel[i].Value));
	|                        }
	|                    }
	|                    else if (MyDateListType.ToString() == ""osfDesigner.MyMonthlyBoldedDatesList"")
	|                    {
	|                        MonthCalendar1.MonthlyBoldedDates = DateTimeForCancel;
	|
	|                        MonthCalendar1.MonthlyBoldedDates_osf.Clear();
	|                        for (int i = 0; i < MyDateListForCancel.Count; i++)
	|                        {
	|                            MonthCalendar1.MonthlyBoldedDates_osf.Add(new DateEntry(MyDateListForCancel[i].Value));
	|                        }
	|                    }
	|                }
	|            };
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|                        PropertyGrid1.SelectedObjectsChanged += PropertyGrid1_SelectedObjectsChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void UpdateOriginalObj()
	|        {
	|            int count1 = MyDateList.Count;
	|            DateTime[] DateTime1 = new DateTime[count1];
	|            for (int i = 0; i < MyDateList.Count; i++)
	|            {
	|                DateTime1[i] = MyDateList[i].Value;
	|            }
	|            if (MyDateListType.ToString() == ""osfDesigner.MyBoldedDatesList"")
	|            {
	|                MonthCalendar1.BoldedDates = DateTime1;
	|            }
	|            else if (MyDateListType.ToString() == ""osfDesigner.MyAnnuallyBoldedDatesList"")
	|            {
	|                MonthCalendar1.AnnuallyBoldedDates = DateTime1;
	|            }
	|            else if (MyDateListType.ToString() == ""osfDesigner.MyMonthlyBoldedDatesList"")
	|            {
	|                MonthCalendar1.MonthlyBoldedDates = DateTime1;
	|            }
	|        }
	|
	|        private void PropertyGrid1_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|            UpdateOriginalObj();
	|        }
	|
	|        private void PropertyGrid1_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            MyDateList.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyDateList });
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            ListBox1.SelectedItem = null;
	|            ListBox1.SelectedItem = SelectedItem1;
	|
	|            UpdateOriginalObj();
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            MyDateList.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyDateList });
	|            ListBox1.SelectedItem = SelectedItem1;
	|            if (ListBox1.SelectedIndex != (ListBox1.Items.Count - 1))
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            MyDateList.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyDateList });
	|            ListBox1.SelectedItem = SelectedItem1;
	|            if (ListBox1.SelectedIndex != (ListBox1.Items.Count - 1))
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                DateEntry DateEntry1 = MyDateList[e.Index];
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                ListItem1.Value = DateEntry1;
	|                string DateEntryText = DateEntry1.M_DateTime.ToString();
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText,
	|                        Rectangle2.X,
	|                        Rectangle2.Y,
	|                        Rectangle2.Width - 1,
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture),
	|                        ListBox1.Font,
	|                        SystemBrushes.ControlText,
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                string itemText;
	|                if (DateEntry1.Value == DateTime.MinValue)
	|                {
	|                    itemText = ""Дата"";
	|                }
	|                else
	|                {
	|                    itemText = DateEntryText;
	|                }
	|
	|                Graphics1.DrawString(itemText, ListBox1.Font, textBrush, new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                textBrush.Dispose();
	|            }
	|        }
	|
	|        public override bool GetPaintValueSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyDateCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|using System.Reflection;
	|using System.IO;
	|
	|namespace osfDesigner
	|{
	|    public class MyTreeNodeCollectionEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmNodes _frmNodes = new frmNodes(context, value);
	|                _frmNodes._wfes = wfes;
	|
	|                if (wfes.ShowDialog(_frmNodes) == System.Windows.Forms.DialogResult.OK)
	|                {
	|                }
	|            }
	|            return null;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    public class frmNodes : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label Label1;
	|        private System.Windows.Forms.Label Label2;
	|        public TreeView TreeView1;
	|        public TreeView TreeViewOld;
	|        public TreeView TreeViewOriginal;
	|        private System.Windows.Forms.Button ButtonAddRoot;
	|        private System.Windows.Forms.Button ButtonAddChild;
	|        private System.Windows.Forms.Button ButtonMoveUp;
	|        private System.Windows.Forms.Button ButtonMoveDown;
	|        private System.Windows.Forms.Button ButtonDelete;
	|        private System.Windows.Forms.Button ButtonCancel;
	|        private System.Windows.Forms.Button ButtonCollapse;
	|        private System.Windows.Forms.Button ButtonExpand;
	|        private System.Windows.Forms.Button ButtonOK;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.Panel Panel1;
	|        private System.Windows.Forms.Panel Panel2;
	|        private System.Windows.Forms.Panel Panel3;
	|        private System.Windows.Forms.Panel Panel4;
	|        private System.Windows.Forms.Panel Panel5;
	|        private System.Windows.Forms.Panel Panel6;
	|        private System.Windows.Forms.Panel Panel7;
	|        private System.Windows.Forms.Panel Panel8;
	|        private System.Windows.Forms.Panel Panel9;
	|        private System.Windows.Forms.Panel Panel10;
	|        private System.Windows.Forms.Panel Panel11;
	|        private System.Windows.Forms.Panel Panel12;
	|        private System.Windows.Forms.Panel Panel13;
	|        private System.Windows.Forms.Panel Panel14;
	|        private Container components = null;
	|        private ITypeDescriptorContext _context;
	|        private object _value;
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmNodes(ITypeDescriptorContext context, object value)
	|        {
	|            _context = context;
	|            _value = value;
	|            this.Size = new Size(864, 485);
	|            this.Text = ""Редактор узлов дерева"";
	|            this.ControlBox = true;
	|            this.HelpButton = true;
	|            this.ShowIcon = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.Sizable;
	|            this.SizeGripStyle = SizeGripStyle.Auto;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmNodes"";
	|            this.ShowInTaskbar = false;
	|            this.MinimumSize = new Size(797, 485);
	|            this.Closed += frmNodes_Closed;
	|            this.Load += FrmNodes_Load;
	|            this.CenterToScreen();
	|
	|            // Правая панель с сеткой свойств PropertyGrid1, надписью Label2 и кнопками ButtonOK и ButtonCancel.
	|            Panel2 = new System.Windows.Forms.Panel();
	|            Panel2.Parent = this;
	|            Panel2.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Левая панель с деревом TreeView1, надписью Label1 и кнопками ButtonAddRoot, ButtonAddChild, ButtonMoveUp, ButtonMoveDown и ButtonDelete и ButtonCollapse и ButtonExpand.
	|            Panel1 = new System.Windows.Forms.Panel();
	|            Panel1.Parent = this;
	|            Panel1.Dock = System.Windows.Forms.DockStyle.Left;
	|            Panel1.Width = 430;
	|
	|            // Панель с ButtonMoveUp, ButtonMoveDown и ButtonDelete и ButtonCollapse и ButtonExpand.
	|            Panel3 = new System.Windows.Forms.Panel();
	|            Panel3.Parent = Panel1;
	|            Panel3.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с Label1, TreeView1, ButtonAddRoot и ButtonAddChild.
	|            Panel4 = new System.Windows.Forms.Panel();
	|            Panel4.Parent = Panel1;
	|            Panel4.Dock = System.Windows.Forms.DockStyle.Left;
	|            Panel4.Width = 353;
	|
	|            // Отступ слева от края формы.
	|            Panel5 = new System.Windows.Forms.Panel();
	|            Panel5.Parent = Panel1;
	|            Panel5.Dock = System.Windows.Forms.DockStyle.Left;
	|            Panel5.Width = 16;
	|
	|            // Панель с TreeView1.
	|            Panel6 = new System.Windows.Forms.Panel();
	|            Panel6.Parent = Panel4;
	|            Panel6.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с Label1.
	|            Panel7 = new System.Windows.Forms.Panel();
	|            Panel7.Parent = Panel4;
	|            Panel7.Dock = System.Windows.Forms.DockStyle.Top;
	|            Panel7.Height = 40;
	|
	|            // Панель с ButtonAddRoot и ButtonAddChild.
	|            Panel8 = new System.Windows.Forms.Panel();
	|            Panel8.Parent = Panel4;
	|            Panel8.Dock = System.Windows.Forms.DockStyle.Bottom;
	|            Panel8.Height = 87;
	|
	|            // Панель с ButtonOK и ButtonCancel PropertyGrid1 Label2.
	|            Panel9 = new System.Windows.Forms.Panel();
	|            Panel9.Parent = Panel2;
	|            Panel9.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Отступ справа от края формы.
	|            Panel10 = new System.Windows.Forms.Panel();
	|            Panel10.Parent = Panel2;
	|            Panel10.Dock = System.Windows.Forms.DockStyle.Right;
	|            Panel10.Width = 16;
	|
	|            // Панель с PropertyGrid1.
	|            Panel12 = new System.Windows.Forms.Panel();
	|            Panel12.Parent = Panel9;
	|            Panel12.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с Label2.
	|            Panel11 = new System.Windows.Forms.Panel();
	|            Panel11.Parent = Panel9;
	|            Panel11.Dock = System.Windows.Forms.DockStyle.Top;
	|            Panel11.Height = 40;
	|
	|            // Панель с ButtonOK и ButtonCancel.
	|            Panel13 = new System.Windows.Forms.Panel();
	|            Panel13.Parent = Panel9;
	|            Panel13.Dock = System.Windows.Forms.DockStyle.Bottom;
	|            Panel13.Height = 53;
	|
	|            // Панель для выравнивания справа кнопок ButtonOK и ButtonCancel.
	|            Panel14 = new System.Windows.Forms.Panel();
	|            Panel14.Parent = Panel13;
	|            Panel14.Dock = System.Windows.Forms.DockStyle.Right;
	|            Panel14.Width = 234;
	|
	|            ButtonAddRoot = new System.Windows.Forms.Button();
	|            ButtonAddRoot.Parent = Panel8;
	|            ButtonAddRoot.Bounds = new Rectangle(1, 8, 172, 28);
	|            ButtonAddRoot.Text = ""Добавить ко&рень"";
	|            ButtonAddRoot.Click += ButtonAddRoot_Click;
	|
	|            ButtonAddChild = new System.Windows.Forms.Button();
	|            ButtonAddChild.Parent = Panel8;
	|            ButtonAddChild.Bounds = new Rectangle(181, 8, 173, 28);
	|            ButtonAddChild.Text = ""Добавить &ветвь"";
	|            ButtonAddChild.Click += ButtonAddChild_Click;
	|
	|            Label1 = new System.Windows.Forms.Label();
	|            Label1.Parent = Panel7;
	|            Label1.Bounds = new Rectangle(1, 16, 176, 20);
	|            Label1.Text = ""Выберите у&зел для правки:"";
	|
	|            TreeView1 = new osfDesigner.TreeView();
	|            TreeView1.Parent = Panel6;
	|            TreeView1.Dock = (DockStyle)5;
	|            TreeView1.HideSelection = false;
	|            TreeView1.AfterSelect += TreeView1_AfterSelect;
	|            TreeView1.AfterCheck += TreeView1_AfterCheck;
	|
	|            ButtonMoveUp = new System.Windows.Forms.Button();
	|            ButtonMoveUp.Parent = Panel3;
	|            ButtonMoveUp.Bounds = new Rectangle(10, 41, 35, 28);
	|            ButtonMoveUp.Text = """";
	|            ButtonMoveUp.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""AAABAAEAEBACAAEAAQCwAAAAFgAAACgAAAAQAAAAIAAAAAEAAQAAAAAAgAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8P////D////w////8P////D////w////8P///AAD//wAA//+AAf//wAP//+AH///wD///+B////w////+f///"")));
	|            ButtonMoveUp.Enabled = false;
	|            ButtonMoveUp.Click += ButtonMoveUp_Click;
	|
	|            ButtonMoveDown = new System.Windows.Forms.Button();
	|            ButtonMoveDown.Parent = Panel3;
	|            ButtonMoveDown.Bounds = new Rectangle(10, 75, 35, 28);
	|            ButtonMoveDown.Text = """";
	|            ButtonMoveDown.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""AAABAAEAEBACAAEAAQCwAAAAFgAAACgAAAAQAAAAIAAAAAEAAQAAAAAAgAAAAAAAAAAAAAAAAgAAAAAAAAAAAAAA////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+f////D////gf///wD///4Af//8AD//+AAf//AAD//wAA///8P////D////w////8P////D////w////8P///"")));
	|            ButtonMoveDown.Enabled = false;
	|            ButtonMoveDown.Click += ButtonMoveDown_Click;
	|
	|            ButtonDelete = new System.Windows.Forms.Button();
	|            ButtonDelete.Parent = Panel3;
	|            ButtonDelete.Bounds = new Rectangle(10, 111, 35, 28);
	|            ButtonDelete.Text = """";
	|            ButtonDelete.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""AAABAAEAEBAQAAEABAAoAQAAFgAAACgAAAAQAAAAIAAAAAEABAAAAAAAwAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAACAAACAAAAAgIAAgAAAAIAAgACAgAAAgICAAMDAwAAAAP8AAP8AAAD//wD/AAAA/wD/AP//AAD///8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//////////5/x//+P8f//g+P//+HD///wh///+A////w////4D///4IP//4HB//+H8P//n/j/////////////"")));
	|            ButtonDelete.Enabled = false;
	|            ButtonDelete.Click += ButtonDelete_Click;
	|
	|            ButtonExpand = new System.Windows.Forms.Button();
	|            ButtonExpand.Parent = Panel3;
	|            ButtonExpand.Bounds = new Rectangle(10, 146, 35, 28);
	|            ButtonExpand.Text = """";
	|            ButtonExpand.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAonEzGyAAAAAXRSTlMAQObYZgAAADpJREFUeNpjZIAARob/MAac+o8kACH/w5lQZWARRiQ+WATBYUAxFEmAkaAAYTOwWovuMEynY3oOyfsAOL4KE5tREc4AAAAASUVORK5CYII="")));
	|            ButtonExpand.Click += ButtonExpand_Click;
	|            System.Windows.Forms.ToolTip ToolTip4 = new System.Windows.Forms.ToolTip();
	|            ToolTip4.SetToolTip(ButtonExpand, ""Развернуть все"");
	|
	|            ButtonCollapse = new System.Windows.Forms.Button();
	|            ButtonCollapse.Parent = Panel3;
	|            ButtonCollapse.Bounds = new Rectangle(10, 181, 35, 28);
	|            ButtonCollapse.Text = """";
	|            ButtonCollapse.Image = new Bitmap(new MemoryStream(Convert.FromBase64String(""iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAMAAAAonEzGyAAAAAXRSTlMAQObYZgAAADlJREFUeNpjZGBgYGSAgf9QDiOCD2UzwvkwSUYYH66aEcpHMpABlwAjQQHCZuCwFt1h6E5H9xyK9wE4vgoTXfUx9wAAAABJRU5ErkJggg=="")));
	|            ButtonCollapse.Click += ButtonCollapse_Click;
	|            System.Windows.Forms.ToolTip ToolTip5 = new System.Windows.Forms.ToolTip();
	|            ToolTip5.SetToolTip(ButtonCollapse, ""Свернуть все"");
	|
	|            ButtonOK = new System.Windows.Forms.Button();
	|            ButtonOK.Parent = Panel14;
	|            ButtonOK.Bounds = new Rectangle(22, 10, 100, 28);
	|            ButtonOK.Text = ""ОК"";
	|            ButtonOK.Click += ButtonOK_Click;
	|
	|            ButtonCancel = new System.Windows.Forms.Button();
	|            ButtonCancel.Parent = Panel14;
	|            ButtonCancel.Bounds = new Rectangle(132, 10, 100, 28);
	|            ButtonCancel.Text = ""Отмена"";
	|            ButtonCancel.Click += ButtonCancel_Click;
	|
	|            PropertyGrid1 = new System.Windows.Forms.PropertyGrid();
	|            PropertyGrid1.Parent = Panel12;
	|            PropertyGrid1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            PropertyGrid1.SelectedObjectsChanged += PropertyGrid1_SelectedObjectsChanged;
	|            PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|
	|            Label2 = new System.Windows.Forms.Label();
	|            Label2.Parent = Panel11;
	|            Label2.Bounds = new Rectangle(1, 16, 68, 20);
	|            Label2.Text = ""&Свойства:"";
	|
	|            TopLevel = true;
	|        }
	|
	|        private void ButtonCollapse_Click(object sender, EventArgs e)
	|        {
	|            TreeView1.CollapseAll();
	|            if (TreeView1.Nodes.Count > 0)
	|            {
	|                TreeView1.SelectedNode = TreeView1.Nodes[0];
	|            }
	|        }
	|
	|        private void ButtonExpand_Click(object sender, EventArgs e)
	|        {
	|            TreeView1.ExpandAll();
	|            if (TreeView1.Nodes.Count > 0)
	|            {
	|                TreeView1.SelectedNode = TreeView1.Nodes[0];
	|            }
	|        }
	|
	|        public string GetDefaultValues(MyTreeNode comp)
	|        {
	|            // Заполним для компонента начальные свойства. Они нужны будут при создании скрипта.
	|            string DefaultValues1 = """";
	|            object pg = PropertyGrid1;
	|            ((System.Windows.Forms.PropertyGrid)pg).SelectedObject = comp;
	|            object view1 = pg.GetType().GetField(""gridView"", BindingFlags.NonPublic | BindingFlags.Instance).GetValue(pg);
	|            GridItemCollection GridItemCollection1 = (GridItemCollection)view1.GetType().InvokeMember(""GetAllGridEntries"", BindingFlags.InvokeMethod | BindingFlags.NonPublic | BindingFlags.Instance, null, view1, null);
	|            foreach (GridItem GridItem in GridItemCollection1)
	|            {
	|                if (GridItem.PropertyDescriptor == null) // Исключим из обхода категории.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.Label == ""Locked"") // Исключим из обхода ненужные свойства.
	|                {
	|                    continue;
	|                }
	|                if (GridItem.PropertyDescriptor.Category != GridItem.Label)
	|                {
	|                    string str7 = """";
	|                    string strTab = ""            "";
	|                    str7 = str7 + OneScriptFormsDesigner.ObjectConvertToString(GridItem.Value);
	|                    if (GridItem.GridItems.Count > 0)
	|                    {
	|                        strTab = strTab + ""\t\t"";
	|                        str7 = str7 + Environment.NewLine;
	|                        str7 = str7 + GetGridSubEntries(GridItem.GridItems, """", strTab);
	|
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|
	|                        strTab = ""\t\t"";
	|                    }
	|                    else
	|                    {
	|                        DefaultValues1 = DefaultValues1 + """" + GridItem.Label + "" == "" + str7 + Environment.NewLine;
	|                    }
	|                }
	|            }
	|            return DefaultValues1;
	|        }
	|
	|        private void ButtonMoveDown_Click(object sender, EventArgs e)
	|        {
	|            TreeNode TreeNode1 = TreeView1.SelectedNode;
	|            int Index1 = TreeNode1.Index;
	|            if (TreeNode1.Parent != null)
	|            {
	|                TreeNode Parent = TreeNode1.Parent;
	|                int Count1 = Parent.Nodes.Count;
	|                Parent.Nodes.Remove(TreeNode1);
	|                if (Index1 == Count1 - 1)
	|                {
	|                    if (Parent.Parent != null)
	|                    {
	|                        TreeNode Parent2 = Parent.Parent;
	|                        Parent2.Nodes.Insert(Parent.Index + 1, TreeNode1);
	|                    }
	|                    else
	|                    {
	|                        TreeView1.Nodes.Insert(Parent.Index + 1, TreeNode1);
	|                    }
	|                }
	|                else
	|                {
	|                    TreeNode Next = Parent.Nodes[Index1];
	|                    Next.Nodes.Insert(0, TreeNode1);
	|                }
	|            }
	|            else
	|            {
	|                TreeView1.Nodes.Remove(TreeNode1);
	|                TreeNode Next = TreeView1.Nodes[Index1];
	|                Next.Nodes.Insert(0, TreeNode1);
	|            }
	|
	|            TreeView1.SelectedNode = TreeNode1;
	|            UpdateTreeViewOriginal();
	|        }
	|
	|        private void ButtonMoveUp_Click(object sender, EventArgs e)
	|        {
	|            TreeNode TreeNode1 = TreeView1.SelectedNode;
	|            int Index1 = TreeNode1.Index;
	|            if (TreeNode1.Parent != null)
	|            {
	|                TreeNode Parent = TreeNode1.Parent;
	|                Parent.Nodes.Remove(TreeNode1);
	|                if (Index1 > 0)
	|                {
	|                    TreeNode Previos = Parent.Nodes[Index1 - 1];
	|                    Previos.Nodes.Add(TreeNode1);
	|                }
	|                else
	|                {
	|                    if (Parent.Parent != null)
	|                    {
	|                        TreeNode Parent2 = Parent.Parent;
	|                        Parent2.Nodes.Insert(Parent.Index, TreeNode1);
	|                    }
	|                    else
	|                    {
	|                        TreeView1.Nodes.Insert(Parent.Index, TreeNode1);
	|                    }
	|                }
	|            }
	|            else
	|            {
	|                TreeView1.Nodes.Remove(TreeNode1);
	|                TreeNode Previos = TreeView1.Nodes[Index1 - 1];
	|                Previos.Nodes.Add(TreeNode1);
	|            }
	|
	|            TreeView1.SelectedNode = TreeNode1;
	|            UpdateTreeViewOriginal();
	|        }
	|
	|        private void ButtonDelete_Click(object sender, EventArgs e)
	|        {
	|            TreeView1.Nodes.Remove(TreeView1.SelectedNode);
	|            UpdateTreeViewOriginal();
	|
	|            if (TreeView1.Nodes.Count > 0)
	|            {
	|                ButtonDelete.Enabled = true;
	|                ButtonAddChild.Enabled = true;
	|            }
	|            else
	|            {
	|                ButtonDelete.Enabled = false;
	|                ButtonAddChild.Enabled = false;
	|            }
	|        }
	|
	|        private void TreeView1_AfterCheck(object sender, TreeViewEventArgs e)
	|        {
	|            MyTreeNode Node = (MyTreeNode)TreeView1.SelectedNode;
	|            TreeView1.SelectedNode = null;
	|            TreeView1.SelectedNode = Node;
	|            UpdateTreeViewOriginal();
	|        }
	|
	|        private void PropertyGrid1_PropertyValueChanged(object s, PropertyValueChangedEventArgs e)
	|        {
	|            UpdateTreeViewOriginal();
	|        }
	|
	|        public string GetGridSubEntries(GridItemCollection gridItems, string str, string strTab)
	|        {
	|            foreach (var item in gridItems)
	|            {
	|                GridItem _item = (GridItem)item;
	|                str = str + strTab + _item.Label + "" = "" + _item.Value + Environment.NewLine;
	|                if (_item.GridItems.Count > 0)
	|                {
	|                    strTab = strTab + ""\t\t"";
	|                    str = GetGridSubEntries(_item.GridItems, str, strTab);
	|                    strTab = ""\t\t"";
	|                }
	|            }
	|            return str;
	|        }
	|
	|        private void PropertyGrid1_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            MyTreeNode SelectedObject1 = (MyTreeNode)((System.Windows.Forms.PropertyGrid)sender).SelectedObject;
	|
	|            if (SelectedObject1.Index == 0 && SelectedObject1.Parent == null)
	|            {
	|                if (TreeView1.Nodes.Count > 1)
	|                {
	|                    ButtonMoveDown.Enabled = true;
	|                    ButtonMoveUp.Enabled = false;
	|                }
	|                else
	|                {
	|                    ButtonMoveDown.Enabled = false;
	|                    ButtonMoveUp.Enabled = false;
	|                }
	|            }
	|            else if (SelectedObject1.Index == (TreeView1.Nodes.Count - 1) && SelectedObject1.Parent == null)
	|            {
	|                if (TreeView1.Nodes.Count > 1)
	|                {
	|                    ButtonMoveDown.Enabled = false;
	|                    ButtonMoveUp.Enabled = true;
	|                }
	|                else
	|                {
	|                    ButtonMoveDown.Enabled = false;
	|                    ButtonMoveUp.Enabled = false;
	|                }
	|            }
	|            else
	|            {
	|                ButtonMoveDown.Enabled = true;
	|                ButtonMoveUp.Enabled = true;
	|            }
	|        }
	|
	|        private void TreeView1_AfterSelect(object sender, TreeViewEventArgs e)
	|        {
	|            PropertyGrid1.SelectedObject = e.Node;
	|        }
	|
	|        private void FrmNodes_Load(object sender, EventArgs e)
	|        {
	|            TreeViewOriginal = (TreeView)_context.Instance;
	|            TreeViewOld = new TreeView();
	|            TreeView1.CheckBoxes = TreeViewOriginal.CheckBoxes;
	|            TreeView1.Nodes.Clear();
	|            this.CopyTree(TreeViewOriginal, TreeView1);
	|            this.CopyTree(TreeViewOriginal, TreeViewOld);
	|
	|            if (TreeView1.Nodes.Count > 0)
	|            {
	|                ButtonDelete.Enabled = true;
	|                TreeView1.SelectedNode = TreeView1.Nodes[0];
	|                ButtonAddChild.Enabled = true;
	|            }
	|            else
	|            {
	|                ButtonDelete.Enabled = false;
	|                ButtonAddChild.Enabled = false;
	|            }
	|
	|            UpdateTreeViewOriginal();
	|        }
	|
	|        private void ButtonCancel_Click(object sender, EventArgs e)
	|        {
	|            TreeViewOriginal.Nodes.Clear();
	|            this.CopyTree(this.TreeViewOld, TreeViewOriginal);
	|            this.Close();
	|        }
	|
	|        private void ButtonOK_Click(object sender, EventArgs e)
	|        {
	|            this.Close();
	|        }
	|
	|        private void ButtonAddRoot_Click(object sender, EventArgs e)
	|        {
	|            MyTreeNode TreeNode1 = new MyTreeNode();
	|            TreeNode1.TreeView = TreeView1;
	|            TreeNode1.Name = OneScriptFormsDesigner.RevertNodeName(TreeViewOriginal);
	|            TreeNode1.Text = TreeNode1.Name;
	|            TreeView1.Nodes.Add(TreeNode1);
	|            TreeNode1.DefaultValues = GetDefaultValues(TreeNode1);
	|            UpdateTreeViewOriginal();
	|            TreeView1.SelectedNode = TreeNode1;
	|            ButtonDelete.Enabled = true;
	|            ButtonAddChild.Enabled = true;
	|            TreeView1.Focus();
	|        }
	|
	|        private void ButtonAddChild_Click(object sender, EventArgs e)
	|        {
	|            MyTreeNode TreeNode1 = new MyTreeNode();
	|            TreeNode1.TreeView = TreeView1;
	|            TreeNode1.Name = OneScriptFormsDesigner.RevertNodeName(TreeViewOriginal);
	|            TreeNode1.Text = TreeNode1.Name;
	|            TreeView1.SelectedNode.Nodes.Add(TreeNode1);
	|            TreeView1.SelectedNode.Expand();
	|            TreeNode1.DefaultValues = GetDefaultValues(TreeNode1);
	|            UpdateTreeViewOriginal();
	|            TreeView1.Focus();
	|        }
	|
	|        public void UpdateTreeViewOriginal()
	|        {
	|            TreeViewOriginal.Nodes.Clear();
	|            this.CopyTree(TreeView1, TreeViewOriginal);
	|        }
	|
	|        public void CopyNode(MyTreeNode node, System.Windows.Forms.TreeNodeCollection dest)
	|        {
	|            MyTreeNode copy = new MyTreeNode();
	|            copy.TreeView = TreeView1;
	|            copy.Name = node.Name;
	|            copy.Text = node.Text;
	|            copy.SelectedImageIndex = node.SelectedImageIndex;
	|            copy.ImageIndex = node.ImageIndex;
	|            copy.Checked = node.Checked;
	|            copy.DefaultValues = node.DefaultValues;
	|            try
	|            {
	|                copy.NodeFont = new Font(node.NodeFont, node.NodeFont.Style);
	|            }
	|            catch { }
	|            dest.Add(copy);
	|            foreach (MyTreeNode child in node.Nodes)
	|            {
	|                CopyNode(child, copy.Nodes);
	|            }
	|        }
	|
	|        public void CopyTree(TreeView src, TreeView dest)
	|        {
	|            dest.ImageList = src.ImageList;
	|            dest.ImageIndex = src.ImageIndex;
	|            dest.SelectedImageIndex = src.SelectedImageIndex;
	|
	|            foreach (MyTreeNode node in src.Nodes)
	|            {
	|                CopyNode(node, dest.Nodes);
	|            }
	|        }
	|
	|        private void frmNodes_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyTreeNodeCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System.ComponentModel;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    public class MyTreeNode : System.Windows.Forms.TreeNode
	|    {
	|        [DisplayName(""Помечен"")]
	|        [Description(""Возвращает или задает значение, указывающее, находится ли узел дерева в выбранном состоянии."")]
	|        [Category(""Поведение"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyBooleanConverter))]
	|        public new bool Checked
	|        {
	|            get { return base.Checked; }
	|            set { base.Checked = value; }
	|        }
	|
	|        [DisplayName(""Индекс"")]
	|        [Description(""Возвращает позицию узла дерева в коллекции узлов дерева."")]
	|        [Category(""Поведение"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public new int Index
	|        {
	|            get { return base.Index; }
	|        }
	|
	|        [DisplayName(""ИндексВыбранногоИзображения"")]
	|        [Description(""Возвращает или задает значение индекса в списке изображений для изображения, которое отображается, если узел дерева находится в выбранном состоянии."")]
	|        [Category(""Поведение"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyImageIndexConverter))]
	|        public new int SelectedImageIndex
	|        {
	|            get { return base.SelectedImageIndex; }
	|            set { base.SelectedImageIndex = value; }
	|        }
	|
	|        [DisplayName(""ИндексИзображения"")]
	|        [Description(""Возвращает или задает значение индекса в списке изображений для изображения, отображаемого, когда узел дерева находится в невыбранном состоянии."")]
	|        [Category(""Поведение"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyImageIndexConverter))]
	|        public new int ImageIndex
	|        {
	|            get { return base.ImageIndex; }
	|            set { base.ImageIndex = value; }
	|        }
	|
	|        [DisplayName(""ПолныйПуть"")]
	|        [Description(""Возвращает путь из корневого узла дерева к текущему узлу дерева."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public new string FullPath
	|        {
	|            get { return base.FullPath; }
	|        }
	|
	|        [DisplayName(""Текст"")]
	|        [Description(""Возвращает или задает текст, отображаемый в надписи узла дерева."")]
	|        [Category(""Внешний вид"")]
	|        [Browsable(true)]
	|        public new string Text
	|        {
	|            get { return base.Text; }
	|            set { base.Text = value; }
	|        }
	|
	|        [DisplayName(""(Name)"")]
	|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
	|        [Category(""Разработка"")]
	|        [Browsable(true)]
	|        [ReadOnly(true)]
	|        public new string Name
	|        {
	|            get { return base.Name; }
	|            set { base.Name = value; }
	|        }
	|
	|        [Browsable(false)]
	|        public new TreeView TreeView { get; set; }
	|
	|        [DisplayName(""ШрифтУзла"")]
	|        [Description(""Возвращает или задает шрифт, используемый для отображения текста надписи узла дерева."")]
	|        [Category(""Внешний вид"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyFontConverter))]
	|        public new Font NodeFont
	|        {
	|            get { return base.NodeFont; }
	|            set { base.NodeFont = value; }
	|        }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string StateImageKey { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string StateImageIndex { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string SelectedImageKey { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string ImageKey { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new System.Windows.Forms.ContextMenuStrip ContextMenu { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string ToolTipText { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string BackColor { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new string ForeColor { get; set; }
	|
	|        [Browsable(false)]
	|        [ReadOnly(true)]
	|        public new object Tag { get; set; }
	|	
	|        [Browsable(false)]
	|        public string RequiredValues
	|        {
	|            get
	|            {
	|                return @""
	|Текст ==
	|"";
	|            }
	|        }
	|
	|        [Browsable(false)]
	|        public string DefaultValues { get; set; }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyTreeNode.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.IO;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel; 
	|using System.Runtime.InteropServices;
	|
	|namespace osfDesigner
	|{
	|    class MyIconEditor : IconEditor
	|    {
	|        private FileDialog _fileDialog;
	|        [DllImport(""user32.dll"")] static extern IntPtr GetFocus();
	|        [DllImport(""user32.dll"", SetLastError = true)] public static extern IntPtr SetFocus(IntPtr hWnd);
	|
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            if (provider == null)
	|            {
	|                return value;
	|            }
	|
	|            var edSvc = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
	|            if (edSvc == null)
	|            {
	|                return value;
	|            }
	|
	|            if (_fileDialog == null)
	|            {
	|                _fileDialog = new System.Windows.Forms.OpenFileDialog();
	|                var filter = CreateFilterEntry(this);
	|                _fileDialog.Filter = filter;
	|            }
	|
	|            IntPtr hwndFocus = GetFocus();
	|            try
	|            {
	|                if (_fileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
	|                {
	|                    var file = new FileStream(_fileDialog.FileName, FileMode.Open, FileAccess.Read, FileShare.Read);
	|                    value = LoadFromStream(file);
	|                }
	|                else
	|                {
	|                    return ((dynamic)context.Instance).Icon;
	|                }
	|            }
	|            finally
	|            {
	|                if (hwndFocus != IntPtr.Zero)
	|                {
	|                    SetFocus(hwndFocus);
	|                }
	|            }
	|
	|            MyIcon MyIcon1 = new MyIcon((dynamic)value);
	|            MyIcon1.M_Icon = (dynamic)value;
	|            MyIcon1.Path = _fileDialog.FileName;
	|            return MyIcon1;
	|        }
	|
	|        public override void PaintValue(PaintValueEventArgs e)
	|        {
	|            if (((dynamic)e.Value).M_Icon.GetType() != typeof(Icon))
	|            {
	|                return;
	|            }
	|
	|            Icon icon = ((MyIcon)e.Value).M_Icon;
	|
	|            // Если значок меньше прямоугольника, просто отцентруйте его в прямоугольнике.
	|            Rectangle rectangle = e.Bounds;
	|            if (icon.Width < rectangle.Width)
	|            {
	|                rectangle.X = (rectangle.Width - icon.Width) / 2;
	|                rectangle.Width = icon.Width;
	|            }
	|            if (icon.Height < rectangle.Height)
	|            {
	|                rectangle.X = (rectangle.Height - icon.Height) / 2;
	|                rectangle.Height = icon.Height;
	|            }
	|            e.Graphics.DrawIcon(icon, rectangle);
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyIconEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.IO;
	|using System.ComponentModel.Design.Serialization;
	|
	|namespace osfDesigner
	|{
	|    public class MyIconConverter : IconConverter
	|    {
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            if (sourceType == typeof(byte[]))
	|            {
	|                return true;
	|            }
	|            
	|            if (sourceType == typeof(InstanceDescriptor))
	|            {
	|                return false;
	|            }
	|
	|            return base.CanConvertFrom(context, sourceType);
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            if (destinationType == typeof(Image) || destinationType == typeof(Bitmap))
	|            {
	|                return true;
	|            }
	|
	|            if (destinationType == typeof(byte[]))
	|            {
	|                return true;
	|            }
	|
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
	|        {
	|            if (value is byte[])
	|            {
	|                MemoryStream MemoryStream1 = new MemoryStream((byte[])value);
	|                return new Icon(MemoryStream1);
	|            }
	|
	|            return base.ConvertFrom(context, culture, value);
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            dynamic Instance1 = (dynamic)context.Instance;
	|
	|            if (destinationType == null)
	|            {
	|                throw new ArgumentNullException(""destinationType"");
	|            }
	|
	|            if (destinationType == typeof(Image) || destinationType == typeof(Bitmap))
	|            {
	|                Icon icon = value as Icon;
	|                if (icon != null)
	|                {
	|                    return icon.ToBitmap();
	|                }
	|            }
	|            if (destinationType == typeof(string))
	|            {
	|                if (value != null)
	|                {
	|                    if (Instance1.Icon.Path != null)
	|                    {
	|                        return Instance1.Icon.Path;
	|                    }
	|                    else
	|                    {
	|                        return ""(Значок)"";
	|                    }
	|                }
	|                else
	|                {
	|                    return ""(Значок)"";
	|                }
	|            }
	|            if (destinationType == typeof(byte[]))
	|            {
	|                if (value != null)
	|                {
	|                    MemoryStream MemoryStream1 = null;
	|                    try
	|                    {
	|                        MemoryStream1 = new MemoryStream();
	|                        Icon icon = value as Icon;
	|                        if (icon != null)
	|                        {
	|                            icon.Save(MemoryStream1);
	|                        }
	|                    }
	|                    finally
	|                    {
	|                        if (MemoryStream1 != null)
	|                        {
	|                            MemoryStream1.Close();
	|                        }
	|                    }
	|                    if (MemoryStream1 != null)
	|                    {
	|                        return MemoryStream1.ToArray();
	|                    }
	|                    else
	|                    {
	|                        return null;
	|                    }
	|                }
	|                else
	|                {
	|                    return new byte[0];
	|                }
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|	
	|        public new static string ConvertToString(object value)
	|        {
	|            if (value != null)
	|            {
	|                if (((dynamic)value).Path != null)
	|                {
	|                    return ((dynamic)value).Path;
	|                }
	|                else
	|                {
	|                    return ""(Значок)"";
	|                }
	|            }
	|            else
	|            {
	|                return ""(Значок)"";
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyIconConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Drawing;
	|using System.IO;
	|
	|namespace osfDesigner
	|{
	|    [TypeConverter(typeof(ExpandableObjectConverter))]
	|    public class MyIcon
	|    {
	|        public Icon M_Icon;
	|
	|        public MyIcon()
	|        {
	|        }
	|
	|        public MyIcon(MyIcon p1)
	|        {
	|            M_Icon = p1.M_Icon;
	|        }
	|
	|        public MyIcon(Icon p1)
	|        {
	|            M_Icon = p1;
	|        }
	|
	|        public MyIcon(string p1)
	|        {
	|            M_Icon = null;
	|            try
	|            {
	|                Bitmap Bitmap = new Bitmap(new MemoryStream(Convert.FromBase64String(p1)));
	|                IntPtr Hicon = Bitmap.GetHicon();
	|                Icon Icon1 = Icon.FromHandle(Hicon);
	|                M_Icon = Icon1;
	|            }
	|            catch { }
	|            try
	|            {
	|                M_Icon = new Icon(new MemoryStream(Convert.FromBase64String(p1)));
	|            }
	|            catch { }
	|            if (M_Icon == null)
	|            {
	|                M_Icon = new Icon(p1);
	|            }
	|        }
	|
	|        [DisplayName(""Высота"")]
	|        [Description(""Возвращает высоту этого объекта Значок (Icon)."")]
	|        [Browsable(true)]
	|        public int Height
	|        {
	|            get { return M_Icon.Height; }
	|        }
	|
	|        [DisplayName(""Путь"")]
	|        [Description(""Путь до файла изображения."")]
	|        [Browsable(true)]
	|        [DefaultValue(typeof(String), null)]
	|        [ReadOnly(true)]
	|        public string Path { get; set; }
	|
	|        [DisplayName(""Ширина"")]
	|        [Description(""Возвращает ширину этого объекта Значок (Icon)."")]
	|        [Browsable(true)]
	|        public int Width
	|        {
	|            get { return M_Icon.Width; }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyIcon.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections;
	|using System.Collections.Generic;
	|using ScriptEngine.Machine.Contexts;
	|using ScriptEngine.Machine;
	|using System.Reflection;
	|using System.Runtime.InteropServices;
	|using System.Threading;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using System.Drawing;
	|using System.Windows.Forms;
	|using System.IO;
	|
	|namespace osfDesigner
	|{
	|    [ContextClass(""ДизайнерФормДляОдноСкрипта"", ""OneScriptFormsDesigner"")]
	|    public class OneScriptFormsDesigner : AutoContext<OneScriptFormsDesigner>
	|    {
	|        public static Hashtable hashtable = new Hashtable(); // Хранит связь исходного объекта с его дублером.
	|        public static Hashtable hashtableDesignerTabName = new Hashtable(); // Хранит имя вкладок дизайнера.
	|        public static Hashtable hashtableDesignerTabRootComponent = new Hashtable(); // Хранит связь rootComponent и создаваемой для него вкладки дризайнера.
	|        public static string str1 = """";
	|        public static int tic1 = 0; // Счетчик для правильной работы TabControl, пропуск двух шагов по созданию дизайнером двух вкладок по умолчанию.
	|        public static bool block1 = false; // Тригер для блокировки выделения объекта на форме.
	|
	|        [DllImport(""kernel32.dll"")]
	|        static extern IntPtr GetConsoleWindow();
	|
	|        [DllImport(""User32"")]
	|        private static extern int ShowWindow(IntPtr hwnd, int nCmdShow);
	|
	|        [ScriptConstructor]
	|        public static IRuntimeContextInstance Constructor()
	|        {
	|            return new OneScriptFormsDesigner();
	|        }
	|
	|        [ContextMethod(""Дизайнер"", ""Designer"")]
	|        public void Designer(string p1 = null)
	|        {
	|            if (p1 == ""ВосстановитьКонсоль"")
	|            {
	|                RestoreConsole();
	|            }
	|            else if (p1 == ""СкрытьКонсоль"")
	|            {
	|                HideConsole();
	|            }
	|            else
	|            {
	|                MinimizedConsole();
	|            }
	|            var thread = new Thread(() =>
	|            {
	|                Program Program1 = new Program();
	|                Program1.Main();
	|            }
	|           );
	|            thread.IsBackground = true;
	|            thread.SetApartmentState(ApartmentState.STA);
	|            thread.Start();
	|            thread.Join();
	|        }
	|	
	|        public static void PassProperties(dynamic p1, dynamic p2)
	|        {
	|            // p1 - исходный объект (OriginalObj)
	|            // p2 - дублёр исходного объекта (SimilarObj), для отображения свойств в сетке свойств.
	|            string str1 = """";
	|            PropertyInfo[] PropertyInfo = p2.GetType().GetProperties();
	|            for (int i = 0; i < PropertyInfo.Length; i++)
	|            {
	|                try
	|                {
	|                    if (p1.GetType().ToString() == ""System.Windows.Forms.TabPage"")
	|                    {
	|                        if (PropertyInfo[i].Name !=  ""Parent"")
	|                        {
	|                            p2.GetType().GetProperty(PropertyInfo[i].Name).SetValue(p2, p1.GetType().GetProperty(PropertyInfo[i].Name).GetValue(p1));
	|                        }
	|                    }
	|                    else
	|                    {
	|                        p2.GetType().GetProperty(PropertyInfo[i].Name).SetValue(p2, p1.GetType().GetProperty(PropertyInfo[i].Name).GetValue(p1));
	|                    }
	|                }
	|                catch
	|                {
	|                    str1 = str1 + Environment.NewLine + ""действие - Не удалось передать свойство "" + p1.GetType().ToString() + "" - "" + PropertyInfo[i].Name;
	|                }
	|            }
	|        }
	|
	|        public static void ReturnProperties(dynamic p1, dynamic p2)
	|        {
	|            // p1 - исходный объект (OriginalObj)
	|            // p2 - дублёр исходного объекта (SimilarObj), для отображения свойств в сетке свойств.
	|            string str1 = """";
	|            PropertyInfo[] PropertyInfo = p1.GetType().GetProperties();
	|            for (int i = 0; i < PropertyInfo.Length; i++)
	|            {
	|                try
	|                {
	|                    p1.GetType().GetProperty(PropertyInfo[i].Name).SetValue(p1, p2.GetType().GetProperty(PropertyInfo[i].Name).GetValue(p2));
	|                }
	|                catch
	|                {
	|                    str1 = str1 + Environment.NewLine + ""действие - Не удалось вернуть свойство "" + p2.GetType().ToString() + "" - "" + PropertyInfo[i].Name;
	|                }
	|            }
	|        }
	|
	|        private static void GetNodes1(System.Windows.Forms.TreeView TreeView, ref ArrayList ArrayList, ref int max)
	|        {
	|            int num = 0;
	|            for (int i = 0; i < TreeView.Nodes.Count; i++)
	|            {
	|                System.Windows.Forms.TreeNode TreeNode1 = TreeView.Nodes[i];
	|                ArrayList.Add(TreeNode1.Name);
	|
	|                num = Int32.Parse(TreeNode1.Name.Replace(""Узел"", """"));
	|                if ((num + 1) > max)
	|                {
	|                    max = num + 1;
	|                }
	|
	|                if (TreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes2(TreeNode1, ref ArrayList, ref max);
	|                }
	|            }
	|        }
	|
	|        private static void GetNodes2(System.Windows.Forms.TreeNode treeNode, ref ArrayList ArrayList, ref int max)
	|        {
	|            int num = 0;
	|            for (int i = 0; i < treeNode.Nodes.Count; i++)
	|            {
	|                System.Windows.Forms.TreeNode TreeNode1 = treeNode.Nodes[i];
	|                ArrayList.Add(TreeNode1.Name);
	|
	|                num = Int32.Parse(TreeNode1.Name.Replace(""Узел"", """"));
	|                if ((num + 1) > max)
	|                {
	|                    max = num + 1;
	|                }
	|
	|                if (TreeNode1.Nodes.Count > 0)
	|                {
	|                    GetNodes2(TreeNode1, ref ArrayList, ref max);
	|                }
	|            }
	|        }
	|
	|        public static string RevertNodeName(System.Windows.Forms.TreeView p1)
	|        {
	|            string name = ""Узел"";
	|            int max = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            GetNodes1(p1, ref ArrayList1, ref max);
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertDesignerTabName(string p1)
	|        {
	|            string p2 = ""Вкладка"" + (hashtableDesignerTabName.Count).ToString() + ""("" + p1 + "")"";
	|            hashtableDesignerTabName.Add(p2, p1);
	|            return p2;
	|        }
	|	
	|        public static string RevertStatusBarPanelName(StatusBar p1)
	|        {
	|            string name = ""ПанельСтрокиСостояния"";
	|            int max = 0;
	|            int num = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            for (int i = 0; i < p1.Panels.Count; i++)
	|            {
	|                string NameItem = p1.Panels[i].Name;
	|                if (NameItem != null)
	|                {
	|                    if (NameItem != """")
	|                    {
	|                        ArrayList1.Add(NameItem);
	|                        num = Int32.Parse(NameItem.Replace(""ПанельСтрокиСостояния"", """"));
	|                        if ((num + 1) > max)
	|                        {
	|                            max = num + 1;
	|                        }
	|                    }
	|                }
	|            }
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertColumnHeaderName(ListView p1)
	|        {
	|            string name = ""Колонка"";
	|            int max = 0;
	|            int num = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            for (int i = 0; i < p1.Columns.Count; i++)
	|            {
	|                string NameItem = p1.Columns[i].Name;
	|                if (NameItem != null)
	|                {
	|                    if (NameItem != """")
	|                    {
	|                        ArrayList1.Add(NameItem);
	|                        num = Int32.Parse(NameItem.Replace(""Колонка"", """"));
	|                        if ((num + 1) > max)
	|                        {
	|                            max = num + 1;
	|                        }
	|                    }
	|                }
	|            }
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertListViewItemName(ListView p1)
	|        {
	|            string name = ""Элемент"";
	|            int max = 0;
	|            int num = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            for (int i = 0; i < p1.Items.Count; i++)
	|            {
	|                string NameItem = p1.Items[i].Name;
	|                if (NameItem != null)
	|                {
	|                    if (NameItem != """")
	|                    {
	|                        ArrayList1.Add(NameItem);
	|                        num = Int32.Parse(NameItem.Replace(""Элемент"", """"));
	|                        if ((num + 1) > max)
	|                        {
	|                            max = num + 1;
	|                        }
	|                    }
	|                }
	|            }
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertListViewSubItemName(ListViewItem p1)
	|        {
	|            string name = ""Подэлемент"";
	|            int max = 0;
	|            int num = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            for (int i = 0; i < p1.SubItems.Count; i++)
	|            {
	|                string NameItem = p1.SubItems[i].Name;
	|                if (NameItem != null)
	|                {
	|                    if (NameItem != """" && !NameItem.Contains(""Элемент""))
	|                    {
	|                        ArrayList1.Add(NameItem);
	|                        num = Int32.Parse(NameItem.Replace(""Подэлемент"", """"));
	|                        if ((num + 1) > max)
	|                        {
	|                            max = num + 1;
	|                        }
	|                    }
	|                }
	|            }
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static void BypassMainMenu2(Menu Menu1, ref ArrayList ArrayList, ref int max)
	|        {
	|            for (int i = 0; i < Menu1.MenuItems.Count; i++)
	|            {
	|                int num = 0;
	|                Menu CurrentMenuItem1 = (Menu)Menu1.MenuItems[i];
	|                string Name = CurrentMenuItem1.Name;
	|
	|                if (Name != """" && !Name.Contains(""Меню""))
	|                {
	|                    ArrayList.Add(CurrentMenuItem1.Name);
	|                    num = Int32.Parse(CurrentMenuItem1.Name.Replace(""Сепаратор"", """"));
	|                    if ((num + 1) > max)
	|                    {
	|                        max = num + 1;
	|                    }
	|                }
	|
	|                if (CurrentMenuItem1.MenuItems.Count > 0)
	|                {
	|                    BypassMainMenu2(CurrentMenuItem1, ref ArrayList, ref max);
	|                }
	|            }
	|        }
	|
	|        public static void BypassMainMenu(Menu Menu1, ref ArrayList ArrayList, ref int max)
	|        {
	|            for (int i = 0; i < Menu1.MenuItems.Count; i++)
	|            {
	|                int num = 0;
	|                Menu CurrentMenuItem1 = (Menu)Menu1.MenuItems[i];
	|                string Name = CurrentMenuItem1.Name;
	|
	|                if (Name != """" && !Name.Contains(""Сепаратор""))
	|                {
	|                    ArrayList.Add(CurrentMenuItem1.Name);
	|                    num = Int32.Parse(CurrentMenuItem1.Name.Replace(""Меню"", """"));
	|                    if ((num + 1) > max)
	|                    {
	|                        max = num + 1;
	|                    }
	|                }
	|
	|                if (CurrentMenuItem1.MenuItems.Count > 0)
	|                {
	|                    BypassMainMenu(CurrentMenuItem1, ref ArrayList, ref max);
	|                }
	|            }
	|        }
	|
	|        public static string RevertMenuName(MainMenu p1)
	|        {
	|            string name = ""Меню"";
	|            int max = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            BypassMainMenu(p1, ref ArrayList1, ref max);
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertSeparatorName(MainMenu p1)
	|        {
	|            string name = ""Сепаратор"";
	|            int max = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            BypassMainMenu2(p1, ref ArrayList1, ref max);
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertToolBarButtonName(ToolBar p1)
	|        {
	|            string name = ""Кн"";
	|            int max = 0;
	|            int num = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            for (int i = 0; i < p1.Buttons.Count; i++)
	|            {
	|                string Name = p1.Buttons[i].Name;
	|                if (Name != null)
	|                {
	|                    if (Name != """")
	|                    {
	|                        ArrayList1.Add(Name);
	|                        num = Int32.Parse(Name.Replace(""Кн"", """"));
	|                        if ((num + 1) > max)
	|                        {
	|                            max = num + 1;
	|                        }
	|                    }
	|                }
	|            }
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertDataGridTableStyleName(DataGrid p1)
	|        {
	|            string name = ""Стиль"";
	|            int max = 0;
	|            int num = 0;
	|            string newName = name + Convert.ToString(max);
	|            ArrayList ArrayList1 = new ArrayList();
	|            for (int i = 0; i < p1.TableStyles.Count; i++)
	|            {
	|                string NameStyle = RevertSimilarObj(p1.TableStyles[i]).NameStyle;
	|                if (NameStyle != null)
	|                {
	|                    ArrayList1.Add(NameStyle);
	|                    num = Int32.Parse(NameStyle.Replace(""Стиль"", """"));
	|                    if ((num + 1) > max)
	|                    {
	|                        max = num + 1;
	|                    }
	|                }
	|            }
	|
	|            for (int i = -1; i < max; i++)
	|            {
	|                newName = name + Convert.ToString(i + 1);
	|                if (!ArrayList1.Contains(newName))
	|                {
	|                    return newName;
	|                }
	|            }
	|            return newName;
	|        }
	|
	|        public static string RevertDataGridColumnStyleName(dynamic p1, dynamic p2)
	|        {
	|            // p1 - стиль таблицы сетки данных.
	|            // p2 - стиль колонки сетки данных.
	|            if (p2.GetType() == typeof(osfDesigner.DataGridBoolColumn))
	|            {
	|                string name = ""СтильКолонкиБулево"";
	|                int max = 0;
	|                int num = 0;
	|                string newName = name + Convert.ToString(max);
	|                ArrayList ArrayList1 = new ArrayList();
	|                osfDesigner.DataGridTableStyle DataGridTableStyle1 = RevertSimilarObj(p1);
	|                for (int i = 0; i < DataGridTableStyle1.GridColumnStyles.Count; i++)
	|                {
	|                    string NameStyle = ((dynamic)DataGridTableStyle1.GridColumnStyles[i]).NameStyle;
	|                    if (NameStyle != null)
	|                    {
	|                        if (NameStyle.Contains(""СтильКолонкиБулево""))
	|                        {
	|                            ArrayList1.Add(NameStyle);
	|                            num = Int32.Parse(NameStyle.Replace(""СтильКолонкиБулево"", """"));
	|                            if ((num + 1) > max)
	|                            {
	|                                max = num + 1;
	|                            }
	|                        }
	|                    }
	|                }
	|
	|                for (int i = -1; i < max; i++)
	|                {
	|                    newName = name + Convert.ToString(i + 1);
	|                    if (!ArrayList1.Contains(newName))
	|                    {
	|                        return newName;
	|                    }
	|                }
	|                return newName;
	|            }
	|            else if (p2.GetType() == typeof(osfDesigner.DataGridTextBoxColumn))
	|            {
	|                string name = ""СтильКолонкиПолеВвода"";
	|                int max = 0;
	|                int num = 0;
	|                string newName = name + Convert.ToString(max);
	|                ArrayList ArrayList1 = new ArrayList();
	|                osfDesigner.DataGridTableStyle DataGridTableStyle1 = RevertSimilarObj(p1);
	|                for (int i = 0; i < DataGridTableStyle1.GridColumnStyles.Count; i++)
	|                {
	|                    string NameStyle = ((dynamic)DataGridTableStyle1.GridColumnStyles[i]).NameStyle;
	|                    if (NameStyle != null)
	|                    {
	|                        if (NameStyle.Contains(""СтильКолонкиПолеВвода""))
	|                        {
	|                            ArrayList1.Add(NameStyle);
	|                            num = Int32.Parse(NameStyle.Replace(""СтильКолонкиПолеВвода"", """"));
	|                            if ((num + 1) > max)
	|                            {
	|                                max = num + 1;
	|                            }
	|                        }
	|                    }
	|                }
	|
	|                for (int i = -1; i < max; i++)
	|                {
	|                    newName = name + Convert.ToString(i + 1);
	|                    if (!ArrayList1.Contains(newName))
	|                    {
	|                        return newName;
	|                    }
	|                }
	|                return newName;
	|            }
	|            else if (p2.GetType() == typeof(osfDesigner.DataGridComboBoxColumnStyle))
	|            {
	|                string name = ""СтильКолонкиПолеВыбора"";
	|                int max = 0;
	|                int num = 0;
	|                string newName = name + Convert.ToString(max);
	|                ArrayList ArrayList1 = new ArrayList();
	|                osfDesigner.DataGridTableStyle DataGridTableStyle1 = RevertSimilarObj(p1);
	|                for (int i = 0; i < DataGridTableStyle1.GridColumnStyles.Count; i++)
	|                {
	|                    string NameStyle = ((dynamic)DataGridTableStyle1.GridColumnStyles[i]).NameStyle;
	|                    if (NameStyle != null)
	|                    {
	|                        if (NameStyle.Contains(""СтильКолонкиПолеВыбора""))
	|                        {
	|                            ArrayList1.Add(NameStyle);
	|                            num = Int32.Parse(NameStyle.Replace(""СтильКолонкиПолеВыбора"", """"));
	|                            if ((num + 1) > max)
	|                            {
	|                                max = num + 1;
	|                            }
	|                        }
	|                    }
	|                }
	|
	|                for (int i = -1; i < max; i++)
	|                {
	|                    newName = name + Convert.ToString(i + 1);
	|                    if (!ArrayList1.Contains(newName))
	|                    {
	|                        return newName;
	|                    }
	|                }
	|                return newName;
	|            }
	|            return null;
	|        }
	|
	|        public static void AddToHashtable(dynamic p1, dynamic p2)
	|        {
	|            // p1 - исходный объект (OriginalObj).
	|            // p2 - дублёр исходного объекта (SimilarObj), для отображения свойств в сетке свойств.
	|            if (!hashtable.ContainsKey(p1))
	|            {
	|                hashtable.Add(p1, p2);
	|            }
	|        }
	|
	|        public static void AddToHashtableDesignerTabRootComponent(dynamic p1, dynamic p2)
	|        {
	|            // p1 - RootComponent, форма.
	|            // p2 - DesignerTab, вкладка дизайнера для этой формы.
	|            if (!hashtableDesignerTabRootComponent.ContainsKey(p1))
	|            {
	|                hashtableDesignerTabRootComponent.Add(p1, p2);
	|            }
	|        }
	|
	|        public static dynamic RevertDesignerTab(dynamic rootComponent)
	|        {
	|            foreach (DictionaryEntry de in hashtableDesignerTabRootComponent)
	|            {
	|                if (de.Key.Equals(rootComponent))
	|                {
	|                    return de.Value;
	|                }
	|            }
	|            return null;
	|        }
	|
	|        public static dynamic RevertSimilarObj(dynamic OriginalObj)
	|        {
	|            foreach (DictionaryEntry de in hashtable)
	|            {
	|                if (de.Key.Equals(OriginalObj))
	|                {
	|                    return de.Value;
	|                }
	|            }
	|            return null;
	|        }
	|
	|        public static dynamic RevertOriginalObj(dynamic SimilarObj)
	|        {
	|            foreach (DictionaryEntry de in hashtable)
	|            {
	|                if (de.Value.Equals(SimilarObj))
	|                {
	|                    return de.Key;
	|                }
	|            }
	|            return null;
	|        }
	|	
	|        public static void ChangeVisibilityBasedOnMode(ref object[] v, List<string> list)
	|        {
	|            List<string> PropertiesToHide = list;
	|            foreach (var vObject in v)
	|            {
	|                PropertyInfo[] myPropertyInfo = vObject.GetType().GetProperties();
	|                var properties = myPropertyInfo;
	|                foreach (var p in properties)
	|                {
	|                    foreach (string hideProperty in PropertiesToHide)
	|                    {
	|                        if (p.Name.ToLower() == hideProperty.ToLower())
	|                        {
	|                            setBrowsableProperty(hideProperty, false, vObject);
	|                        }
	|                    }
	|                }
	|            }
	|        }
	|
	|        private static void setBrowsableProperty(string strPropertyName, bool bIsBrowsable, object vObject)
	|        {
	|            try
	|            {
	|                PropertyDescriptor theDescriptor = System.ComponentModel.TypeDescriptor.GetProperties(vObject.GetType())[strPropertyName];
	|                BrowsableAttribute theDescriptorBrowsableAttribute = (BrowsableAttribute)theDescriptor.Attributes[typeof(BrowsableAttribute)];
	|                FieldInfo isBrowsable = theDescriptorBrowsableAttribute.GetType().GetField(""Browsable"", BindingFlags.IgnoreCase | BindingFlags.NonPublic | BindingFlags.Instance);
	|                isBrowsable.SetValue(theDescriptorBrowsableAttribute, bIsBrowsable);
	|            }
	|            catch { }
	|        }
	|
	|        public static string ObjectConvertToString(object p1)
	|        {
	|            object obj = p1;
	|            if (obj != null)
	|            {
	|                Type objType = p1.GetType();
	|                TypeConverter Converter1 = System.ComponentModel.TypeDescriptor.GetConverter(objType);
	|                if (objType == typeof(bool))
	|                {
	|                    return MyBooleanConverter.ConvertToString(obj);
	|                }
	|                else if (objType == typeof(Size))
	|                {
	|                    return MySizeConverter.ConvertToString(obj);
	|                }
	|                else if (objType == typeof(Cursor))
	|                {
	|                    return MyCursorConverter.ConvertToString(obj);
	|                }
	|                else if (objType == typeof(Color))
	|                {
	|                    return MyColorConverter.ConvertToString(Converter1.ConvertToString(obj));
	|                }
	|                else if (objType == typeof(Point))
	|                {
	|                    return MyLocationConverter.ConvertToString(obj);
	|                }
	|                else if (objType == typeof(Font))
	|                {
	|                    return MyFontConverter.ConvertToString(Converter1.ConvertToString(obj));
	|                }
	|                else if (objType == typeof(Bitmap))
	|                {
	|                    return Converter1.ConvertToString((Bitmap)obj) + "" ("" + ((Bitmap)obj).Tag + "")"";
	|                }
	|                else if (objType == typeof(osfDesigner.MyIcon))
	|                {
	|                    return MyIconConverter.ConvertToString(obj);
	|                }
	|                else
	|                {
	|                    return Converter1.ConvertToString(obj);
	|                }
	|            }
	|
	|            return """";
	|        }
	|
	|        public void HideConsole()
	|        {
	|            ShowWindow(GetConsoleWindow(), 0);
	|        }
	|
	|        public void MinimizedConsole()
	|        {
	|            ShowWindow(GetConsoleWindow(), 7);
	|        }
	|
	|        public void RestoreConsole()
	|        {
	|            ShowWindow(GetConsoleWindow(), 9);
	|        }
	|	
	|        public static string GetDisplayName(object value, string memberName)
	|        {
	|            string DisplayName = """";
	|            try
	|            {
	|                PropertyDescriptor PropertyDescriptorCollection1 = System.ComponentModel.TypeDescriptor.GetProperties(value.GetType())[memberName];
	|                AttributeCollection attributes = System.ComponentModel.TypeDescriptor.GetProperties(value.GetType())[memberName].Attributes;
	|                DisplayNameAttribute myDisplayNameAttribute = (DisplayNameAttribute)attributes[typeof(DisplayNameAttribute)];
	|                DisplayName = myDisplayNameAttribute.DisplayName;
	|            }
	|            catch { }
	|            return DisplayName;
	|        }
	|
	|        public static string GetPropName(object value, string displayName)
	|        {
	|            PropertyInfo[] properties = value.GetType().GetProperties();
	|            foreach (PropertyInfo prop in properties)
	|            {
	|                object[] attrs = prop.GetCustomAttributes(true);
	|                foreach (object attr in attrs)
	|                {
	|                    if (attr.GetType() == typeof(DisplayNameAttribute))
	|                    {
	|                        DisplayNameAttribute DisplayNameAttribute1 = (DisplayNameAttribute)attr;
	|                        if (DisplayNameAttribute1 != null)
	|                        {
	|                            var attributeName = DisplayNameAttribute1.DisplayName;
	|                            if (attributeName == displayName)
	|                            {
	|                                return prop.Name;
	|                            }
	|                        }
	|                    }
	|                }
	|            }
	|            return null;
	|        }
	|	
	|        public static Dictionary<string, string> colors = new Dictionary<string, string>
	|            {
	|                {""Aquamarine"", ""Аквамариновый""},
	|                {""Аквамариновый"", ""Aquamarine""},
	|                {""AntiqueWhite"", ""АнтичныйБелый""},
	|                {""АнтичныйБелый"", ""AntiqueWhite""},
	|                {""Beige"", ""Бежевый""},
	|                {""Бежевый"", ""Beige""},
	|                {""WhiteSmoke"", ""БелаяДымка""},
	|                {""БелаяДымка"", ""WhiteSmoke""},
	|                {""White"", ""Белый""},
	|                {""Белый"", ""White""},
	|                {""NavajoWhite"", ""БелыйНавахо""},
	|                {""БелыйНавахо"", ""NavajoWhite""},
	|                {""Turquoise"", ""Бирюзовый""},
	|                {""Бирюзовый"", ""Turquoise""},
	|                {""Bisque"", ""Бисквитный""},
	|                {""Бисквитный"", ""Bisque""},
	|                {""PaleTurquoise"", ""БледноБирюзовый""},
	|                {""БледноБирюзовый"", ""PaleTurquoise""},
	|                {""Cornsilk"", ""БледноЖелтый""},
	|                {""БледноЖелтый"", ""Cornsilk""},
	|                {""PaleGreen"", ""БледноЗеленый""},
	|                {""БледноЗеленый"", ""PaleGreen""},
	|                {""PaleGoldenrod"", ""БледноЗолотистый""},
	|                {""БледноЗолотистый"", ""PaleGoldenrod""},
	|                {""CornflowerBlue"", ""Васильковый""},
	|                {""Васильковый"", ""CornflowerBlue""},
	|                {""HotTrack"", ""Выделенный""},
	|                {""Выделенный"", ""HotTrack""},
	|                {""ControlLightLight"", ""ВыделеныйЭлемент""},
	|                {""ВыделеныйЭлемент"", ""ControlLightLight""},
	|                {""DeepPink"", ""ГлубокийРозовый""},
	|                {""ГлубокийРозовый"", ""DeepPink""},
	|                {""DeepSkyBlue"", ""Голубой""},
	|                {""Голубой"", ""DeepSkyBlue""},
	|                {""ActiveBorder"", ""ГраницаАктивного""},
	|                {""ГраницаАктивного"", ""ActiveBorder""},
	|                {""InactiveBorder"", ""ГраницаНеактивного""},
	|                {""ГраницаНеактивного"", ""InactiveBorder""},
	|                {""LightSlateGray"", ""ГрифельноСерый""},
	|                {""ГрифельноСерый"", ""LightSlateGray""},
	|                {""SlateBlue"", ""ГрифельноСиний""},
	|                {""ГрифельноСиний"", ""SlateBlue""},
	|                {""YellowGreen"", ""ЖелтоЗеленый""},
	|                {""ЖелтоЗеленый"", ""YellowGreen""},
	|                {""Yellow"", ""Желтый""},
	|                {""Желтый"", ""Yellow""},
	|                {""ActiveCaption"", ""ЗаголовокАктивного""},
	|                {""ЗаголовокАктивного"", ""ActiveCaption""},
	|                {""InactiveCaption"", ""ЗаголовокНеактивного""},
	|                {""ЗаголовокНеактивного"", ""InactiveCaption""},
	|                {""DodgerBlue"", ""ЗащитноСиний""},
	|                {""ЗащитноСиний"", ""DodgerBlue""},
	|                {""SpringGreen"", ""ЗеленаяВесна""},
	|                {""ЗеленаяВесна"", ""SpringGreen""},
	|                {""LawnGreen"", ""ЗеленаяЛужайка""},
	|                {""ЗеленаяЛужайка"", ""LawnGreen""},
	|                {""SeaGreen"", ""ЗеленоеМоре""},
	|                {""ЗеленоеМоре"", ""SeaGreen""},
	|                {""GreenYellow"", ""ЗеленоЖелтый""},
	|                {""ЗеленоЖелтый"", ""GreenYellow""},
	|                {""Green"", ""Зеленый""},
	|                {""Зеленый"", ""Green""},
	|                {""LimeGreen"", ""ЗеленыйЛайм""},
	|                {""ЗеленыйЛайм"", ""LimeGreen""},
	|                {""ForestGreen"", ""ЗеленыйЛесной""},
	|                {""ЗеленыйЛесной"", ""ForestGreen""},
	|                {""Goldenrod"", ""Золотарник""},
	|                {""Золотарник"", ""Goldenrod""},
	|                {""Gold"", ""Золотой""},
	|                {""Золотой"", ""Gold""},
	|                {""Indigo"", ""Индиго""},
	|                {""Индиго"", ""Indigo""},
	|                {""IndianRed"", ""ИндийскийКрасный""},
	|                {""ИндийскийКрасный"", ""IndianRed""},
	|                {""Firebrick"", ""Кирпичный""},
	|                {""Кирпичный"", ""Firebrick""},
	|                {""SaddleBrown"", ""КожаноКоричневый""},
	|                {""КожаноКоричневый"", ""SaddleBrown""},
	|                {""Coral"", ""Коралловый""},
	|                {""Коралловый"", ""Coral""},
	|                {""Maroon"", ""КоричневоМалиновый""},
	|                {""КоричневоМалиновый"", ""Maroon""},
	|                {""Brown"", ""Коричневый""},
	|                {""Коричневый"", ""Brown""},
	|                {""RoyalBlue"", ""КоролевскийСиний""},
	|                {""КоролевскийСиний"", ""RoyalBlue""},
	|                {""Red"", ""Красный""},
	|                {""Красный"", ""Red""},
	|                {""Crimson"", ""Кровавый""},
	|                {""Кровавый"", ""Crimson""},
	|                {""Lavender"", ""Лаванда""},
	|                {""Лаванда"", ""Lavender""},
	|                {""Azure"", ""Лазурный""},
	|                {""Лазурный"", ""Azure""},
	|                {""Lime"", ""Лайм""},
	|                {""Лайм"", ""Lime""},
	|                {""PaleVioletRed"", ""Лиловый""},
	|                {""Лиловый"", ""PaleVioletRed""},
	|                {""Control"", ""ЛицеваяЭлемента""},
	|                {""ЛицеваяЭлемента"", ""Control""},
	|                {""Salmon"", ""Лососевый""},
	|                {""Лососевый"", ""Salmon""},
	|                {""Linen"", ""Льняной""},
	|                {""Льняной"", ""Linen""},
	|                {""Magenta"", ""Малиновый""},
	|                {""Малиновый"", ""Magenta""},
	|                {""Honeydew"", ""Медовый""},
	|                {""Медовый"", ""Honeydew""},
	|                {""Menu"", ""Меню""},
	|                {""Меню"", ""Menu""},
	|                {""Moccasin"", ""Мокасиновый""},
	|                {""Мокасиновый"", ""Moccasin""},
	|                {""Aqua"", ""МорскаяВолна""},
	|                {""МорскаяВолна"", ""Aqua""},
	|                {""SeaShell"", ""МорскаяРакушка""},
	|                {""МорскаяРакушка"", ""SeaShell""},
	|                {""MintCream"", ""МятноКремовый""},
	|                {""МятноКремовый"", ""MintCream""},
	|                {""SkyBlue"", ""НебесноГолубой""},
	|                {""НебесноГолубой"", ""SkyBlue""},
	|                {""LightSkyBlue"", ""НебесноГолубойСветлый""},
	|                {""НебесноГолубойСветлый"", ""LightSkyBlue""},
	|                {""OliveDrab"", ""НежноОливковый""},
	|                {""НежноОливковый"", ""OliveDrab""},
	|                {""Window"", ""Окно""},
	|                {""Окно"", ""Window""},
	|                {""Olive"", ""Оливковый""},
	|                {""Оливковый"", ""Olive""},
	|                {""OrangeRed"", ""ОранжевоКрасный""},
	|                {""ОранжевоКрасный"", ""OrangeRed""},
	|                {""Orange"", ""Оранжевый""},
	|                {""Оранжевый"", ""Orange""},
	|                {""Orchid"", ""Орхидея""},
	|                {""Орхидея"", ""Orchid""},
	|                {""Sienna"", ""Охра""},
	|                {""Охра"", ""Sienna""},
	|                {""PeachPuff"", ""Персиковый""},
	|                {""Персиковый"", ""PeachPuff""},
	|                {""SandyBrown"", ""Песочный""},
	|                {""Песочный"", ""SandyBrown""},
	|                {""PapayaWhip"", ""ПобегПапайи""},
	|                {""ПобегПапайи"", ""PapayaWhip""},
	|                {""Info"", ""Подсказка""},
	|                {""Подсказка"", ""Info""},
	|                {""ScrollBar"", ""ПолосаПрокрутки""},
	|                {""ПолосаПрокрутки"", ""ScrollBar""},
	|                {""MidnightBlue"", ""ПолуночноСиний""},
	|                {""ПолуночноСиний"", ""MidnightBlue""},
	|                {""PowderBlue"", ""ПороховаяСинь""},
	|                {""ПороховаяСинь"", ""PowderBlue""},
	|                {""GhostWhite"", ""ПризрачноБелый""},
	|                {""ПризрачноБелый"", ""GhostWhite""},
	|                {""Transparent"", ""Прозрачный""},
	|                {""Прозрачный"", ""Transparent""},
	|                {""Purple"", ""Пурпурный""},
	|                {""Пурпурный"", ""Purple""},
	|                {""IsEmpty"", ""Пусто""},
	|                {""Пусто"", ""IsEmpty""},
	|                {""Wheat"", ""Пшеничный""},
	|                {""Пшеничный"", ""Wheat""},
	|                {""AppWorkspace"", ""РабочаяОбластьПриложения""},
	|                {""РабочаяОбластьПриложения"", ""AppWorkspace""},
	|                {""Desktop"", ""РабочийСтол""},
	|                {""РабочийСтол"", ""Desktop""},
	|                {""WindowFrame"", ""РамкаОкна""},
	|                {""РамкаОкна"", ""WindowFrame""},
	|                {""RosyBrown"", ""РозовоКоричневый""},
	|                {""РозовоКоричневый"", ""RosyBrown""},
	|                {""LavenderBlush"", ""РозовоЛавандовый""},
	|                {""РозовоЛавандовый"", ""LavenderBlush""},
	|                {""Pink"", ""Розовый""},
	|                {""Розовый"", ""Pink""},
	|                {""LightSeaGreen"", ""СветлаяМорскаяВолна""},
	|                {""СветлаяМорскаяВолна"", ""LightSeaGreen""},
	|                {""LightYellow"", ""СветлоЖелтый""},
	|                {""СветлоЖелтый"", ""LightYellow""},
	|                {""LightGoldenrodYellow"", ""СветлоЖелтыйЗолотистый""},
	|                {""СветлоЖелтыйЗолотистый"", ""LightGoldenrodYellow""},
	|                {""LightGreen"", ""СветлоЗеленый""},
	|                {""СветлоЗеленый"", ""LightGreen""},
	|                {""LightCoral"", ""СветлоКоралловый""},
	|                {""СветлоКоралловый"", ""LightCoral""},
	|                {""Peru"", ""СветлоКоричневый""},
	|                {""СветлоКоричневый"", ""Peru""},
	|                {""BlanchedAlmond"", ""СветлоКремовый""},
	|                {""СветлоКремовый"", ""BlanchedAlmond""},
	|                {""LemonChiffon"", ""СветлоЛимонный""},
	|                {""СветлоЛимонный"", ""LemonChiffon""},
	|                {""LightPink"", ""СветлоРозовый""},
	|                {""СветлоРозовый"", ""LightPink""},
	|                {""LightGray"", ""СветлоСерый""},
	|                {""СветлоСерый"", ""LightGray""},
	|                {""LightBlue"", ""СветлоСиний""},
	|                {""СветлоСиний"", ""LightBlue""},
	|                {""LightCyan"", ""СветлыйЗеленоватоГолубой""},
	|                {""СветлыйЗеленоватоГолубой"", ""LightCyan""},
	|                {""LightSalmon"", ""СветлыйЛососевый""},
	|                {""СветлыйЛососевый"", ""LightSalmon""},
	|                {""ControlLight"", ""СветлыйЭлемента""},
	|                {""СветлыйЭлемента"", ""ControlLight""},
	|                {""Silver"", ""Серебристый""},
	|                {""Серебристый"", ""Silver""},
	|                {""CadetBlue"", ""СероСиний""},
	|                {""СероСиний"", ""CadetBlue""},
	|                {""Gray"", ""Серый""},
	|                {""Серый"", ""Gray""},
	|                {""GrayText"", ""СерыйТекст""},
	|                {""СерыйТекст"", ""GrayText""},
	|                {""SlateGray"", ""СерыйШифер""},
	|                {""СерыйШифер"", ""SlateGray""},
	|                {""LightSteelBlue"", ""СинеГолубойСоСтальнымОттенком""},
	|                {""СинеГолубойСоСтальнымОттенком"", ""LightSteelBlue""},
	|                {""Teal"", ""СинеЗеленый""},
	|                {""СинеЗеленый"", ""Teal""},
	|                {""BlueViolet"", ""СинеФиолетовый""},
	|                {""СинеФиолетовый"", ""BlueViolet""},
	|                {""Blue"", ""Синий""},
	|                {""Синий"", ""Blue""},
	|                {""AliceBlue"", ""СинийЭлис""},
	|                {""СинийЭлис"", ""AliceBlue""},
	|                {""SteelBlue"", ""СиняяСталь""},
	|                {""СиняяСталь"", ""SteelBlue""},
	|                {""Plum"", ""Сливовый""},
	|                {""Сливовый"", ""Plum""},
	|                {""Ivory"", ""СлоноваяКость""},
	|                {""СлоноваяКость"", ""Ivory""},
	|                {""OldLace"", ""СтароеКружево""},
	|                {""СтароеКружево"", ""OldLace""},
	|                {""HighlightText"", ""ТекстВыбранных""},
	|                {""ТекстВыбранных"", ""HighlightText""},
	|                {""ActiveCaptionText"", ""ТекстЗаголовкаАктивного""},
	|                {""ТекстЗаголовкаАктивного"", ""ActiveCaptionText""},
	|                {""InactiveCaptionText"", ""ТекстЗаголовкаНеактивного""},
	|                {""ТекстЗаголовкаНеактивного"", ""InactiveCaptionText""},
	|                {""MenuText"", ""ТекстМеню""},
	|                {""ТекстМеню"", ""MenuText""},
	|                {""WindowText"", ""ТекстОкна""},
	|                {""ТекстОкна"", ""WindowText""},
	|                {""InfoText"", ""ТекстПодсказки""},
	|                {""ТекстПодсказки"", ""InfoText""},
	|                {""ControlText"", ""ТекстЭлемента""},
	|                {""ТекстЭлемента"", ""ControlText""},
	|                {""DarkSalmon"", ""ТемнаяЛососина""},
	|                {""ТемнаяЛососина"", ""DarkSalmon""},
	|                {""DarkSeaGreen"", ""ТемнаяМорскаяВолна""},
	|                {""ТемнаяМорскаяВолна"", ""DarkSeaGreen""},
	|                {""DarkOrchid"", ""ТемнаяОрхидея""},
	|                {""ТемнаяОрхидея"", ""DarkOrchid""},
	|                {""ControlDarkDark"", ""ТемнаяТеньЭлемента""},
	|                {""ТемнаяТеньЭлемента"", ""ControlDarkDark""},
	|                {""DarkSlateGray"", ""ТемноАспидныйСерый""},
	|                {""ТемноАспидныйСерый"", ""DarkSlateGray""},
	|                {""DarkCyan"", ""ТемноГолубой""},
	|                {""ТемноГолубой"", ""DarkCyan""},
	|                {""DarkGreen"", ""ТемноЗеленый""},
	|                {""ТемноЗеленый"", ""DarkGreen""},
	|                {""DarkRed"", ""ТемноКрасный""},
	|                {""ТемноКрасный"", ""DarkRed""},
	|                {""DarkTurquoise"", ""ТемноМандариновый""},
	|                {""ТемноМандариновый"", ""DarkTurquoise""},
	|                {""DarkMagenta"", ""ТемноПурпурный""},
	|                {""ТемноПурпурный"", ""DarkMagenta""},
	|                {""DarkGray"", ""ТемноСерый""},
	|                {""ТемноСерый"", ""DarkGray""},
	|                {""DarkBlue"", ""ТемноСиний""},
	|                {""ТемноСиний"", ""DarkBlue""},
	|                {""DarkViolet"", ""ТемноФиолетовый""},
	|                {""ТемноФиолетовый"", ""DarkViolet""},
	|                {""DarkSlateBlue"", ""ТемныйГрифельноСиний""},
	|                {""ТемныйГрифельноСиний"", ""DarkSlateBlue""},
	|                {""DarkGoldenrod"", ""ТемныйЗолотой""},
	|                {""ТемныйЗолотой"", ""DarkGoldenrod""},
	|                {""DarkOliveGreen"", ""ТемныйОливковоЗеленый""},
	|                {""ТемныйОливковоЗеленый"", ""DarkOliveGreen""},
	|                {""DarkOrange"", ""ТемныйОранжевый""},
	|                {""ТемныйОранжевый"", ""DarkOrange""},
	|                {""DarkKhaki"", ""ТемныйХаки""},
	|                {""ТемныйХаки"", ""DarkKhaki""},
	|                {""ControlDark"", ""ТеньЭлемента""},
	|                {""ТеньЭлемента"", ""ControlDark""},
	|                {""Tomato"", ""Томатный""},
	|                {""Томатный"", ""Tomato""},
	|                {""Gainsboro"", ""ТуманноБелый""},
	|                {""ТуманноБелый"", ""Gainsboro""},
	|                {""MistyRose"", ""ТусклоРозовый""},
	|                {""ТусклоРозовый"", ""MistyRose""},
	|                {""DimGray"", ""ТусклоСерый""},
	|                {""ТусклоСерый"", ""DimGray""},
	|                {""MediumAquamarine"", ""УмеренныйАквамарин""},
	|                {""УмеренныйАквамарин"", ""MediumAquamarine""},
	|                {""MediumTurquoise"", ""УмеренныйБирюзовый""},
	|                {""УмеренныйБирюзовый"", ""MediumTurquoise""},
	|                {""MediumSpringGreen"", ""УмеренныйВесеннеЗеленый""},
	|                {""УмеренныйВесеннеЗеленый"", ""MediumSpringGreen""},
	|                {""MediumSlateBlue"", ""УмеренныйГрифельноСиний""},
	|                {""УмеренныйГрифельноСиний"", ""MediumSlateBlue""},
	|                {""MediumSeaGreen"", ""УмеренныйМорскаяВолна""},
	|                {""УмеренныйМорскаяВолна"", ""MediumSeaGreen""},
	|                {""MediumOrchid"", ""УмеренныйОрхидея""},
	|                {""УмеренныйОрхидея"", ""MediumOrchid""},
	|                {""MediumBlue"", ""УмеренныйСиний""},
	|                {""УмеренныйСиний"", ""MediumBlue""},
	|                {""MediumVioletRed"", ""УмеренныйФиолетовоКрасный""},
	|                {""УмеренныйФиолетовоКрасный"", ""MediumVioletRed""},
	|                {""MediumPurple"", ""УмеренныйФиолетовый""},
	|                {""УмеренныйФиолетовый"", ""MediumPurple""},
	|                {""Violet"", ""Фиолетовый""},
	|                {""Фиолетовый"", ""Violet""},
	|                {""Highlight"", ""ФонВыбранных""},
	|                {""ФонВыбранных"", ""Highlight""},
	|                {""Fuchsia"", ""Фуксия""},
	|                {""Фуксия"", ""Fuchsia""},
	|                {""Khaki"", ""Хаки""},
	|                {""Хаки"", ""Khaki""},
	|                {""Tan"", ""ЦветЗагара""},
	|                {""ЦветЗагара"", ""Tan""},
	|                {""FloralWhite"", ""ЦветочноБелый""},
	|                {""ЦветочноБелый"", ""FloralWhite""},
	|                {""BurlyWood"", ""ЦветПлотнойДревесины""},
	|                {""ЦветПлотнойДревесины"", ""BurlyWood""},
	|                {""Navy"", ""ЦветФормыМорскихОфицеров""},
	|                {""ЦветФормыМорскихОфицеров"", ""Navy""},
	|                {""Cyan"", ""Циан""},
	|                {""Циан"", ""Cyan""},
	|                {""Black"", ""Черный""},
	|                {""Черный"", ""Black""},
	|                {""Thistle"", ""Чертополох""},
	|                {""Чертополох"", ""Thistle""},
	|                {""Chartreuse"", ""Шартрез""},
	|                {""Шартрез"", ""Chartreuse""},
	|                {""Chocolate"", ""Шоколадный""},
	|                {""Шоколадный"", ""Chocolate""},
	|                {""Snow"", ""ЯркийБелый""},
	|                {""ЯркийБелый"", ""Snow""},
	|                {""HotPink"", ""ЯркоРозовый""},
	|                {""ЯркоРозовый"", ""HotPink""}
	|            };
	|	
	|        public static Dictionary<string, string> namesEnRu = new Dictionary<string, string>
	|            {
	|                {""RadioButton"", ""Переключатель""},
	|                {""Button"", ""Кнопка""},
	|                {""CheckBox"", ""Флажок""},
	|                {""ColorDialog"", ""ДиалогВыбораЦвета""},
	|                {""ComboBox"", ""ПолеВыбора""},
	|                {""DataGrid"", ""СеткаДанных""},
	|                {""DateTimePicker"", ""ПолеКалендаря""},
	|                {""FileSystemWatcher"", ""НаблюдательФайловойСистемы""},
	|                {""FolderBrowserDialog"", ""ДиалогВыбораКаталога""},
	|                {""FontDialog"", ""ДиалогВыбораШрифта""},
	|                {""GroupBox"", ""РамкаГруппы""},
	|                {""HProgressBar"", ""ИндикаторГоризонтальный""},
	|                {""HScrollBar"", ""ГоризонтальнаяПрокрутка""},
	|                {""ImageList"", ""СписокИзображений""},
	|                {""LinkLabel"", ""НадписьСсылка""},
	|                {""Label"", ""Надпись""},
	|                {""ListBox"", ""ПолеСписка""},
	|                {""ListView"", ""СписокЭлементов""},
	|                {""MainMenu"", ""ГлавноеМеню""},
	|                {""MonthCalendar"", ""Календарь""},
	|                {""NotifyIcon"", ""ЗначокУведомления""},
	|                {""NumericUpDown"", ""РегуляторВверхВниз""},
	|                {""OpenFileDialog"", ""ДиалогОткрытияФайла""},
	|                {""Panel"", ""Панель""},
	|                {""PictureBox"", ""ПолеКартинки""},
	|                {""VProgressBar"", ""ИндикаторВертикальный""},
	|                {""ProgressBar"", ""Индикатор""},
	|                {""PropertyGrid"", ""СеткаСвойств""},
	|                {""RichTextBox"", ""ФорматированноеПолеВвода""},
	|                {""SaveFileDialog"", ""ДиалогСохраненияФайла""},
	|                {""Splitter"", ""Разделитель""},
	|                {""StatusBar"", ""СтрокаСостояния""},
	|                {""TabControl"", ""ПанельВкладок""},
	|                {""TabPage"", ""Вкладка""},
	|                {""TextBox"", ""ПолеВвода""},
	|                {""Timer"", ""Таймер""},
	|                {""ToolBar"", ""ПанельИнструментов""},
	|                {""ToolTip"", ""Подсказка""},
	|                {""TreeView"", ""Дерево""},
	|                {""UserControl"", ""ПользовательскийЭлементУправления""},
	|                {""VScrollBar"", ""ВертикальнаяПрокрутка""}
	|            };
	|
	|        public static Dictionary<string, string> namesRuEn = new Dictionary<string, string>
	|            {
	|                {""Переключатель"", ""RadioButton""},
	|                {""Кнопка"", ""Button""},
	|                {""Флажок"", ""CheckBox""},
	|                {""ДиалогВыбораЦвета"", ""ColorDialog""},
	|                {""ПолеВыбора"", ""ComboBox""},
	|                {""СеткаДанных"", ""DataGrid""},
	|                {""ПолеКалендаря"", ""DateTimePicker""},
	|                {""НаблюдательФайловойСистемы"", ""FileSystemWatcher""},
	|                {""ДиалогВыбораКаталога"", ""FolderBrowserDialog""},
	|                {""ДиалогВыбораШрифта"", ""FontDialog""},
	|                {""РамкаГруппы"", ""GroupBox""},
	|                {""ИндикаторГоризонтальный"", ""HProgressBar""},
	|                {""ГоризонтальнаяПрокрутка"", ""HScrollBar""},
	|                {""СписокИзображений"", ""ImageList""},
	|                {""НадписьСсылка"", ""LinkLabel""},
	|                {""Надпись"", ""Label""},
	|                {""ПолеСписка"", ""ListBox""},
	|                {""СписокЭлементов"", ""ListView""},
	|                {""ГлавноеМеню"", ""MainMenu""},
	|                {""Календарь"", ""MonthCalendar""},
	|                {""ЗначокУведомления"", ""NotifyIcon""},
	|                {""РегуляторВверхВниз"", ""NumericUpDown""},
	|                {""ДиалогОткрытияФайла"", ""OpenFileDialog""},
	|                {""Панель"", ""Panel""},
	|                {""ПолеКартинки"", ""PictureBox""},
	|                {""ИндикаторВертикальный"", ""VProgressBar""},
	|                {""Индикатор"", ""ProgressBar""},
	|                {""СеткаСвойств"", ""PropertyGrid""},
	|                {""ФорматированноеПолеВвода"", ""RichTextBox""},
	|                {""ДиалогСохраненияФайла"", ""SaveFileDialog""},
	|                {""Разделитель"", ""Splitter""},
	|                {""СтрокаСостояния"", ""StatusBar""},
	|                {""ПанельВкладок"", ""TabControl""},
	|                {""Вкладка"", ""TabPage""},
	|                {""ПолеВвода"", ""TextBox""},
	|                {""Таймер"", ""Timer""},
	|                {""ПанельИнструментов"", ""ToolBar""},
	|                {""Подсказка"", ""ToolTip""},
	|                {""Дерево"", ""TreeView""},
	|                {""ПользовательскийЭлементУправления"", ""UserControl""},
	|                {""ВертикальнаяПрокрутка"", ""VScrollBar""}
	|            };
	|
	|        public static Dictionary<string, string> namesEnum = new Dictionary<string, string>
	|            {
	|                {""АвтоРазмерПанелиСтрокиСостояния"", ""StatusBarPanelAutoSize""},
	|                {""АктивацияЭлемента"", ""ItemActivation""},
	|                {""ВыравниваниеВкладок"", ""TabAlignment""},
	|                {""ВыравниваниеВСпискеЭлементов"", ""ListViewAlignment""},
	|                {""ВыравниваниеСодержимого"", ""ContentAlignment""},
	|                {""ВыравниваниеТекстаВПанелиИнструментов"", ""ToolBarTextAlign""},
	|                {""ГлубинаЦвета"", ""ColorDepth""},
	|                {""ГоризонтальноеВыравнивание"", ""HorizontalAlignment""},
	|                {""День"", ""Day""},
	|                {""ДеревоДействие"", ""TreeViewAction""},
	|                {""Звуки"", ""Sounds""},
	|                {""ЗначокОкнаСообщений"", ""MessageBoxIcon""},
	|                {""Клавиши"", ""Keys""},
	|                {""КнопкиМыши"", ""MouseButtons""},
	|                {""КнопкиОкнаСообщений"", ""MessageBoxButtons""},
	|                {""ЛевоеПравоеВыравнивание"", ""LeftRightAlignment""},
	|                {""НаблюдательИзмененияВида"", ""WatcherChangeTypes""},
	|                {""НачальноеПоложениеФормы"", ""FormStartPosition""},
	|                {""ОриентацияПолосы"", ""ScrollOrientation""},
	|                {""ОсобаяПапка"", ""SpecialFolder""},
	|                {""Оформление"", ""Appearance""},
	|                {""ОформлениеВкладок"", ""TabAppearance""},
	|                {""ОформлениеПанелиИнструментов"", ""ToolBarAppearance""},
	|                {""ПлоскийСтиль"", ""FlatStyle""},
	|                {""ПоведениеСсылки"", ""LinkLabelLinkBehavior""},
	|                {""ПозицияПоиска"", ""SeekOrigin""},
	|                {""ПолосыПрокрутки"", ""ScrollBars""},
	|                {""ПорядокСортировки"", ""SortOrder""},
	|                {""ПричинаЗакрытия"", ""CloseReason""},
	|                {""РазмещениеИзображения"", ""ImageLayout""},
	|                {""РегистрСимволов"", ""CharacterCasing""},
	|                {""РежимВыбора"", ""SelectionMode""},
	|                {""РежимОтображения"", ""View""},
	|                {""РежимРазмераВкладок"", ""TabSizeMode""},
	|                {""РежимРазмераПоляКартинки"", ""PictureBoxSizeMode""},
	|                {""РежимРисования"", ""DrawMode""},
	|                {""РезультатДиалога"", ""DialogResult""},
	|                {""СлияниеМеню"", ""MenuMerge""},
	|                {""СортировкаСвойств"", ""PropertySort""},
	|                {""СостояниеОкнаФормы"", ""FormWindowState""},
	|                {""СостояниеСтрокиДанных"", ""DataRowState""},
	|                {""СостояниеФлажка"", ""CheckState""},
	|                {""СочетаниеКлавиш"", ""Shortcut""},
	|                {""СтилиПривязки"", ""AnchorStyles""},
	|                {""СтильГраницы"", ""BorderStyle""},
	|                {""СтильГраницыПанелиСтрокиСостояния"", ""StatusBarPanelBorderStyle""},
	|                {""СтильГраницыФормы"", ""FormBorderStyle""},
	|                {""СтильЗаголовкаКолонки"", ""ColumnHeaderStyle""},
	|                {""СтильКнопокПанелиИнструментов"", ""ToolBarButtonStyle""},
	|                {""СтильОкнаПроцесса"", ""ProcessWindowStyle""},
	|                {""СтильПоляВыбора"", ""ComboBoxStyle""},
	|                {""СтильСтыковки"", ""DockStyle""},
	|                {""СтильШрифта"", ""FontStyle""},
	|                {""СтильШтриховки"", ""HatchStyle""},
	|                {""СтильЭлементаУправления"", ""ControlStyles""},
	|                {""ТипДанных"", ""DataType""},
	|                {""ТипСобытияПрокрутки"", ""ScrollEventType""},
	|                {""ТипСортировки"", ""SortType""},
	|                {""ТипЭлементаСетки"", ""GridItemType""},
	|                {""ФильтрыУведомления"", ""NotifyFilters""},
	|                {""ФлагиМыши"", ""MouseFlags""},
	|                {""ФорматированноеПолеВводаПоиск"", ""RichTextBoxFinds""},
	|                {""ФорматированноеПолеВводаТипыПотоков"", ""RichTextBoxStreamType""},
	|                {""ФорматПикселей"", ""PixelFormat""}
	|            };
	|
	|        public static Dictionary<string, Cursor> namesCursorRuEn = new Dictionary<string, Cursor>
	|            {
	|                {""БезДвижения2D"", Cursors.NoMove2D},
	|                {""БезДвиженияВертикально"", Cursors.NoMoveVert},
	|                {""БезДвиженияГоризонтально"", Cursors.NoMoveHoriz},
	|                {""ВРазделитель"", Cursors.VSplit},
	|                {""ГРазделитель"", Cursors.HSplit},
	|                {""КурсорВ"", Cursors.PanEast},
	|                {""КурсорЗ"", Cursors.PanWest},
	|                {""КурсорОжидания"", Cursors.WaitCursor},
	|                {""КурсорС"", Cursors.PanNorth},
	|                {""КурсорСВ"", Cursors.PanNE},
	|                {""КурсорСЗ"", Cursors.PanNW},
	|                {""КурсорЮ"", Cursors.PanSouth},
	|                {""КурсорЮВ"", Cursors.PanSE},
	|                {""КурсорЮЗ"", Cursors.PanSW},
	|                {""Ладонь"", Cursors.Hand},
	|                {""Луч"", Cursors.IBeam},
	|                {""Нет"", Cursors.No},
	|                {""Перекрестие"", Cursors.Cross},
	|                {""ПоУмолчанию"", Cursors.Default},
	|                {""ПриСтарте"", Cursors.AppStarting},
	|                {""РазмерЗВ"", Cursors.SizeWE},
	|                {""РазмерСВЮЗ"", Cursors.SizeNESW},
	|                {""РазмерСЗЮВ"", Cursors.SizeNWSE},
	|                {""РазмерСЮ"", Cursors.SizeNS},
	|                {""РазмерЧетырехконечный"", Cursors.SizeAll},
	|                {""Справка"", Cursors.Help},
	|                {""Стрелка"", Cursors.Arrow},
	|                {""СтрелкаВверх"", Cursors.UpArrow}
	|            };
	|
	|        public static Dictionary<string, string> namesCursorEnRu = new Dictionary<string, string>
	|            {
	|                {""NoMove2D"", ""БезДвижения2D""},
	|                {""NoMoveVert"", ""БезДвиженияВертикально""},
	|                {""NoMoveHoriz"", ""БезДвиженияГоризонтально""},
	|                {""VSplit"", ""ВРазделитель""},
	|                {""HSplit"", ""ГРазделитель""},
	|                {""PanEast"", ""КурсорВ""},
	|                {""PanWest"", ""КурсорЗ""},
	|                {""WaitCursor"", ""КурсорОжидания""},
	|                {""PanNorth"", ""КурсорС""},
	|                {""PanNE"", ""КурсорСВ""},
	|                {""PanNW"", ""КурсорСЗ""},
	|                {""PanSouth"", ""КурсорЮ""},
	|                {""PanSE"", ""КурсорЮВ""},
	|                {""PanSW"", ""КурсорЮЗ""},
	|                {""Hand"", ""Ладонь""},
	|                {""IBeam"", ""Луч""},
	|                {""No"", ""Нет""},
	|                {""Cross"", ""Перекрестие""},
	|                {""Default"", ""ПоУмолчанию""},
	|                {""AppStarting"", ""ПриСтарте""},
	|                {""SizeWE"", ""РазмерЗВ""},
	|                {""SizeNESW"", ""РазмерСВЮЗ""},
	|                {""SizeNWSE"", ""РазмерСЗЮВ""},
	|                {""SizeNS"", ""РазмерСЮ""},
	|                {""SizeAll"", ""РазмерЧетырехконечный""},
	|                {""Help"", ""Справка""},
	|                {""Arrow"", ""Стрелка""},
	|                {""UpArrow"", ""СтрелкаВверх""}
	|            };
	|
	|        public static ArrayList StrFindBetween(string p1, string p2 = null, string p3 = null, bool p4 = true, bool p5 = true)
	|        {
	|            // p1 - исходная строка.
	|            // p2 - подстрока поиска от которой ведем поиск.
	|            // p3 - подстрока поиска до которой ведем поиск.
	|            // p4 - не включать p2 и p3 в результат.
	|            // p5 - в результат не будут включены участки, содержащие другие найденные участки, удовлетворяющие переданным параметрам.
	|            // Возвращает массив строк.
	|            string str1 = p1;
	|            int Position1;
	|            ArrayList ArrayList1 = new ArrayList();
	|            if (p2 != null && p3 == null)
	|            {
	|                Position1 = str1.IndexOf(p2);
	|                while (Position1 >= 0)
	|                {
	|                    ArrayList1.Add("""" + ((p4) ? str1.Substring(Position1 + p2.Length) : str1.Substring(Position1)));
	|                    str1 = str1.Substring(Position1 + 1);
	|                    Position1 = str1.IndexOf(p2);
	|                }
	|            }
	|            else if (p2 == null && p3 != null)
	|            {
	|                Position1 = str1.IndexOf(p3) + 1;
	|                int SumPosition1 = Position1;
	|                while (Position1 > 0)
	|                {
	|                    ArrayList1.Add("""" + ((p4) ? str1.Substring(0, SumPosition1 - 1) : str1.Substring(0, SumPosition1 - 1 + p3.Length)));
	|                    try
	|                    {
	|                        Position1 = str1.Substring(SumPosition1 + 1).IndexOf(p3) + 1;
	|                        SumPosition1 = SumPosition1 + Position1 + 1;
	|                    }
	|                    catch
	|                    {
	|                        break;
	|                    }
	|                }
	|            }
	|            else if (p2 != null && p3 != null)
	|            {
	|                Position1 = str1.IndexOf(p2);
	|                while (Position1 >= 0)
	|                {
	|                    string Стр2;
	|                    Стр2 = (p4) ? str1.Substring(Position1 + p2.Length) : str1.Substring(Position1);
	|                    int Position2 = Стр2.IndexOf(p3) + 1;
	|                    int SumPosition2 = Position2;
	|                    while (Position2 > 0)
	|                    {
	|                        if (p5)
	|                        {
	|                            if (Стр2.Substring(0, SumPosition2 - 1).IndexOf(p3) <= -1)
	|                            {
	|                                ArrayList1.Add("""" + ((p4) ? Стр2.Substring(0, SumPosition2 - 1) : Стр2.Substring(0, SumPosition2 - 1 + p3.Length)));
	|                            }
	|                        }
	|                        else
	|                        {
	|                            ArrayList1.Add("""" + ((p4) ? Стр2.Substring(0, SumPosition2 - 1) : Стр2.Substring(0, SumPosition2 - 1 + p3.Length)));
	|                        }
	|                        try
	|                        {
	|                            Position2 = Стр2.Substring(SumPosition2 + 1).IndexOf(p3) + 1;
	|                            SumPosition2 = SumPosition2 + Position2 + 1;
	|                        }
	|                        catch
	|                        {
	|                            break;
	|                        }
	|                    }
	|                    str1 = str1.Substring(Position1 + 1);
	|                    Position1 = str1.IndexOf(p2);
	|                }
	|            }
	|            return ArrayList1;
	|        }
	|	
	|        public static Image Base64ToImage(string base64String)
	|        {
	|            byte[] imageBytes = Convert.FromBase64String(base64String);
	|            using (var ms = new MemoryStream(imageBytes, 0, imageBytes.Length))
	|            {
	|                Image image = Image.FromStream(ms, true);
	|                return image;
	|            }
	|        }
	|	
	|        public static string ParseBetween(string p1, string p2 = null, string p3 = null)
	|        {
	|            // p1 - исходная строка.
	|            // p2 - подстрока поиска от которой ведем поиск.
	|            // p3 - подстрока поиска до которой ведем поиск.
	|            // Возвращает строку, ограниченную p2 и p3.
	|            string str1 = p1;
	|            int Position1;
	|            if (p2 != null && p3 == null)
	|            {
	|                Position1 = str1.IndexOf(p2);
	|                if (Position1 >= 0)
	|                {
	|                    return str1.Substring(Position1 + p2.Length);
	|                }
	|            }
	|            else if (p2 == null && p3 != null)
	|            {
	|                Position1 = str1.IndexOf(p3) + 1;
	|                if (Position1 > 0)
	|                {
	|                    return str1.Substring(0, Position1 - 1);
	|                }
	|            }
	|            else if (p2 != null && p3 != null)
	|            {
	|                Position1 = str1.IndexOf(p2);
	|                while (Position1 >= 0)
	|                {
	|                    string Стр2;
	|                    Стр2 = str1.Substring(Position1 + p2.Length);
	|                    int Position2 = Стр2.IndexOf(p3) + 1;
	|                    int SumPosition2 = Position2;
	|                    while (Position2 > 0)
	|                    {
	|                        if (Стр2.Substring(0, SumPosition2 - 1).IndexOf(p3) <= -1)
	|                        {
	|                            return Стр2.Substring(0, SumPosition2 - 1);
	|                        }
	|                        try
	|                        {
	|                            Position2 = Стр2.Substring(SumPosition2 + 1).IndexOf(p3) + 1;
	|                            SumPosition2 = SumPosition2 + Position2 + 1;
	|                        }
	|                        catch
	|                        {
	|                            break;
	|                        }
	|                    }
	|                    str1 = str1.Substring(Position1 + 1);
	|                    Position1 = str1.IndexOf(p2);
	|                }
	|            }
	|            return null;
	|        }
	|
	|        public static Component HighlightedComponent()
	|        {
	|            // Возвращает выделенный в настоящее время компонент.
	|            IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|            ISelectionService iSel = host.GetService(typeof(ISelectionService)) as ISelectionService;
	|            Component comp = null;
	|            if (iSel != null)
	|            {
	|                return (Component)iSel.PrimarySelection;
	|            }
	|            return comp;
	|        }
	|
	|        public static Component GetComponentByName(string name)
	|        {
	|            // Возвращает компонент найденный по имени.
	|            Component comp = null;
	|
	|            IDesignerHost host = pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost();
	|            ISelectionService iSel = host.GetService(typeof(ISelectionService)) as ISelectionService;
	|            if (iSel != null)
	|            {
	|                ComponentCollection ctrlsExisting = host.Container.Components;
	|                for (int i = 0; i < ctrlsExisting.Count; i++)
	|                {
	|                    if (ctrlsExisting[i].Site.Name == name)
	|                    {
	|                        return (Component)ctrlsExisting[i];
	|                    }
	|                }
	|            }
	|            return comp;
	|        }
	|
	|        public static string GetNameByComponent(Component comp)
	|        {
	|            // Возвращает имя для компонента.
	|            Component comp1 = comp;
	|
	|            if (comp.GetType().ToString() == ""System.Windows.Forms.TabPage"" || 
	|                comp.GetType().ToString() == ""System.Windows.Forms.ImageList"" || 
	|                comp.GetType().ToString() == ""System.Windows.Forms.MainMenu"")
	|            {
	|                comp1 = RevertSimilarObj(comp);
	|            }
	|            return comp1.Site.Name;
	|        }
	|
	|        public Form GetRootComponent()
	|        {
	|            return (Form)pDesigner.DSME.ActiveDesignSurface.GetIDesignerHost().Container.Components[0];
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\OneScriptFormsDesigner.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.Collections;
	|
	|namespace osfDesigner
	|{
	|    public class MyList : IList, IList<ImageEntry>
	|    {
	|        List<ImageEntry> _list = new List<ImageEntry>();
	|
	|        public ImageEntry this[int index]
	|        {
	|            get { return ((IList<ImageEntry>)_list)[index]; }
	|            set { ((IList<ImageEntry>)_list)[index] = value; }
	|        }
	|
	|        object IList.this[int index]
	|        {
	|            get { return ((IList)_list)[index]; }
	|            set { ((IList)_list)[index] = value; }
	|        }
	|
	|        public int Count
	|        {
	|            get { return ((IList<ImageEntry>)_list).Count; }
	|        }
	|
	|        public bool IsFixedSize
	|        {
	|            get { return ((IList)_list).IsFixedSize; }
	|        }
	|
	|        public bool IsReadOnly
	|        {
	|            get { return ((IList<ImageEntry>)_list).IsReadOnly; }
	|        }
	|
	|        public bool IsSynchronized
	|        {
	|            get { return ((IList)_list).IsSynchronized; }
	|        }
	|
	|        public object SyncRoot
	|        {
	|            get { return ((IList)_list).SyncRoot; }
	|        }
	|
	|        public int Add(object value)
	|        {
	|            return ((IList)_list).Add(value);
	|        }
	|
	|        public void Add(ImageEntry item)
	|        {
	|            ((IList<ImageEntry>)_list).Add(item);
	|        }
	|
	|        public void Clear()
	|        {
	|            ((IList<ImageEntry>)_list).Clear();
	|        }
	|
	|        public bool Contains(object value)
	|        {
	|            return ((IList)_list).Contains(value);
	|        }
	|
	|        public bool Contains(ImageEntry item)
	|        {
	|            return ((IList<ImageEntry>)_list).Contains(item);
	|        }
	|
	|        public void CopyTo(Array array, int index)
	|        {
	|            ((IList)_list).CopyTo(array, index);
	|        }
	|
	|        public void CopyTo(ImageEntry[] array, int arrayIndex)
	|        {
	|            ((IList<ImageEntry>)_list).CopyTo(array, arrayIndex);
	|        }
	|
	|        public IEnumerator<ImageEntry> GetEnumerator()
	|        {
	|            return ((IList<ImageEntry>)_list).GetEnumerator();
	|        }
	|
	|        public int IndexOf(object value)
	|        {
	|            return ((IList)_list).IndexOf(value);
	|        }
	|
	|        public int IndexOf(ImageEntry item)
	|        {
	|            return ((IList<ImageEntry>)_list).IndexOf(item);
	|        }
	|
	|        public void Insert(int index, object value)
	|        {
	|            ((IList)_list).Insert(index, value);
	|        }
	|
	|        public void Insert(int index, ImageEntry item)
	|        {
	|            ((IList<ImageEntry>)_list).Insert(index, item);
	|        }
	|
	|        public void Remove(object value)
	|        {
	|            ((IList)_list).Remove(value);
	|        }
	|
	|        public bool Remove(ImageEntry item)
	|        {
	|            return ((IList<ImageEntry>)_list).Remove(item);
	|        }
	|
	|        public void RemoveAt(int index)
	|        {
	|            ((IList<ImageEntry>)_list).RemoveAt(index);
	|        }
	|
	|        IEnumerator IEnumerable.GetEnumerator()
	|        {
	|            return ((IList)_list).GetEnumerator();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyList.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Drawing.Design;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    [DesignTimeVisible(false)]
	|    public class ImageEntry : Component
	|    {
	|        public System.Drawing.Image M_Bitmap;
	|
	|        public ImageEntry()
	|        {
	|        }
	|
	|        [DefaultValue(typeof(System.Drawing.Image), null)]
	|        [DisplayName(""Изображение"")]
	|        [Description(""Возвращает изображение."")]
	|        [Category(""Внешний вид"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MyImageConverter))]
	|        [Editor(typeof(MyImageFileNameEditor), typeof(UITypeEditor))]
	|        [ReadOnly(true)]
	|        public System.Drawing.Image Image
	|        {
	|            get { return M_Bitmap; }
	|            set { M_Bitmap = value; }
	|        }
	|
	|        [DisplayName(""Путь"")]
	|        [Description(""Путь до файла изображения."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        [DefaultValue(typeof(String), null)]
	|        [ReadOnly(true)]
	|        public string Path { get; set; }
	|
	|        [Browsable(false)]
	|        public string FileName { get; set; }
	|
	|
	|        [DisplayName(""ФорматФайлаИзображения"")]
	|        [Description(""Возвращает объект ФорматИзображения (ImageFormat), представляющий формат этого объекта изображения."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        public System.Drawing.Imaging.ImageFormat RawFormat
	|        {
	|            get { return M_Bitmap.RawFormat; }
	|        }
	|
	|        [DisplayName(""ФорматПикселей"")]
	|        [Description(""Возвращает формат пикселей для этого объекта Изображение (Image)."")]
	|        [Category(""Прочее"")]
	|        [Browsable(true)]
	|        public System.Drawing.Imaging.PixelFormat PixelFormat
	|        {
	|            get { return M_Bitmap.PixelFormat; }
	|        }
	|
	|        [DisplayName(""Размер"")]
	|        [Description(""Возвращает ширину и высоту объекта."")]
	|        [Category(""Макет"")]
	|        [Browsable(true)]
	|        [TypeConverter(typeof(MySizeConverter))]
	|        [Editor(typeof(MySizeEditor), typeof(UITypeEditor))]
	|        public Size Size
	|        {
	|            get { return M_Bitmap.Size; }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\ImageEntry.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel;
	|using System.ComponentModel.Design;
	|using System.Reflection;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyCollectionEditor : CollectionEditor
	|    {
	|        private System.ComponentModel.Design.CollectionEditor.CollectionForm collectionForm;
	|        private System.Windows.Forms.Form frmCollectionEditorForm;
	|        private System.Windows.Forms.TableLayoutPanel TableLayoutPanel1;
	|        private System.Windows.Forms.TableLayoutPanel AddRemoveTableLayoutPanel1;
	|        private System.Windows.Forms.Label PropertiesLabel1 = null;
	|        private System.Windows.Forms.Label MembersLabel1 = null;
	|        private System.Windows.Forms.ListBox ListBox1;
	|        private System.Windows.Forms.PropertyGrid PropertyGrid1;
	|        private System.Windows.Forms.TableLayoutPanel OkCancelTableLayoutPanel1;
	|        private System.Windows.Forms.Button ButtonOk1 = null;
	|        private System.Windows.Forms.Button ButtonCancel1 = null;
	|        private System.Windows.Forms.Button ButtonAdd1 = null;
	|        private System.Windows.Forms.Button ButtonRemove1 = null;
	|        private System.Windows.Forms.Button ButtonUp1 = null;
	|        private System.Windows.Forms.Button ButtonDown1 = null;
	|
	|        // Унаследуйте конструктор по умолчанию из стандартного редактора коллекций.
	|        public MyCollectionEditor(Type type) : base(type)
	|        {
	|        }
	|
	|        // Переопределите этот метод, чтобы получить доступ к форме редактора коллекции. 
	|        protected override CollectionForm CreateCollectionForm()
	|        {
	|            // Получение макета редактора коллекции по умолчанию.
	|            collectionForm = base.CreateCollectionForm();
	|            collectionForm.Text = ""Редактор коллекции Изображения"";
	|            collectionForm.Shown += CollectionForm_Shown;
	|
	|            frmCollectionEditorForm = (System.Windows.Forms.Form)collectionForm;
	|            TableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)frmCollectionEditorForm.Controls[0];
	|            if (TableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < TableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonDown1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[0];
	|                        ButtonDown1.Click += ButtonDown1_Click;
	|                    }
	|                    if (i == 1)
	|                    {
	|                        AddRemoveTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[1];
	|                    }
	|                    if (i == 2)
	|                    {
	|                        PropertiesLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[2];
	|                        PropertiesLabel1.Text = ""Свойства:"";
	|                    }
	|                    if (i == 3)
	|                    {
	|                        MembersLabel1 = (System.Windows.Forms.Label)TableLayoutPanel1.Controls[3];
	|                        MembersLabel1.Text = ""Члены:"";
	|                    }
	|
	|                    if (i == 4)
	|                    {
	|                        ListBox1 = (System.Windows.Forms.ListBox)TableLayoutPanel1.Controls[4];
	|                        ListBox1.DrawItem += ListBox1_DrawItem;
	|                        ListBox1.SelectedIndexChanged += ListBox1_SelectedIndexChanged;
	|                    }
	|                    // Получите ссылку на внутреннюю сетку свойств и подключите к ней обработчик событий.
	|                    if (i == 5)
	|                    {
	|                        PropertyGrid1 = (System.Windows.Forms.PropertyGrid)TableLayoutPanel1.Controls[5];
	|                        PropertyGrid1.SelectedGridItemChanged += PropertyGrid1_SelectedGridItemChanged;
	|                        PropertyGrid1.PropertyValueChanged += PropertyGrid1_PropertyValueChanged;
	|
	|                        // Также сделайте доступным окно с подсказками по параметрам в нижней части.
	|                        PropertyGrid1.HelpVisible = true;
	|                        PropertyGrid1.HelpBackColor = SystemColors.Info;
	|                    }
	|                    if (i == 6)
	|                    {
	|                        OkCancelTableLayoutPanel1 = (System.Windows.Forms.TableLayoutPanel)TableLayoutPanel1.Controls[6];
	|                    }
	|                    if (i == 7)
	|                    {
	|                        ButtonUp1 = (System.Windows.Forms.Button)TableLayoutPanel1.Controls[7];
	|                        ButtonUp1.Click += ButtonUp1_Click;
	|                    }
	|                }
	|            }
	|            if (AddRemoveTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < AddRemoveTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonAdd1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[0];
	|                        ButtonAdd1.Click += ButtonAdd1_Click;
	|                        ButtonAdd1.Text = ""Добавить"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonRemove1 = (System.Windows.Forms.Button)AddRemoveTableLayoutPanel1.Controls[1];
	|                        ButtonRemove1.Click += ButtonRemove1_Click;
	|                        ButtonRemove1.Text = ""Удалить"";
	|                    }
	|                }
	|            }
	|            if (OkCancelTableLayoutPanel1 != null)
	|            {
	|                for (int i = 0; i < OkCancelTableLayoutPanel1.Controls.Count; i++)
	|                {
	|                    if (i == 0)
	|                    {
	|                        ButtonOk1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[0];
	|                        ButtonOk1.Text = ""ОК"";
	|                    }
	|                    if (i == 1)
	|                    {
	|                        ButtonCancel1 = (System.Windows.Forms.Button)OkCancelTableLayoutPanel1.Controls[1];
	|                        ButtonCancel1.Text = ""Отмена"";
	|                    }
	|                }
	|            }
	|
	|            return collectionForm;
	|        }
	|
	|        private void CollectionForm_Shown(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ListBox1_SelectedIndexChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void PropertyGrid1_SelectedGridItemChanged(object sender, SelectedGridItemChangedEventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonRemove1_Click(object sender, EventArgs e)
	|        {
	|            ImageList ImageList1 = (ImageList)this.Context.Instance;
	|            MyList MyList1 = ImageList1.Images;
	|            ImageList1.Images.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyList1 });
	|        }
	|
	|        private void ButtonDown1_Click(object sender, EventArgs e)
	|        {
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            ImageList ImageList1 = (ImageList)this.Context.Instance;
	|            MyList MyList1 = ImageList1.Images;
	|            ImageList1.Images.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyList1 });
	|            ListBox1.SelectedItem = SelectedItem1;
	|            if (ListBox1.SelectedIndex != (ListBox1.Items.Count - 1))
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonUp1_Click(object sender, EventArgs e)
	|        {
	|            object SelectedItem1 = ListBox1.SelectedItem;
	|            ImageList ImageList1 = (ImageList)this.Context.Instance;
	|            MyList MyList1 = ImageList1.Images;
	|            ImageList1.Images.Clear();
	|            MethodInfo MethodInfo3 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|            MethodInfo3.Invoke(collectionForm, new object[] { MyList1 });
	|            ListBox1.SelectedItem = SelectedItem1;
	|            if (ListBox1.SelectedIndex != (ListBox1.Items.Count - 1))
	|            {
	|                ListBox1.SetSelected(ListBox1.Items.Count - 1, false);
	|            }
	|        }
	|
	|        void PropertyGrid1_PropertyValueChanged(object sender, PropertyValueChangedEventArgs e)
	|        {
	|        }
	|
	|        private void PropertyGrid_SelectedObjectsChanged(object sender, EventArgs e)
	|        {
	|            PropertiesLabel1.Text = ""Свойства:"";
	|        }
	|
	|        private void ButtonAdd1_Click(object sender, EventArgs e)
	|        {
	|            MethodInfo MethodInfo1 = collectionForm.GetType().GetMethod(""PerformRemove"", BindingFlags.NonPublic | BindingFlags.Instance);
	|
	|            if (ListBox1.Items.Count > 0)
	|            {
	|                MethodInfo1.Invoke(collectionForm, new object[] { });
	|            }
	|            System.Windows.Forms.OpenFileDialog OpenFileDialog1 = new System.Windows.Forms.OpenFileDialog();
	|            OpenFileDialog1.Filter = ""Файлы изображений (*.BMP;*.jpg;*.GIF)|*.BMP;*.jpg;*.GIF; *.ICO"";
	|            OpenFileDialog1.Multiselect = true;
	|            if (OpenFileDialog1.ShowDialog() == System.Windows.Forms.DialogResult.Cancel)
	|            {
	|                return;
	|            }
	|            else
	|            {
	|                MyList MyList1 = new MyList();
	|                osfDesigner.ImageList ImageList1 = (ImageList)this.Context.Instance;
	|                System.Windows.Forms.ImageList.ImageCollection ImageCollection1 = ImageList1.OriginalObj.Images;
	|
	|                for (int i = 0; i < OpenFileDialog1.FileNames.Length; i++)
	|                {
	|                    ImageEntry ImageEntry1 = new ImageEntry();
	|                    ImageEntry1.Image = new Bitmap("""" + OpenFileDialog1.FileNames[i]);
	|                    ImageEntry1.Path = OpenFileDialog1.FileNames[i];
	|                    ImageEntry1.FileName = OpenFileDialog1.SafeFileNames[i];
	|                    MyList1.Add(ImageEntry1);
	|                    ImageCollection1.Add(ImageEntry1.Image);
	|                }
	|                MethodInfo MethodInfo2 = collectionForm.GetType().GetMethod(""AddItems"", BindingFlags.NonPublic | BindingFlags.Instance);
	|                MethodInfo2.Invoke(collectionForm, new object[] { MyList1 });
	|            }
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            if (e.Index != -1)
	|            {
	|                ListItem ListItem1 = new ListItem(ListBox1.Items[e.Index]);
	|                string FileName = """";
	|                try
	|                {
	|                    ImageEntry ImageEntry1 = ((ImageList)this.Context.Instance).Images[e.Index];
	|                    ListItem1.Value = ImageEntry1.M_Bitmap;
	|                    FileName = ImageEntry1.FileName;
	|                }
	|                catch { }
	|                Graphics Graphics1 = e.Graphics;
	|
	|                int Count1 = ListBox1.Items.Count;
	|                int maxCount1;
	|                if (Count1 > 1)
	|                {
	|                    maxCount1 = Count1 - 1;
	|                }
	|                else
	|                {
	|                    maxCount1 = Count1;
	|                }
	|                SizeF sizeW = Graphics1.MeasureString(maxCount1.ToString(CultureInfo.CurrentCulture), ListBox1.Font);
	|
	|                int charactersInNumber = ((int)(Math.Log(maxCount1) / Math.Log(10)) + 1);
	|                int w = 4 + charactersInNumber * (ListBox1.Font.Height / 2);
	|
	|                w = Math.Max(w, (int)Math.Ceiling(sizeW.Width));
	|                w += SystemInformation.BorderSize.Width * 4;
	|
	|                Rectangle button = new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height);
	|
	|                ControlPaint.DrawButton(Graphics1, button, ButtonState.Normal);
	|                button.Inflate(-SystemInformation.BorderSize.Width * 2, -SystemInformation.BorderSize.Height * 2);
	|
	|                int offset = w;
	|
	|                Color backColor = SystemColors.Window;
	|                Color textColor = SystemColors.WindowText;
	|                if ((e.State & DrawItemState.Selected) == DrawItemState.Selected)
	|                {
	|                    backColor = SystemColors.Highlight;
	|                    textColor = SystemColors.HighlightText;
	|                }
	|
	|                Rectangle res = new Rectangle(e.Bounds.X + offset, 
	|                                            e.Bounds.Y,
	|                                            e.Bounds.Width - offset,
	|                                            e.Bounds.Height);
	|                Graphics1.FillRectangle(new SolidBrush(backColor), res);
	|                if ((e.State & DrawItemState.Focus) == DrawItemState.Focus)
	|                {
	|                    ControlPaint.DrawFocusRectangle(Graphics1, res);
	|                }
	|
	|                offset += 2;
	|
	|                if (this != null && this.GetPaintValueSupported())
	|                {
	|                    Rectangle Rectangle2 = new Rectangle(e.Bounds.X + offset, e.Bounds.Y + 1, 20, e.Bounds.Height - 3);
	|                    Graphics1.DrawRectangle(SystemPens.ControlText, 
	|                        Rectangle2.X, 
	|                        Rectangle2.Y, 
	|                        Rectangle2.Width - 1, 
	|                        Rectangle2.Height - 1);
	|                    Rectangle2.Inflate(-1, -1);
	|
	|                    PaintValueEventArgs PaintValueEventArgs1 = new PaintValueEventArgs(this.Context, ListItem1.Value, Graphics1, Rectangle2);
	|                    this.PaintValue(PaintValueEventArgs1);
	|                    offset += 26 + 1;
	|                }
	|
	|                StringFormat StringFormat1 = new StringFormat();
	|                try
	|                {
	|                    StringFormat1.Alignment = StringAlignment.Center;
	|                    Graphics1.DrawString(e.Index.ToString(CultureInfo.CurrentCulture), 
	|                        ListBox1.Font, 
	|                        SystemBrushes.ControlText, 
	|                        new Rectangle(e.Bounds.X, e.Bounds.Y, w, e.Bounds.Height),
	|                        StringFormat1);
	|                }
	|                finally
	|                {
	|                    StringFormat1?.Dispose();
	|                }
	|
	|                Brush textBrush = new SolidBrush(textColor);
	|                string itemText = FileName;
	|                try
	|                {
	|                    Graphics1.DrawString(itemText, 
	|                        ListBox1.Font, 
	|                        textBrush, 
	|                        new Rectangle(e.Bounds.X + offset, e.Bounds.Y, e.Bounds.Width - offset, e.Bounds.Height));
	|                }
	|
	|                finally
	|                {
	|                    textBrush?.Dispose();
	|                }
	|
	|                // Проверьте, нужно ли нам изменять горизонтальный экстент списка.
	|                int width = offset + (int)Graphics1.MeasureString(itemText, ListBox1.Font).Width;
	|                if (width > e.Bounds.Width && ListBox1.HorizontalExtent < width)
	|                {
	|                    ListBox1.HorizontalExtent = width;
	|                }
	|            }
	|        }
	|
	|        public override bool GetPaintValueSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|
	|        public override void PaintValue(PaintValueEventArgs e)
	|        {
	|            try
	|            {
	|                if (e == null || e.Value == null)
	|                {
	|                    return;
	|                }
	|                System.Drawing.Image Image1 = (System.Drawing.Image)e.Value;
	|                if (Image1 == null)
	|                {
	|                    return;
	|                }
	|                if (Image1 != null)
	|                {
	|                    Rectangle Rectangle1 = e.Bounds;
	|                    Rectangle1.Width--;
	|                    Rectangle1.Height--;
	|                    e.Graphics.DrawRectangle(SystemPens.WindowFrame, Rectangle1);
	|                    e.Graphics.DrawImage(Image1, e.Bounds);
	|                }
	|            }
	|            catch { }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyCollectionEditor.cs");
	
	СтрВыгрузки = 
	"using System.Collections.Generic;
	|using System.Windows.Forms;
	|
	|namespace osfDesigner
	|{
	|    public static class PropertyGridExtensions
	|    {
	|        public static IEnumerable<GridItem> EnumerateAllItems(this System.Windows.Forms.PropertyGrid grid)
	|        {
	|            if (grid == null)
	|                yield break;
	|
	|            GridItem start = grid.SelectedGridItem;
	|            while (start.Parent != null)
	|            {
	|                start = start.Parent;
	|            }
	|
	|            foreach (GridItem item in start.EnumerateAllItems())
	|            {
	|                yield return item;
	|            }
	|        }
	|
	|        public static IEnumerable<GridItem> EnumerateAllItems(this GridItem item)
	|        {
	|            if (item == null)
	|                yield break;
	|
	|            yield return item;
	|            foreach (GridItem child in item.GridItems)
	|            {
	|                foreach (GridItem gc in child.EnumerateAllItems())
	|                {
	|                    yield return gc;
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\PropertyGridExtensions.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.Runtime.CompilerServices;
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    public class MySizeConverter : TypeConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                string str1 = value.ToString();
	|                str1 = str1.Replace(""Width"", ""Ширина"");
	|                str1 = str1.Replace(""Height"", ""Высота"");
	|
	|                return str1;
	|            }
	|            return base.ConvertTo(context, cultureInfo, RuntimeHelpers.GetObjectValue(value), destinationType);
	|        }
	|	
	|        public new static string ConvertToString(object value)
	|        {
	|            string str1 = value.ToString();
	|            str1 = str1.Replace(""Width"", ""Ширина"");
	|            str1 = str1.Replace(""Height"", ""Высота"");
	|
	|            return str1;
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            if (destinationType.Equals(typeof(string)))
	|            {
	|                return true;
	|            }
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo cultureInfo, object value)
	|        {
	|            if (!(value is string))
	|            {
	|                return base.ConvertFrom(context, cultureInfo, RuntimeHelpers.GetObjectValue(value));
	|            }
	|
	|            string[] stringSeparators = new string[] { "", "" };
	|            string[] result = Convert.ToString(value).Split(stringSeparators, StringSplitOptions.None);
	|            string _Width = result[0];
	|            _Width = _Width.Replace(""{Ширина="", """");
	|            string _Height = result[1];
	|            _Height = _Height.Replace(""Высота="", """");
	|            _Height = _Height.Replace(""}"", """");
	|            Size Size1 = new Size(Convert.ToInt32(_Width), Convert.ToInt32(_Height));
	|
	|            return Size1;
	|        }
	|
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            return true;
	|        }
	|
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MySizeConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class MyAnchorEditor : UITypeEditor
	|    {
	|        AnchorEditor editor;
	|
	|        public MyAnchorEditor()
	|        {
	|            editor = new AnchorEditor();
	|        }
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            Type anchorUiType = typeof(AnchorEditor).GetNestedType(""AnchorUI"", BindingFlags.NonPublic);
	|            var anchorUiConstructor = anchorUiType.GetConstructors()[0];
	|            var anchorUiField = typeof(AnchorEditor).GetField(""anchorUI"", BindingFlags.Instance | BindingFlags.NonPublic);
	|            var anchorUiObject = anchorUiConstructor.Invoke(new[] { editor }) as Control;
	|            anchorUiField.SetValue(editor, anchorUiObject);
	|
	|            return editor.EditValue(context, provider, value);
	|        }
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return editor.GetEditStyle(context);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyAnchorEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel; 
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class MyDockEditor : UITypeEditor
	|    {
	|        DockEditor editor;
	|        public MyDockEditor()
	|        {
	|            editor = new DockEditor();
	|        }
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            Type dockUiType = typeof(DockEditor).GetNestedType(""DockUI"", BindingFlags.NonPublic);
	|            var dockUiConstructor = dockUiType.GetConstructors()[0];
	|            var dockUiField = typeof(DockEditor).GetField(""dockUI"", BindingFlags.Instance | BindingFlags.NonPublic);
	|            var dockUiObject = dockUiConstructor.Invoke(new[] { editor }) as Control;
	|            dockUiField.SetValue(editor, dockUiObject);
	|            System.Windows.Forms.Control ContainerPlaceholder = dockUiObject.Controls[0];
	|            System.Windows.Forms.CheckBox CheckBox0 = (System.Windows.Forms.CheckBox)dockUiObject.Controls[1];
	|            System.Windows.Forms.CheckBox CheckBox1 = (System.Windows.Forms.CheckBox)ContainerPlaceholder.Controls[3];
	|            System.Windows.Forms.CheckBox CheckBox2 = (System.Windows.Forms.CheckBox)ContainerPlaceholder.Controls[4];
	|            System.Windows.Forms.CheckBox CheckBox3 = (System.Windows.Forms.CheckBox)ContainerPlaceholder.Controls[1];
	|            System.Windows.Forms.CheckBox CheckBox4 = (System.Windows.Forms.CheckBox)ContainerPlaceholder.Controls[2];
	|            System.Windows.Forms.CheckBox CheckBox5 = (System.Windows.Forms.CheckBox)ContainerPlaceholder.Controls[0];
	|            var none = dockUiObject.Controls[1];
	|            none.Text = ""Отсутствие"";
	|
	|            if ((int)value == 1) // верх
	|            {
	|                CheckBox1.Checked = true;
	|            }
	|            else if ((int)value == 2) // низ
	|            {
	|                CheckBox2.Checked = true;
	|            }
	|            else if ((int)value == 3) // лево
	|            {
	|                CheckBox3.Checked = true;
	|            }
	|            else if ((int)value == 4) // право
	|            {
	|                CheckBox4.Checked = true;
	|            }
	|            else if ((int)value == 5) // заполнение
	|            {
	|                CheckBox5.Checked = true;
	|            }
	|            else // отсутствие
	|            {
	|                CheckBox0.Checked = true;
	|            }
	|
	|            return editor.EditValue(context, provider, value);
	|        }
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return editor.GetEditStyle(context);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyDockEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.ComponentModel;
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class MyContentAlignmentEditor : UITypeEditor
	|    {
	|        ContentAlignmentEditor editor;
	|        public MyContentAlignmentEditor()
	|        {
	|            editor = new ContentAlignmentEditor();
	|        }
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            Type contentUiType = typeof(ContentAlignmentEditor).GetNestedType(""ContentUI"", BindingFlags.NonPublic);
	|            var contentUiConstructor = contentUiType.GetConstructors()[0];
	|            var contentUiField = typeof(ContentAlignmentEditor).GetField(""contentUI"", BindingFlags.Instance | BindingFlags.NonPublic);
	|            object[] args = new object[0];
	|            var contentUiObject = contentUiConstructor.Invoke(args) as Control;
	|            contentUiField.SetValue(editor, contentUiObject);
	|
	|            return editor.EditValue(context, provider, value);
	|        }
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return editor.GetEditStyle(context);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyContentAlignmentEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel; 
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    public class MyBooleanConverter : BooleanConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destType)
	|        {
	|            return (bool)value ? ""Истина"" : ""Ложь"";
	|        }
	|	
	|        public new static string ConvertToString(object value)
	|        {
	|            return (bool)value ? ""Истина"" : ""Ложь"";
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
	|        {
	|            return (string)value == ""Истина"";
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyBooleanConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms;
	|using System.Reflection;
	|
	|namespace osfDesigner
	|{
	|    public class MyColorEditor : ColorEditor
	|    {
	|        ColorEditor editor;
	|
	|        public MyColorEditor()
	|        {
	|            editor = new ColorEditor();
	|        }
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            Type colorUiType = typeof(ColorEditor).GetNestedType(""ColorUI"", BindingFlags.NonPublic);
	|            var colorUiConstructor = colorUiType.GetConstructors()[0];
	|            var colorUiField = typeof(ColorEditor).GetField(""colorUI"", BindingFlags.Instance | BindingFlags.NonPublic);
	|            var colorUiObject = colorUiConstructor.Invoke(new[] { editor }) as Control;
	|            colorUiField.SetValue(editor, colorUiObject);
	|            var container = colorUiObject.Controls[0];
	|            var tab1 = container.Controls[0]; // System.Windows.Forms.TabPage
	|            tab1.Text = ""Пользовательский"";
	|            var tab2 = container.Controls[1]; // System.Windows.Forms.TabPage
	|            tab2.Text = ""Интернет"";
	|            var tab3 = container.Controls[2]; // System.Windows.Forms.TabPage
	|            tab3.Text = ""Системный"";
	|            container.Controls.Add(new System.Windows.Forms.TabPage()); // System.Windows.Forms.TabPage
	|            var tab4 = container.Controls[3]; // System.Windows.Forms.TabPage
	|            tab4.Text = ""Свойства"";
	|            System.Windows.Forms.ListView ListView1 = new System.Windows.Forms.ListView();
	|            tab4.Controls.Add(ListView1);
	|            ListView1.View = System.Windows.Forms.View.Details;
	|            ListView1.LabelEdit = false;
	|            ListView1.GridLines = true;
	|            ListView1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            ListView1.HeaderStyle = System.Windows.Forms.ColumnHeaderStyle.None;
	|            System.Windows.Forms.ListView.ColumnHeaderCollection Columns1 = ListView1.Columns;
	|            System.Windows.Forms.ColumnHeader ColumnHeader1 = new System.Windows.Forms.ColumnHeader();
	|            System.Windows.Forms.ColumnHeader ColumnHeader2 = new System.Windows.Forms.ColumnHeader();
	|            ColumnHeader1.Width = -1;
	|            ColumnHeader2.Width = -1;
	|            Columns1.Add(ColumnHeader1);
	|            Columns1.Add(ColumnHeader2);
	|            System.Windows.Forms.ListView.ListViewItemCollection Items1 = ListView1.Items;
	|            Color Color1 = (Color)value;
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem1 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems1 = ListViewItem1.SubItems;
	|            ListViewItem1.Text = ""A"";
	|            SubItems1.Add(Color1.A.ToString());
	|            Items1.Add(ListViewItem1);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem2 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems2 = ListViewItem2.SubItems;
	|            ListViewItem2.Text = ""B"";
	|            SubItems2.Add(Color1.B.ToString());
	|            Items1.Add(ListViewItem2);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem3 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems3 = ListViewItem3.SubItems;
	|            ListViewItem3.Text = ""G"";
	|            SubItems3.Add(Color1.G.ToString());
	|            Items1.Add(ListViewItem3);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem4 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems4 = ListViewItem4.SubItems;
	|            ListViewItem4.Text = ""Пусто"";
	|            if (Color1.IsEmpty)
	|            {
	|                SubItems4.Add(""Истина"");
	|            }
	|            else
	|            {
	|                SubItems4.Add(""Ложь"");
	|            }
	|            Items1.Add(ListViewItem4);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem5 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems5 = ListViewItem5.SubItems;
	|            ListViewItem5.Text = ""Предопределенный"";
	|            if (Color1.IsKnownColor)
	|            {
	|                SubItems5.Add(""Истина"");
	|            }
	|            else
	|            {
	|                SubItems5.Add(""Ложь"");
	|            }
	|            Items1.Add(ListViewItem5);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem6 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems6 = ListViewItem6.SubItems;
	|            ListViewItem6.Text = ""Именованный"";
	|            if (Color1.IsNamedColor)
	|            {
	|                SubItems6.Add(""Истина"");
	|            }
	|            else
	|            {
	|                SubItems6.Add(""Ложь"");
	|            }
	|            Items1.Add(ListViewItem6);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem7 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems7 = ListViewItem7.SubItems;
	|            ListViewItem7.Text = ""Системный"";
	|            if (Color1.IsSystemColor)
	|            {
	|                SubItems7.Add(""Истина"");
	|            }
	|            else
	|            {
	|                SubItems7.Add(""Ложь"");
	|            }
	|            Items1.Add(ListViewItem7);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem8 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems8 = ListViewItem8.SubItems;
	|            ListViewItem8.Text = ""Имя"";
	|            SubItems8.Add(Color1.Name);
	|            Items1.Add(ListViewItem8);
	|
	|            System.Windows.Forms.ListViewItem  ListViewItem9 = new System.Windows.Forms.ListViewItem();
	|            System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems9 = ListViewItem9.SubItems;
	|            ListViewItem9.Text = ""R"";
	|            SubItems9.Add(Color1.R.ToString());
	|            Items1.Add(ListViewItem9);
	|
	|            Control Control1 = tab1.Controls[0]; // System.Drawing.Design.ColorEditor+ColorPalette
	|            Control Control2 = tab2.Controls[0]; // System.Drawing.Design.ColorEditor+ColorUI+ColorEditorListBox
	|            Control Control3 = tab3.Controls[0]; // System.Drawing.Design.ColorEditor+ColorUI+ColorEditorListBox
	|
	|            System.Windows.Forms.ListBox ListBox1 = (System.Windows.Forms.ListBox)Control2;
	|            ListBox1.DrawItem += ListBox1_DrawItem;
	|
	|            System.Windows.Forms.ListBox ListBox2 = (System.Windows.Forms.ListBox)Control3;
	|            ListBox2.DrawItem += ListBox2_DrawItem;
	|	
	|            int i = 0;
	|            while (i <= ListBox2.Items.Count - 1)
	|            {
	|                Color item = (Color)ListBox2.Items[i];
	|                string item2Name = item.Name;
	|                try
	|                {
	|                    item2Name = OneScriptFormsDesigner.colors[item2Name];
	|                    i = i + 1;
	|                }
	|                catch
	|                {
	|                    ListBox2.Items.Remove(item);
	|                }
	|            }
	|
	|            return editor.EditValue(context, provider, value);
	|        }
	|
	|        private void ListBox2_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            System.Windows.Forms.ListBox listbox2 = (System.Windows.Forms.ListBox)sender;
	|            object item2 = listbox2.Items[e.Index];
	|            Font font2 = ((Control)sender).Font;
	|            listbox2.ItemHeight = listbox2.Font.Height;
	|
	|            Graphics graphics = e.Graphics;
	|            e.DrawBackground();
	|
	|            editor.PaintValue(item2, graphics, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 22, e.Bounds.Height - 4));
	|            graphics.DrawRectangle(SystemPens.WindowText, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 22 - 1, e.Bounds.Height - 4 - 1));
	|            Brush foreBrush2 = new SolidBrush(e.ForeColor);
	|
	|            string item2Name = ((Color)item2).Name;
	|            try
	|            {
	|                item2Name = OneScriptFormsDesigner.colors[item2Name];
	|            }
	|            catch { }
	|
	|            graphics.DrawString(item2Name, font2, foreBrush2, e.Bounds.X + 26, e.Bounds.Y);
	|            foreBrush2.Dispose();
	|        }
	|
	|        private void ListBox1_DrawItem(object sender, DrawItemEventArgs e)
	|        {
	|            System.Windows.Forms.ListBox listbox1 = (System.Windows.Forms.ListBox)sender;
	|            object item1 = listbox1.Items[e.Index];
	|            Font font1 = ((Control)sender).Font;
	|            listbox1.ItemHeight = listbox1.Font.Height;
	|
	|            Graphics graphics = e.Graphics;
	|            e.DrawBackground();
	|
	|            editor.PaintValue(item1, graphics, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 22, e.Bounds.Height - 4));
	|            graphics.DrawRectangle(SystemPens.WindowText, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 22 - 1, e.Bounds.Height - 4 - 1));
	|            Brush foreBrush1 = new SolidBrush(e.ForeColor);
	|
	|            string item1Name = ((Color)item1).Name;
	|            try
	|            {
	|                item1Name = OneScriptFormsDesigner.colors[item1Name];
	|            }
	|            catch { }
	|
	|            graphics.DrawString(item1Name, font1, foreBrush1, e.Bounds.X + 26, e.Bounds.Y);
	|            foreBrush1.Dispose();
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyColorEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.ComponentModel; 
	|using System.Globalization;
	|using System.Runtime.CompilerServices;
	|
	|namespace osfDesigner
	|{
	|    public class MyColorConverter : ColorConverter
	|    {
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            return true;
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                string res1 = value.ToString();
	|                string[] stringSeparators = new string[] { ""["", ""]"" };
	|                string[] result = res1.Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|                // result[1] - это либо имя цвета (Green), либо его RGB значения (A = 255, R = 255, G = 224, B = 192).
	|                // Меняем result[1] на значение из словаря colors.
	|                string[] stringSeparators2 = new string[] { "", "" };
	|                string[] result2 = result[1].Split(stringSeparators2, StringSplitOptions.RemoveEmptyEntries);
	|                if (result2.Length == 4)//цвет в ARGB
	|                {
	|                    return res1.Replace(""Color"", ""Цвет"");
	|                }
	|                else
	|                {
	|                    try
	|                    {
	|                        return ""Цвет ["" + OneScriptFormsDesigner.colors[result[1]] + ""]"";
	|                    }
	|                    catch
	|                    {
	|                        Color Color1 = (Color)value;
	|                        return ""Цвет [A="" + Color1.A + "", R="" + Color1.R + "", G="" + Color1.G + "", B="" + Color1.B + ""]"";
	|                    }
	|                }
	|            }
	|            return base.ConvertTo(context, cultureInfo, RuntimeHelpers.GetObjectValue(value), destinationType);
	|        }
	|
	|        public new static string ConvertToString(object value)
	|        {
	|            try
	|            {
	|                return OneScriptFormsDesigner.colors[value.ToString()];
	|            }
	|            catch
	|            {
	|                return value.ToString();
	|            }
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            if (destinationType.Equals(typeof(string)))
	|            {
	|                return true;
	|            }
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo cultureInfo, object value)
	|        {
	|            if (!(value is string))
	|            {
	|                return base.ConvertFrom(context, cultureInfo, RuntimeHelpers.GetObjectValue(value));
	|            }
	|            string[] stringSeparators = new string[] { ""["", ""]"" };
	|            string[] result = ((string)value).Split(stringSeparators, StringSplitOptions.RemoveEmptyEntries);
	|            // result[1] - это либо имя цвета (Green), либо его RGB значения (A = 255, R = 255, G = 224, B = 192).
	|            // Из него нужно создать Color.
	|            string[] stringSeparators2 = new string[] { "", "" };
	|            string[] result2 = result[1].Split(stringSeparators2, StringSplitOptions.RemoveEmptyEntries);
	|            if (result2.Length == 4)
	|            {
	|                int A = Convert.ToInt32(result2[0].Replace(""A="", """"));
	|                int R = Convert.ToInt32(result2[1].Replace(""R="", """"));
	|                int G = Convert.ToInt32(result2[2].Replace(""G="", """"));
	|                int B = Convert.ToInt32(result2[3].Replace(""B="", """"));
	|                return Color.FromArgb(255, R, G, B);
	|            }
	|            else
	|            {
	|                Color Color2 = Color.FromName(result[1]);
	|                if ((Color2.A + Color2.R + Color2.G + Color2.B) == 0)
	|                {
	|                    try
	|                    {
	|                        return Color.FromName(OneScriptFormsDesigner.colors[result[1]]);
	|                    }
	|                    catch
	|                    {
	|                        return Color.FromArgb(255, 0, 0, 0);
	|                    }
	|                }
	|                else
	|                {
	|                    return Color.FromName(result[1]);
	|                }
	|            }
	|        }
	|
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|
	|        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] Attribute)
	|        {
	|            return TypeDescriptor.GetProperties(RuntimeHelpers.GetObjectValue(value));
	|        }
	|
	|        public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyColorConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MySizeEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmWidthHeight _frmWidthHeight = new frmWidthHeight();
	|
	|                _frmWidthHeight.numericUpDown1.Value = ((Size)value).Width;
	|                _frmWidthHeight.numericUpDown2.Value = ((Size)value).Height;
	|                _frmWidthHeight._wfes = wfes;
	|
	|                wfes.DropDownControl(_frmWidthHeight);
	|                int _Width = Convert.ToInt32(_frmWidthHeight.numericUpDown1.Value);
	|                int _Height = Convert.ToInt32(_frmWidthHeight.numericUpDown2.Value);
	|                value = new Size(_Width, _Height);
	|            }
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    public class frmWidthHeight : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label label1;
	|        public System.Windows.Forms.NumericUpDown numericUpDown1;
	|        private System.Windows.Forms.Label label2;
	|        public System.Windows.Forms.NumericUpDown numericUpDown2;
	|        private Container components = null;
	|
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmWidthHeight()
	|        {
	|            this.ClientSize = new Size(192, 70);
	|            this.ControlBox = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmWidthHeight"";
	|            this.ShowInTaskbar = false;
	|            this.Closed += FrmWidthHeight_Closed;
	|
	|            label1 = new System.Windows.Forms.Label();
	|            label1.Parent = this;
	|            label1.Location = new Point(10, 10);
	|            label1.Text = ""Ширина"";
	|            label1.Width = 55;
	|
	|            numericUpDown1 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown1.Parent = this;
	|            numericUpDown1.Location = new Point(label1.Left + label1.Width + 5, label1.Top);
	|            numericUpDown1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown1.ThousandsSeparator = true;
	|            numericUpDown1.Minimum = 0;
	|            numericUpDown1.Maximum = 7680;
	|
	|            label2 = new System.Windows.Forms.Label();
	|            label2.Parent = this;
	|            label2.Location = new Point(label1.Left, label1.Bottom + 5);
	|            label2.Text = ""Высота"";
	|            label2.Width = 55;
	|
	|            numericUpDown2 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown2.Parent = this;
	|            numericUpDown2.Location = new Point(label2.Left + label2.Width + 5, label2.Top);
	|            numericUpDown2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown2.ThousandsSeparator = true;
	|            numericUpDown2.Minimum = 0;
	|            numericUpDown2.Maximum = 4800;
	|
	|            TopLevel = false;
	|        }
	|
	|        private void FrmWidthHeight_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MySizeEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.ComponentModel;
	|using System.Windows.Forms; 
	|using System.Windows.Forms.Design;
	|
	|namespace osfDesigner
	|{
	|    public class MyCursorEditor : CursorEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = (IWindowsFormsEditorService)provider.GetService(typeof(IWindowsFormsEditorService));
	|
	|            if (wfes != null)
	|            {
	|                frmCursor _frmCursor = new frmCursor();
	|                _frmCursor._wfes = wfes;
	|                _frmCursor._value = value;
	|
	|                if (value != null)
	|                {
	|                    for (int i = 0; i < _frmCursor.Items.Count; i++)
	|                    {
	|                        if (_frmCursor.Items[i] == value)
	|                        {
	|                            _frmCursor.SelectedIndex = i;
	|                            break;
	|                        }
	|                    }
	|                }
	|
	|                wfes.DropDownControl(_frmCursor);
	|                value = _frmCursor.Value;
	|                _frmCursor._wfes = null;
	|                _frmCursor._value = null;
	|            }
	|
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.DropDown;
	|        }
	|
	|        public override bool IsDropDownResizable
	|        {
	|            get
	|            {
	|                return true;
	|            }
	|        }
	|
	|        private class frmCursor : System.Windows.Forms.ListBox
	|        {
	|            public object _value;
	|            public IWindowsFormsEditorService _wfes;
	|            private TypeConverter cursorConverter;
	|            Dictionary<string, string> cursors;
	|
	|            public frmCursor()
	|            {
	|                Height = 310;
	|                ItemHeight = (int)Math.Max(4 + Cursors.Default.Size.Height, Font.Height);
	|                DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
	|                BorderStyle = System.Windows.Forms.BorderStyle.None;
	|
	|                cursorConverter = TypeDescriptor.GetConverter(typeof(Cursor));
	|                if (cursorConverter.GetStandardValuesSupported())
	|                {
	|                    foreach (object obj in cursorConverter.GetStandardValues())
	|                    {
	|                        Items.Add(obj);
	|                    }
	|                }
	|
	|                cursors = new Dictionary<string, string>
	|                {
	|                    {""NoMove2D"", ""БезДвижения2D""},
	|                    {""NoMoveVert"", ""БезДвиженияВекртикально""},
	|                    {""NoMoveHoriz"", ""БезДвиженияГоризонтально""},
	|                    {""VSplit"", ""ВРазделитель""},
	|                    {""HSplit"", ""ГРазделитель""},
	|                    {""PanEast"", ""КурсорВ""},
	|                    {""PanWest"", ""КурсорЗ""},
	|                    {""WaitCursor"", ""КурсорОжидания""},
	|                    {""PanNorth"", ""КурсорС""},
	|                    {""PanNE"", ""КурсорСВ""},
	|                    {""PanNW"", ""КурсорСЗ""},
	|                    {""PanSouth"", ""КурсорЮ""},
	|                    {""PanSE"", ""КурсорЮВ""},
	|                    {""PanSW"", ""КурсорЮЗ""},
	|                    {""Hand"", ""Ладонь""},
	|                    {""IBeam"", ""Луч""},
	|                    {""No"", ""Нет""},
	|                    {""Cross"", ""Перекрестие""},
	|                    {""Default"", ""ПоУмолчанию""},
	|                    {""AppStarting"", ""ПриСтарте""},
	|                    {""SizeWE"", ""РазмерЗВ""},
	|                    {""SizeNESW"", ""РазмерСВЮЗ""},
	|                    {""SizeNWSE"", ""РазмерСЗЮВ""},
	|                    {""SizeNS"", ""РазмерСЮ""},
	|                    {""SizeAll"", ""РазмерЧетырехконечный""},
	|                    {""Help"", ""Справка""},
	|                    {""Arrow"", ""Стрелка""},
	|                    {""UpArrow"", ""СтрелкаВверх""}
	|                };
	|            }
	|
	|            public object Value
	|            {
	|                get
	|                {
	|                    return _value;
	|                }
	|            }
	|
	|            protected override void OnClick(EventArgs e)
	|            {
	|                base.OnClick(e);
	|                _value = SelectedItem;
	|                _wfes.CloseDropDown();
	|            }
	|
	|            protected override void OnDrawItem(DrawItemEventArgs e)
	|            {
	|                base.OnDrawItem(e);
	|
	|                if (e.Index != -1)
	|                {
	|                    Cursor cursor = (Cursor)Items[e.Index];
	|                    string text = cursorConverter.ConvertToString(cursor);
	|                    Font font = e.Font;
	|                    Brush brushText = new SolidBrush(e.ForeColor);
	|
	|                    e.DrawBackground();
	|                    e.Graphics.FillRectangle(SystemBrushes.Control, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 32, e.Bounds.Height - 4));
	|                    e.Graphics.DrawRectangle(SystemPens.WindowText, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 32 - 1, e.Bounds.Height - 4 - 1));
	|
	|                    cursor.DrawStretched(e.Graphics, new Rectangle(e.Bounds.X + 2, e.Bounds.Y + 2, 32, e.Bounds.Height - 4));
	|
	|                    string cursorName = text;
	|                    try
	|                    {
	|                        cursorName = cursors[cursorName];
	|                    }
	|                    catch { }
	|
	|                    e.Graphics.DrawString(cursorName, font, brushText, e.Bounds.X + 36, e.Bounds.Y + (e.Bounds.Height - font.Height) / 2);
	|
	|                    brushText.Dispose();
	|                }
	|            }
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyCursorEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Collections.Generic;
	|using System.Windows.Forms;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.Runtime.CompilerServices;
	|
	|namespace osfDesigner
	|{
	|    public class MyCursorConverter : CursorConverter
	|    {
	|        static TypeConverter cursorConverter = TypeDescriptor.GetConverter(typeof(Cursor));
	|        public static Dictionary<string, string> cursors = new Dictionary<string, string>
	|            {
	|                {""NoMove2D"", ""БезДвижения2D""},
	|                {""NoMoveVert"", ""БезДвиженияВекртикально""},
	|                {""NoMoveHoriz"", ""БезДвиженияГоризонтально""},
	|                {""VSplit"", ""ВРазделитель""},
	|                {""HSplit"", ""ГРазделитель""},
	|                {""PanEast"", ""КурсорВ""},
	|                {""PanWest"", ""КурсорЗ""},
	|                {""WaitCursor"", ""КурсорОжидания""},
	|                {""PanNorth"", ""КурсорС""},
	|                {""PanNE"", ""КурсорСВ""},
	|                {""PanNW"", ""КурсорСЗ""},
	|                {""PanSouth"", ""КурсорЮ""},
	|                {""PanSE"", ""КурсорЮВ""},
	|                {""PanSW"", ""КурсорЮЗ""},
	|                {""Hand"", ""Ладонь""},
	|                {""IBeam"", ""Луч""},
	|                {""No"", ""Нет""},
	|                {""Cross"", ""Перекрестие""},
	|                {""Default"", ""ПоУмолчанию""},
	|                {""AppStarting"", ""ПриСтарте""},
	|                {""SizeWE"", ""РазмерЗВ""},
	|                {""SizeNESW"", ""РазмерСВЮЗ""},
	|                {""SizeNWSE"", ""РазмерСЗЮВ""},
	|                {""SizeNS"", ""РазмерСЮ""},
	|                {""SizeAll"", ""РазмерЧетырехконечный""},
	|                {""Help"", ""Справка""},
	|                {""Arrow"", ""Стрелка""},
	|                {""UpArrow"", ""СтрелкаВверх""}
	|            };
	|
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            return true;
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            if (destinationType.Equals(typeof(string)))
	|            {
	|                return true;
	|            }
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                string cursorName = cursorConverter.ConvertToString(value);
	|                try
	|                {
	|                    return cursors[cursorName];
	|                }
	|                catch
	|                {
	|                    return cursorName;
	|                }
	|            }
	|            return base.ConvertTo(context, cultureInfo, RuntimeHelpers.GetObjectValue(value), destinationType);
	|        }
	|
	|        public new static string ConvertToString(object value)
	|        {
	|            string cursorName = cursorConverter.ConvertToString(value);
	|            try
	|            {
	|                return cursors[cursorName];
	|            }
	|            catch
	|            {
	|                return cursorName;
	|            }
	|        }
	|
	|        public override bool GetStandardValuesSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyCursorConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.Runtime.CompilerServices; 
	|using System.Drawing;
	|
	|namespace osfDesigner
	|{
	|    public class MyLocationConverter : TypeConverter
	|    {
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo cultureInfo, object value, Type destinationType)
	|        {
	|            if (destinationType == typeof(string))
	|            {
	|                string str1 = value.ToString();
	|                str1 = str1.Replace(""X"", ""Икс"");
	|                str1 = str1.Replace(""Y"", "" Игрек"");
	|
	|                return str1;
	|            }
	|            return base.ConvertTo(context, cultureInfo, RuntimeHelpers.GetObjectValue(value), destinationType);
	|        }
	|
	|        public new static string ConvertToString(object value)
	|        {
	|            string str1 = value.ToString();
	|            str1 = str1.Replace(""X"", ""Икс"");
	|            str1 = str1.Replace(""Y"", "" Игрек"");
	|
	|            return str1;
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            if (destinationType.Equals(typeof(string)))
	|            {
	|                return true;
	|            }
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo cultureInfo, object value)
	|        {
	|            if (!(value is string))
	|            {
	|                return base.ConvertFrom(context, cultureInfo, RuntimeHelpers.GetObjectValue(value));
	|            }
	|
	|            string[] stringSeparators = new string[] { "", "" };
	|            string[] result = Convert.ToString(value).Split(stringSeparators, StringSplitOptions.None);
	|            string _X = result[0];
	|            _X = _X.Replace(""{Икс="", """");
	|            string _Y = result[1];
	|            _Y = _Y.Replace(""Игрек="", """");
	|            _Y = _Y.Replace(""}"", """");
	|            Point Point1 = new Point(Convert.ToInt32(_X), Convert.ToInt32(_Y));
	|
	|            return Point1;
	|        }
	|
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            return true;
	|        }
	|
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyLocationConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MyLocationEditor : UITypeEditor
	|    {
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmXY _frmXY = new frmXY();
	|
	|                _frmXY.numericUpDown1.Value = ((Point)value).X;
	|                _frmXY.numericUpDown2.Value = ((Point)value).Y;
	|                _frmXY._wfes = wfes;
	|
	|                wfes.DropDownControl(_frmXY);
	|                int _X = Convert.ToInt32(_frmXY.numericUpDown1.Value);
	|                int _Y = Convert.ToInt32(_frmXY.numericUpDown2.Value);
	|                value = new Point(_X, _Y);
	|            }
	|            return value;
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|    }
	|
	|    public class frmXY : System.Windows.Forms.Form
	|    {
	|        private System.Windows.Forms.Label label1;
	|        public System.Windows.Forms.NumericUpDown numericUpDown1;
	|        private System.Windows.Forms.Label label2;
	|        public System.Windows.Forms.NumericUpDown numericUpDown2;
	|        private Container components = null;
	|
	|        public IWindowsFormsEditorService _wfes;
	|
	|        public frmXY()
	|        {
	|            this.ClientSize = new Size(192, 70);
	|            this.ControlBox = false;
	|            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.Name = ""frmXY"";
	|            this.ShowInTaskbar = false;
	|            this.Closed += frmXY_Closed;
	|
	|            label1 = new System.Windows.Forms.Label();
	|            label1.Parent = this;
	|            label1.Location = new Point(10, 10);
	|            label1.Text = ""Икс"";
	|            label1.Width = 55;
	|
	|            numericUpDown1 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown1.Parent = this;
	|            numericUpDown1.Location = new Point(label1.Left + label1.Width + 5, label1.Top);
	|            numericUpDown1.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown1.ThousandsSeparator = true;
	|            numericUpDown1.Minimum = 0;
	|            numericUpDown1.Maximum = 7680;
	|
	|            label2 = new System.Windows.Forms.Label();
	|            label2.Parent = this;
	|            label2.Location = new Point(label1.Left, label1.Bottom + 5);
	|            label2.Text = ""Игрек"";
	|            label2.Width = 55;
	|
	|            numericUpDown2 = new System.Windows.Forms.NumericUpDown();
	|            numericUpDown2.Parent = this;
	|            numericUpDown2.Location = new Point(label2.Left + label2.Width + 5, label2.Top);
	|            numericUpDown2.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
	|            numericUpDown2.ThousandsSeparator = true;
	|            numericUpDown2.Minimum = 0;
	|            numericUpDown2.Maximum = 4800;
	|
	|            TopLevel = false;
	|        }
	|
	|        private void frmXY_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyLocationEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Drawing;
	|using System.Drawing.Design;
	|using System.Windows.Forms.Design;
	|using System.ComponentModel;
	|
	|namespace osfDesigner
	|{
	|    public class MyImageFileNameEditor : FileNameEditor
	|    {
	|        private System.Windows.Forms.OpenFileDialog _openFileDialog;
	|
	|        public override object EditValue(ITypeDescriptorContext context, IServiceProvider provider, object value)
	|        {
	|            IWindowsFormsEditorService wfes = provider.GetService(typeof(IWindowsFormsEditorService)) as IWindowsFormsEditorService;
	|
	|            if (wfes != null)
	|            {
	|                frmImageFileName _frmImageFileName = new frmImageFileName(value, Program.pDesignerMainForm1.GetmainForm());
	|                _frmImageFileName._wfes = wfes;
	|
	|                if (value == null)
	|                {
	|                    if (_openFileDialog == null)
	|                    {
	|                        _openFileDialog = new System.Windows.Forms.OpenFileDialog();
	|                        InitializeDialog(_openFileDialog);
	|                    }
	|                    if (value is string)
	|                    {
	|                        _openFileDialog.FileName = (string)value;
	|                    }
	|                    if (_openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
	|                    {
	|                        Image Imag1 = Image.FromFile(_openFileDialog.FileName);
	|                        Imag1.Tag = _openFileDialog.FileName;
	|                        return Imag1;
	|                    }
	|                    else
	|                    {
	|                        return null;
	|                    }
	|                }
	|                else
	|                {
	|                    System.Windows.Forms.DialogResult res1 = _frmImageFileName.ShowDialog();
	|                    if (res1 == System.Windows.Forms.DialogResult.OK)
	|                    {
	|                        if (_openFileDialog == null)
	|                        {
	|                            _openFileDialog = new System.Windows.Forms.OpenFileDialog();
	|                            InitializeDialog(_openFileDialog);
	|                        }
	|                        if (value is string)
	|                        {
	|                            _openFileDialog.FileName = (string)value;
	|                        }
	|                        if (_openFileDialog.ShowDialog() == System.Windows.Forms.DialogResult.OK)
	|                        {
	|                            Image Imag1 = Image.FromFile(_openFileDialog.FileName);
	|                            Imag1.Tag = _openFileDialog.FileName;
	|                            return Imag1;
	|                        }
	|                        else
	|                        {
	|                            return value;
	|                        }
	|                    }
	|                    else if (res1 == System.Windows.Forms.DialogResult.No)
	|                    {
	|                        return null;
	|                    }
	|                    else
	|                    {
	|                        return value;
	|                    }
	|                }
	|            }
	|            return null;
	|        }
	|
	|        protected override void InitializeDialog(System.Windows.Forms.OpenFileDialog openFileDialog)
	|        {
	|            if (openFileDialog == null)
	|            {
	|                throw new ArgumentNullException(nameof(openFileDialog));
	|            }
	|            openFileDialog.Filter = ""(*.BMP;*.JPG;*.GIF;*.ICO)|*.BMP;*.JPG;*.GIF;*.ICO"";
	|            openFileDialog.Title = ""Открыть"";
	|        }
	|
	|        public override UITypeEditorEditStyle GetEditStyle(ITypeDescriptorContext context)
	|        {
	|            return UITypeEditorEditStyle.Modal;
	|        }
	|
	|        public override bool GetPaintValueSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|
	|        public override void PaintValue(PaintValueEventArgs e)
	|        {
	|            try
	|            {
	|                if (e == null || e.Value == null)
	|                {
	|                    return;
	|                }
	|                Image img = (Image)e.Value;
	|                if (img == null)
	|                {
	|                    return;
	|                }
	|                PaintValueEventArgs pi = new PaintValueEventArgs(e.Context, img, e.Graphics, e.Bounds);
	|                if (img != null)
	|                {
	|                    Rectangle r = e.Bounds;
	|                    r.Width--;
	|                    r.Height--;
	|                    e.Graphics.DrawRectangle(SystemPens.WindowFrame, r);
	|                    e.Graphics.DrawImage(img, e.Bounds);
	|                }
	|            }
	|            catch { }
	|        }
	|    }
	|
	|    public class frmImageFileName : System.Windows.Forms.Form
	|    {
	|        private Container components = null;
	|        public IWindowsFormsEditorService _wfes;
	|        private System.Windows.Forms.Panel Panel1;
	|        private System.Windows.Forms.Panel Panel2;
	|        private System.Windows.Forms.Panel Panel3;
	|        private System.Windows.Forms.Button ButtonChange;
	|        private System.Windows.Forms.Button ButtonDel;
	|
	|        public frmImageFileName(object value, System.Windows.Forms.Control mainForm)
	|        {
	|            this.Text = ""Текущее изображение"";
	|            this.Name = ""frmImageFileName"";
	|            this.MaximizeBox = false;
	|            this.MinimizeBox = false;
	|            this.ShowInTaskbar = false;
	|            this.Closed += frmImageFileName_Closed;
	|            this.MinimumSize = new Size(300, 150);
	|            this.Width = 700;
	|            this.Height = 200;
	|            this.Location = new Point(mainForm.Left + ((mainForm.Width / 2) - (700 / 2)), mainForm.Top + ((mainForm.Height / 2) - (200 / 2)));
	|            this.StartPosition = System.Windows.Forms.FormStartPosition.Manual;
	|
	|            // Панель с ListView1.
	|            Panel1 = new System.Windows.Forms.Panel();
	|            Panel1.Parent = this;
	|            Panel1.Dock = System.Windows.Forms.DockStyle.Fill;
	|
	|            // Панель с ButtonChange и ButtonDel.
	|            Panel2 = new System.Windows.Forms.Panel();
	|            Panel2.Parent = this;
	|            Panel2.Dock = System.Windows.Forms.DockStyle.Bottom;
	|            Panel2.Height = 32;
	|
	|            // Панель с ButtonChange и ButtonDel.
	|            Panel3 = new System.Windows.Forms.Panel();
	|            Panel3.Parent = Panel2;
	|            Panel3.Dock = System.Windows.Forms.DockStyle.Right;
	|            Panel3.Width = 238;
	|
	|            ButtonChange = new System.Windows.Forms.Button();
	|            ButtonChange.Parent = Panel3;
	|            ButtonChange.Bounds = new Rectangle(6, 5, 110, 22);
	|            ButtonChange.Text = ""Изменить"";
	|            ButtonChange.Click += ButtonChange_Click;
	|
	|            ButtonDel = new System.Windows.Forms.Button();
	|            ButtonDel.Parent = Panel3;
	|            ButtonDel.Bounds = new Rectangle(122, 5, 110, 22);
	|            ButtonDel.Text = ""Удалить"";
	|            ButtonDel.Click += ButtonDel_Click;
	|
	|            System.Windows.Forms.ListView ListView1 = new System.Windows.Forms.ListView();
	|            ListView1.Parent = Panel1;
	|            ListView1.View = System.Windows.Forms.View.Details;
	|            ListView1.LabelEdit = false;
	|            ListView1.GridLines = true;
	|            ListView1.Dock = System.Windows.Forms.DockStyle.Fill;
	|            ListView1.HeaderStyle = System.Windows.Forms.ColumnHeaderStyle.None;
	|            System.Windows.Forms.ListView.ColumnHeaderCollection Columns1 = ListView1.Columns;
	|            System.Windows.Forms.ColumnHeader ColumnHeader1 = new System.Windows.Forms.ColumnHeader();
	|            System.Windows.Forms.ColumnHeader ColumnHeader2 = new System.Windows.Forms.ColumnHeader();
	|            ColumnHeader1.Width = -1;
	|            ColumnHeader2.Width = -1;
	|            Columns1.Add(ColumnHeader1);
	|            Columns1.Add(ColumnHeader2);
	|            System.Windows.Forms.ListView.ListViewItemCollection Items1 = ListView1.Items;
	|
	|            if (value != null)
	|            {
	|                Image Image1 = value as Image;
	|                int HorizontalResolution = Convert.ToInt32(Image1.HorizontalResolution);
	|                int PhysicalDimensionWidth = Convert.ToInt32(Image1.PhysicalDimension.Width);
	|                int PhysicalDimensionHeight = Convert.ToInt32(Image1.PhysicalDimension.Height);
	|                System.Drawing.Imaging.PixelFormat PixelFormat = Image1.PixelFormat;
	|                System.Drawing.Imaging.ImageFormat RawFormat = Image1.RawFormat;
	|                int SizeWidth = Image1.Size.Width;
	|                int SizeHeight = Image1.Size.Height;
	|                object Tag = Image1.Tag;
	|                int VerticalResolution = Convert.ToInt32(Image1.VerticalResolution);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem1 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems1 = ListViewItem1.SubItems;
	|                ListViewItem1.Text = ""ГоризонтальноеРазрешение (HorizontalResolution)"";
	|                SubItems1.Add("""" + HorizontalResolution);
	|                Items1.Add(ListViewItem1);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem2 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems2 = ListViewItem2.SubItems;
	|                ListViewItem2.Text = ""ФизическийРазмер (PhysicalDimension)"";
	|                SubItems2.Add(""{ Ширина = "" + PhysicalDimensionWidth + "", Высота = "" + PhysicalDimensionHeight + ""}"");
	|                Items1.Add(ListViewItem2);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem3 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems3 = ListViewItem3.SubItems;
	|                ListViewItem3.Text = ""ФорматПикселей (PixelFormat)"";
	|                SubItems3.Add("""" + PixelFormat);
	|                Items1.Add(ListViewItem3);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem4 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems4 = ListViewItem4.SubItems;
	|                ListViewItem4.Text = ""ФорматФайлаИзображения (RawFormat)"";
	|                SubItems4.Add("""" + RawFormat);
	|                Items1.Add(ListViewItem4);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem5 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems5 = ListViewItem5.SubItems;
	|                ListViewItem5.Text = ""Размер (Size)"";
	|                SubItems5.Add("""" + ""{ Ширина = "" + SizeWidth + "", Высота = "" + SizeHeight + ""}"");
	|                Items1.Add(ListViewItem5);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem6 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems6 = ListViewItem6.SubItems;
	|                ListViewItem6.Text = ""Метка (Tag)"";
	|                SubItems6.Add("""" + Tag);
	|                Items1.Add(ListViewItem6);
	|
	|                System.Windows.Forms.ListViewItem ListViewItem7 = new System.Windows.Forms.ListViewItem();
	|                System.Windows.Forms.ListViewItem.ListViewSubItemCollection SubItems7 = ListViewItem7.SubItems;
	|                ListViewItem7.Text = ""ВертикальноеРазрешение (VerticalResolution)"";
	|                SubItems7.Add("""" + VerticalResolution);
	|                Items1.Add(ListViewItem7);
	|            }
	|        }
	|
	|        private void ButtonDel_Click(object sender, EventArgs e)
	|        {
	|            this.DialogResult = System.Windows.Forms.DialogResult.No;
	|            Close();
	|        }
	|
	|        private void ButtonChange_Click(object sender, EventArgs e)
	|        {
	|            this.DialogResult = System.Windows.Forms.DialogResult.OK;
	|            Close();
	|        }
	|
	|        private void frmImageFileName_Closed(object sender, EventArgs e)
	|        {
	|            _wfes.CloseDropDown();
	|        }
	|
	|        protected override void Dispose(bool disposing)
	|        {
	|            if (disposing)
	|            {
	|                if (components != null)
	|                {
	|                    components.Dispose();
	|                }
	|            }
	|            base.Dispose(disposing);
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyImageFileNameEditor.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.ComponentModel;
	|using System.Globalization;
	|using System.Drawing;
	|using System.IO;
	|using System.ComponentModel.Design.Serialization;
	|
	|namespace osfDesigner
	|{
	|    public class MyImageConverter : ImageConverter
	|    {
	|        Type IconType1 = typeof(Icon);
	|
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            if (sourceType == IconType1)
	|            {
	|                return true;
	|            }
	|
	|            if (sourceType == typeof(byte[]))
	|            {
	|                return true;
	|            }
	|
	|            if (sourceType == typeof(InstanceDescriptor))
	|            {
	|                return false;
	|            }
	|
	|            return base.CanConvertFrom(context, sourceType);
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            if (destinationType == typeof(byte[]))
	|            {
	|                return true;
	|            }
	|
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
	|        {
	|            if (value is Icon)
	|            {
	|                Icon Icon1 = (Icon)value;
	|                return Icon1.ToBitmap();
	|            }
	|
	|            byte[] bytes = value as byte[];
	|
	|            if (bytes != null)
	|            {
	|                Stream Stream1 = new MemoryStream(bytes);
	|                return Image.FromStream(Stream1);
	|            }
	|
	|            return base.ConvertFrom(context, culture, value);
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            if (destinationType == null)
	|            {
	|                return null;
	|            }
	|
	|            if (destinationType == typeof(string))
	|            {
	|                if (value != null)
	|                {
	|                    if (context.Instance.GetType() == typeof(osfDesigner.ImageEntry))
	|                    {
	|                        return ((osfDesigner.ImageEntry)context.Instance).FileName;
	|                    }
	|                    else 
	|                    {
	|                        return """" + ((Image)value).Tag;
	|                    }
	|                }
	|                else
	|                {
	|                    return ""(отсутствует)"";
	|                }
	|            }
	|            else if (destinationType == typeof(byte[]))
	|            {
	|                if (value != null)
	|                {
	|                    bool createdNewImage = false;
	|                    MemoryStream MemoryStream1 = null;
	|                    Image Image1 = null;
	|                    try
	|                    {
	|                        MemoryStream1 = new MemoryStream();
	|                        Image1 = (Image)value;
	|
	|                        // Создадим новое и допустимое растровое изображение из нашего значка с нужным размером.
	|                        if (Image1.RawFormat.Equals(System.Drawing.Imaging.ImageFormat.Icon))
	|                        {
	|                            createdNewImage = true;
	|                            Image1 = new Bitmap(Image1, Image1.Width, Image1.Height);
	|                        }
	|
	|                        Image1.Save(MemoryStream1, Image1.RawFormat);
	|                    }
	|                    finally
	|                    {
	|                        if (MemoryStream1 != null)
	|                        {
	|                            MemoryStream1.Close();
	|                        }
	|                        if (createdNewImage && Image1 != null)
	|                        {
	|                            Image1.Dispose();
	|                        }
	|                    }
	|
	|                    if (MemoryStream1 != null)
	|                    {
	|                        return MemoryStream1.ToArray();
	|                    }
	|                    else
	|                    {
	|                        return null;
	|                    }
	|                }
	|                else
	|                {
	|                    return new byte[0];
	|                }
	|            }
	|
	|            return base.ConvertTo(context, culture, value, destinationType);
	|        }
	|
	|        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	|        {
	|            return TypeDescriptor.GetProperties(typeof(Image), attributes);
	|        }
	|
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return false;
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyImageConverter.cs");
	
	СтрВыгрузки = 
	"using System;
	|using System.Linq;
	|using System.Text;
	|using System.ComponentModel;
	|using System.Drawing;
	|using System.Globalization;
	|
	|namespace osfDesigner
	|{
	|    class MyFontConverter: FontConverter
	|    {
	|        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
	|        {
	|            return base.CanConvertFrom(context, sourceType);
	|        }
	|
	|        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
	|        {
	|            return base.CanConvertTo(context, destinationType);
	|        }
	|
	|        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
	|        {
	|            if (!(value is string))
	|            {
	|                return base.ConvertFrom(context, culture, value);
	|            }
	|
	|            string str3 = ((string)value).Replace(""стиль="", ""style="");
	|            str3 = ((string)str3).Replace(""Жирный"", ""Bold"");
	|            str3 = ((string)str3).Replace(""Зачеркнутый"", ""Strikeout"");
	|            str3 = ((string)str3).Replace(""Курсив"", ""Italic"");
	|            str3 = ((string)str3).Replace(""Подчеркнутый"", ""Underline"");
	|            str3 = ((string)str3).Replace(""Стандартный"", ""Regular"");
	|            return base.ConvertFrom(context, culture, (object)str3);
	|        }
	|
	|        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
	|        {
	|            object str2 = base.ConvertTo(context, culture, value, destinationType);
	|
	|            if ((string)str2 == ""(none)"")
	|            {
	|                return ""(отсутствует)"";
	|            }
	|
	|            string str3 = ((string)str2).Replace(""style="", ""стиль="");
	|            str3 = ((string)str3).Replace(""Bold"", ""Жирный"");
	|            str3 = ((string)str3).Replace(""Strikeout"", ""Зачеркнутый"");
	|            str3 = ((string)str3).Replace(""Italic"", ""Курсив"");
	|            str3 = ((string)str3).Replace(""Underline"", ""Подчеркнутый"");
	|            str3 = ((string)str3).Replace(""Regular"", ""Стандартный"");
	|            return str3;
	|        }
	|
	|        public new static string ConvertToString(object value)
	|        {
	|            string str3 = value.ToString().Replace(""style="", ""стиль="");
	|            str3 = ((string)str3).Replace(""Bold"", ""Жирный"");
	|            str3 = ((string)str3).Replace(""Strikeout"", ""Зачеркнутый"");
	|            str3 = ((string)str3).Replace(""Italic"", ""Курсив"");
	|            str3 = ((string)str3).Replace(""Underline"", ""Подчеркнутый"");
	|            str3 = ((string)str3).Replace(""Regular"", ""Стандартный"");
	|            return str3;
	|        }
	|
	|        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
	|        {
	|            return true;
	|        }
	|
	|        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
	|        {
	|            PropertyDescriptorCollection originalCollection = TypeDescriptor.GetProperties(value, attributes);
	|            PropertyDescriptor[] pds = new PropertyDescriptor[originalCollection.Count];
	|            for (int i = 0; i < originalCollection.Count; i++)
	|            {
	|                pds[i] = new ExpandableFontPropertyDescriptor(originalCollection[i]);
	|            }
	|            return new PropertyDescriptorCollection(pds);
	|        }
	|    }
	|
	|    public class ExpandableFontPropertyDescriptor : PropertyDescriptor
	|    {
	|        private PropertyDescriptor _pd;
	|
	|        public ExpandableFontPropertyDescriptor(PropertyDescriptor pd) : base(GetDisplayName(pd.DisplayName), null)
	|        {
	|            _pd = pd;
	|        }
	|
	|        private static string GetDisplayName(string p1)
	|        {
	|            if (p1 == ""Bold"")
	|            {
	|                return ""Жирный"";
	|            }
	|            else if (p1 == ""Italic"")
	|            {
	|                return ""Курсив"";
	|            }
	|            else if (p1 == ""Underline"")
	|            {
	|                return ""Подчеркнутый"";
	|            }
	|            else if (p1 == ""Strikeout"")
	|            {
	|                return ""Зачеркнутый"";
	|            }
	|            else if (p1 == ""Size"")
	|            {
	|                return ""Размер"";
	|            }
	|            else if (p1 == ""Name"")
	|            {
	|                return ""Имя"";
	|            }
	|            else if (p1 == ""Unit"")
	|            {
	|                return ""Размерность"";
	|            }
	|            else if (p1 == ""GdiVerticalFont"")
	|            {
	|                return ""Производный от вертикального GDI"";
	|            }
	|            else if (p1 == ""GdiCharSet"")
	|            {
	|                return ""Набор знаков GDI"";
	|            }
	|            else
	|            {
	|                return p1;
	|            }
	|        }
	|
	|        private static string CSharpName(Type type)
	|        {
	|            var sb = new StringBuilder();
	|            var name = type.Name;
	|            if (!type.IsGenericType)
	|            {
	|                return name;
	|            }
	|            sb.Append(name.Substring(0, name.IndexOf('`')));
	|            sb.Append(""<"");
	|            sb.Append(string.Join("", "", type.GetGenericArguments()
	|                                            .Select(CSharpName)));
	|            sb.Append("">"");
	|            return sb.ToString();
	|        }
	|
	|        public override bool CanResetValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override Type ComponentType
	|        {
	|            get { return _pd.GetType(); }
	|        }
	|
	|        public override object GetValue(object component)
	|        {
	|            string var1 = _pd.GetValue(component).ToString();
	|            if (var1 == false.ToString())
	|            {
	|                return ""Ложь"";
	|            }
	|            else if (var1 == true.ToString())
	|            {
	|                return ""Истина"";
	|            }
	|            else if (var1 == GraphicsUnit.Display.ToString())
	|            {
	|                return ""дисплей (пиксель для дисплеев)"";
	|            }
	|            else if (var1 == GraphicsUnit.Document.ToString())
	|            {
	|                return ""документ (1/300 дюйма)"";
	|            }
	|            else if (var1 == GraphicsUnit.Inch.ToString())
	|            {
	|                return ""дюйм"";
	|            }
	|            else if (var1 == GraphicsUnit.Millimeter.ToString())
	|            {
	|                return ""миллиметр"";
	|            }
	|            else if (var1 == GraphicsUnit.Pixel.ToString())
	|            {
	|                return ""пиксель"";
	|            }
	|            else if (var1 == GraphicsUnit.Point.ToString())
	|            {
	|                return ""пункт (1/72 дюйма)"";
	|            }
	|            else if (var1 == GraphicsUnit.World.ToString())
	|            {
	|                return ""мировая"";
	|            }
	|            else
	|            {
	|                return _pd.GetValue(component);
	|            }
	|        }
	|
	|        public override bool IsReadOnly
	|        {
	|            get { return false; }
	|        }
	|
	|        public override string Name
	|        {
	|            get { return _pd.Name; }
	|        }
	|
	|        public override Type PropertyType
	|        {
	|            get { return _pd.GetType(); }
	|        }
	|
	|        public override void ResetValue(object component)
	|        {
	|        }
	|
	|        public override bool ShouldSerializeValue(object component)
	|        {
	|            return true;
	|        }
	|
	|        public override void SetValue(object component, object value)
	|        {
	|        }
	|    }
	|}
	|";
	ТекстДокХХХ = Новый ТекстовыйДокумент;
	ТекстДокХХХ.УстановитьТекст(СтрВыгрузки);
	ТекстДокХХХ.Записать("C:\444\ВыгрузкаДизайнера\MyFontConverter.cs");
КонецПроцедуры//СгенерироватьФайлы()

Функция КлассСкрытыхСвойств(ИмяКонтекстКлассаАнгл, СкрытыеСвойства, Сп_СвойстваОбъектаИсходногоНеСовпадающие)
	Стр = "";
	СтрСкрытьДляИсходного = "";
	Если СкрытыеСвойства.Количество() > 0 Тогда
		Для А = 0 По СкрытыеСвойства.Количество() - 1 Цикл
			Свойство1 = СкрытыеСвойства.Получить(А).Значение;
			Если Свойство1 <> "Controls" Тогда
				СтрСкрытьДляИсходного = СтрСкрытьДляИсходного + Свойство1 + " ";
			КонецЕсли;
		КонецЦикла;
		//это будет строка свойств из справки, которые нужно скрыть в сетке свойств
		//Но есть ещё свойства у объекта, которых в нашей справке нет. Они выведутся в сетке свойств на английском, если их не скрыть
		//добавим их к СтрСкрытьДляИсходного
		
		// Сп_СвойстваОбъектаИсходногоНеСовпадающие = СтрРазделить(Сп_СвойстваОбъектаИсходногоНеСовпадающие, " ");
		Если Сп_СвойстваОбъектаИсходногоНеСовпадающие.Количество > 0 Тогда
			Для А2 = 0 По Сп_СвойстваОбъектаИсходногоНеСовпадающие.Количество - 1 Цикл
				СтрокаСписка = Сп_СвойстваОбъектаИсходногоНеСовпадающие.ПолучитьПоИндексу(А2);
				Если СтрокаСписка <> "Controls" Тогда
					СтрСкрытьДляИсходного = СтрСкрытьДляИсходного + СтрокаСписка + " ";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	//переведём и сделаем недоступными проблемные свойства, те, которые не хотят становиться невидимыми
	//индивидуально для отдельных классов
	Если ИмяКонтекстКлассаАнгл = "Form" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowDrop { get; set; }
		|
		|        [DisplayName(""РежимАвтоМасштабирования"")]
		|        [Description(""Возвращает или задает режим автоматического масштабирования элемента управления."")]
		|        [Category(""Макет"")]
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AutoScaleMode AutoScaleMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size AutoScrollMinSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AutoSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AutoSizeMode AutoSizeMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AutoValidate AutoValidate { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Drawing.Color BackColor { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ControlBindingsCollection DataBindings { get; set; }
		|
		|        [DisplayName(""ДвойнаяБуферизация"")]
		|        [Description(""Возвращает или задает значение, указывающее, должна ли поверхность этого элемента управления перерисовываться с помощью дополнительного буфера, чтобы уменьшить или предотвратить мерцание."")]
		|        [Category(""Поведение"")]
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool DoubleBuffered { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool HelpButton { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ImeMode ImeMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool IsMdiContainer { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.MenuStrip MainMenuStrip { get; set; }
		|		
		|        [Browsable(false)]
		|        public new Size MaximumSize
		|        {
		|            get { return base.MaximumSize; }
		|            set { base.MaximumSize = value; }
		|        }
		|
		|        [Browsable(false)]
		|        public new Size MinimumSize
		|        {
		|            get { return base.MinimumSize; }
		|            set { base.MinimumSize = value; }
		|        }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Double Opacity { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Padding { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.RightToLeft RightToLeft { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool RightToLeftLayout { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ShowIcon { get; set; }
		|		
		|        [Browsable(false)]
		|        public new Size Size
		|        {
		|            get { return base.Size; }
		|            set { base.Size = value; }
		|        }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.SizeGripStyle SizeGripStyle { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.FormWindowState WindowState { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic CancelButton { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic AcceptButton { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Button" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowDrop { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AutoEllipsis { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AutoSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AutoSizeMode AutoSizeMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ControlBindingsCollection DataBindings { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.FlatButtonAppearance FlatAppearance { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string ImageKey { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Margin { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MaximumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MinimumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Padding { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.RightToLeft RightToLeft { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.TextImageRelation TextImageRelation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool UseCompatibleTextRendering { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool UseMnemonic { get; set; }
		|
		|        [Browsable(false)]
		|        public new bool UseVisualStyleBackColor { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColorDialog" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowFullOpen { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AnyColor { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool FullOpen { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ShowHelp { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool SolidColorOnly { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FolderBrowserDialog" Тогда
		Стр = Стр + 
		"        [DisplayName(""ВыбранныйПуть"")]
		|        [Description(""Возвращает или задает путь, выбранный пользователем."")]
		|        [Category(""Просмотр папок"")]
		|        [Browsable(true)]
		|        public string SelectedPath { get; set; }
		|
		|        [DisplayName(""КорневойКаталог"")]
		|        [Description(""Возвращает или задает корневой каталог, с которой начинается просмотр."")]
		|        [Category(""Просмотр папок"")]
		|        [Browsable(true)]
		|        public SpecialFolder RootFolder { get; set; }
		|
		|        [DisplayName(""Описание"")]
		|        [Description(""Возвращает или задает описательный текст, отображаемый над элементом управления древовидного представления в диалоговом окне."")]
		|        [Category(""Просмотр папок"")]
		|        [Browsable(true)]
		|        public string Description { get; set; }
		|
		|        [DisplayName(""ПоказатьКнопкуНовогоКаталога"")]
		|        [Description(""Возвращает или задает значение, указывающее, появляется ли кнопка  в диалоговом окне браузера папок."")]
		|        [Category(""Просмотр папок"")]
		|        [Browsable(true)]
		|        [TypeConverter(typeof(MyBooleanConverter))]
		|        public bool ShowNewFolderButton { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool Enabled { get; set; }
		|        
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int Interval { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FontDialog" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowScriptChange { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowSimulations { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowVectorFonts { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowVerticalFonts { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool FixedPitchOnly { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool FontMustExist { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int MaxSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int MinSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ScriptsOnly { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ShowApply { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ShowColor { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ShowEffects { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool ShowHelp { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "MainMenu" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.RightToLeft RightToLeft { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "OpenFileDialog" или 
			ИмяКонтекстКлассаАнгл = "SaveFileDialog" или 
			ИмяКонтекстКлассаАнгл = "NotifyIcon" или 
			ИмяКонтекстКлассаАнгл = "ImageList"	Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool Enabled { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int Interval { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FileSystemWatcher" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int IncludeSubdirectories { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Panel" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowDrop { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size AutoScrollMinSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AutoSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AutoSizeMode AutoSizeMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ControlBindingsCollection DataBindings { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ImeMode ImeMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Margin { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MaximumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MinimumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Padding { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.RightToLeft RightToLeft { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "StatusBarPanel" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic Alignment { get; set; }
		|		
		|        [DisplayName(""(Name)"")]
		|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
		|        [Category(""Разработка"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public new string Name
		|        {
		|            get { return base.Name; }
		|            set { base.Name = value; }
		|        }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic Style { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string ToolTipText { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolBar" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ControlBindingsCollection DataBindings { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowDrop { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Margin { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MaximumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MinimumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Padding { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListBox" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowDrop { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ControlBindingsCollection DataBindings { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object DataSource { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.DrawMode DrawMode { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string FormatString { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool FormattingEnabled { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.ImeMode ImeMode { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool IntegralHeight { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.Padding Margin { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MaximumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new Size MinimumSize { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.RightToLeft RightToLeft { get; set; }
		|		
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object ValueMember { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object DisplayMember { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "TreeView" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic AccessibilityObject { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AccessibleDefaultActionDescription { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AllowDrop { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AutoScrollOffset { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AutoSize { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic BackgroundImageLayout { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic BindingContext { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic CanSelect { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic CompanyName { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Container { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ContainsFocus { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ContextMenuStrip { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Created { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic DataBindings { get; set; }
		|
		|        [Browsable(false)]
		|        public dynamic DeviceDpi { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic DisplayRectangle { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Disposing { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic DrawMode { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Handle { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic HasChildren { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ImageKey { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ImeMode { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic InvokeRequired { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic IsAccessible { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic IsDisposed { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic IsHandleCreated { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic IsMirrored { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic LayoutEngine { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic LineColor { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Margin { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic MaximumSize { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic MinimumSize { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Padding { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic PreferredSize { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic RecreatingHandle { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Region { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic RightToLeft { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic RightToLeftLayout { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic SelectedImageKey { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ShowNodeToolTips { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Site { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic StateImageList { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic TopNode { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic TreeViewNodeSorter { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic VisibleCount { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic WindowTarget { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Timer" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic Container { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Enabled { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Site { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "TabPage" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic AccessibleDescription { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AccessibleName { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AccessibleRole { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AllowDrop { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic AutoScrollMinSize { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic BackgroundImageLayout { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic CausesValidation { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ContextMenuStrip { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic DataBindings { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ImageKey { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ImeMode { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Margin { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Padding { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic RightToLeft { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic UseVisualStyleBackColor { get; set; }
		|		
		|        [Category(""Разработка"")]
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string Name { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolBarButton" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic Container { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic DropDownMenu { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ImageKey { get; set; }
		|        
		|        [DisplayName(""(Name)"")]
		|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
		|        [Category(""Разработка"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public new string Name
		|        {
		|            get { return M_ToolBarButton.Name; }
		|            set { M_ToolBarButton.Name = value; }
		|        }
		|        
		|        [Browsable(false)]
		|        public new dynamic Parent { get; set; }
		|        
		|        [Browsable(false)]
		|        public new bool PartialPush { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Site { get; set; }
		|		
		|        [Browsable(false)]
		|        public new bool Visible { get; set; }
		|		
		|        [Browsable(false)]
		|        public new bool Enabled { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridTableStyle" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Windows.Forms.DataGridLineStyle GridLineStyle { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Drawing.Color LinkColor { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Drawing.Color SelectionBackColor { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new System.Drawing.Color SelectionForeColor { get; set; }
		|		
		|        [DisplayName(""ИмяСтиля"")]
		|        [Category(""Прочее"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public string NameStyle { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridBoolColumn" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new bool AllowNull { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string NullText { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object FalseValue { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object NullValue { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object TrueValue { get; set; }
		|		
		|        [DisplayName(""ИмяСтиля"")]
		|        [Category(""Прочее"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public string NameStyle { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn" Тогда
		СтрРазделОбъявленияПеременных = СтрРазделОбъявленияПеременных + Символы.ПС +
		"        private string _DoubleClick_osf;";
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string NullText { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string Format { get; set; }
		|		
		|        [DisplayName(""ДвойноеНажатие"")]
		|        [Description(""Возвращает или задает код для выполнения, когда ячейка колонки дважды щелкнута."")]
		|        [Category(""Прочее"")]
		|        [Browsable(true)]
		|        public  string DoubleClick_osf
		|        {
		|            get { return _DoubleClick_osf; }
		|            set { _DoubleClick_osf = value; }
		|        }
		|		
		|        [DisplayName(""ИмяСтиля"")]
		|        [Category(""Прочее"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public string NameStyle { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColumnHeader" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int DisplayIndex { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new int ImageIndex { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new string ImageKey { get; set; }
		|		
		|        [DisplayName(""(Name)"")]
		|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
		|        [Category(""Разработка"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public new string Name
		|        {
		|            get { return base.Name; }
		|            set { base.Name = value; }
		|        }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new object Tag { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolTip" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic BackColor { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic ForeColor { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic IsBalloon { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic OwnerDraw { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic StripAmpersands { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic Tag { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic ToolTipIcon { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic ToolTipTitle { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic UseAnimation { get; set; }
		|
		|        [Browsable(false)]
		|        [ReadOnly(true)]
		|        public new dynamic UseFading { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ComboBox" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic AccessibilityObject { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleDefaultActionDescription { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleDescription { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleName { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleRole { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AllowDrop { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoCompleteCustomSource { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoCompleteMode { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoCompleteSource { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoScrollOffset { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BackgroundImageLayout { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BindingContext { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CanSelect { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CausesValidation { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CompanyName { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Container { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ContainsFocus { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ContextMenuStrip { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Created { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DataBindings { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DataSource { get; set; }
		|        
		|        [Browsable(false)]
		|        public dynamic DeviceDpi { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DisplayRectangle { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic DisplayMember { get; set; }
		|
		|        [Browsable(false)]
		|        public new dynamic ValueMember { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Disposing { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DropDownHeight { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FlatStyle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FormatInfo { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FormatString { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FormattingEnabled { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Handle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic HasChildren { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ImeMode { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic InvokeRequired { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsAccessible { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsDisposed { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsHandleCreated { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsMirrored { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic LayoutEngine { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Margin { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic MaximumSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic MinimumSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Padding { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic PreferredSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RecreatingHandle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Region { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RightToLeft { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic SelectedItem { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Site { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic WindowTarget { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "LinkLabel" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic AccessibilityObject { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleDefaultActionDescription { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleDescription { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleName { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleRole { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AllowDrop { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoEllipsis { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoScrollOffset { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BackgroundImageLayout { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BindingContext { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CanSelect { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CausesValidation { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CompanyName { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Container { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ContainsFocus { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ContextMenuStrip { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Created { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DataBindings { get; set; }
		|        
		|        [Browsable(false)]
		|        public dynamic DeviceDpi { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DisabledLinkColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DisplayRectangle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Disposing { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FlatStyle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Handle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic HasChildren { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ImageKey { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ImeMode { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic InvokeRequired { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsAccessible { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsDisposed { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsHandleCreated { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsMirrored { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic LayoutEngine { get; set; }
		|        
		|        [Browsable(false)]
		|        public dynamic LiveSetting { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Margin { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic MaximumSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic MinimumSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Padding { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic PreferredSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RecreatingHandle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Region { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RightToLeft { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Site { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic UseCompatibleTextRendering { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic UseMnemonic { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic WindowTarget { get; set; }
		|
		|        [Browsable(false)]
		|        public new LinkArea LinkArea { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGrid" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic AccessibilityObject { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleDefaultActionDescription { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleDescription { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleName { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AccessibleRole { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AllowDrop { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AllowNavigation { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AlternatingBackColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoScrollOffset { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic AutoSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BackgroundImageLayout { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BindingContext { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic BorderStyle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CanSelect { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CaptionFont { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CaptionForeColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CausesValidation { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ColumnHeadersVisible { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic CompanyName { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Container { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ContainsFocus { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ContextMenuStrip { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Created { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DataBindings { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DataSource { get; set; }
		|        
		|        [Browsable(false)]
		|        public dynamic DeviceDpi { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic DisplayRectangle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Disposing { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FirstVisibleColumn { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic FlatMode { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic GridLineColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic GridLineStyle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Handle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic HasChildren { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic HeaderBackColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic HeaderFont { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic HeaderForeColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ImeMode { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic InvokeRequired { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsAccessible { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsDisposed { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsHandleCreated { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IsMirrored { get; set; }
		|        
		|        [Browsable(false)]
		|        public dynamic Item { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic LayoutEngine { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic LinkColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic LinkHoverColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Margin { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic MaximumSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic MinimumSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Padding { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ParentRowsBackColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ParentRowsForeColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ParentRowsLabelStyle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ParentRowsVisible { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic PreferredColumnWidth { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic PreferredSize { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RecreatingHandle { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Region { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RightToLeft { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RowHeadersVisible { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic RowHeaderWidth { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic SelectionBackColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic SelectionForeColor { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Site { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic VisibleColumnCount { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic VisibleRowCount { get; set; }
		|
		|        [Browsable(false)]
		|        public new string DataMember { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic WindowTarget { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListViewItem" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic Group { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ImageKey { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic IndentCount { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ListView { get; set; }
		|
		|        [DisplayName(""(Name)"")]
		|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
		|        [Category(""Разработка"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public new string Name
		|        {
		|            get { return base.Name; }
		|            set { base.Name = value; }
		|        }
		|
		|        [Browsable(false)]
		|        public new dynamic Position { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic StateImageIndex { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|        
		|        [Browsable(false)]
		|        public new dynamic ToolTipText { get; set; }
		|";
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListViewSubItem" Тогда
		Стр = Стр + 
		"        [Browsable(false)]
		|        public new dynamic Bounds { get; set; }
		|
		|        [DisplayName(""(Name)"")]
		|        [Description(""Указывает имя, используемое в коде для идентификации объекта."")]
		|        [Category(""Разработка"")]
		|        [Browsable(true)]
		|        [ReadOnly(true)]
		|        public new string Name
		|        {
		|            get { return base.Name; }
		|            set { base.Name = value; }
		|        }
		|
		|        [Browsable(false)]
		|        public new dynamic Tag { get; set; }
		|";
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	Иначе
		Список1 = СортироватьСтроку(СтрСкрытьДляИсходного);
		СтрСкрытьДляИсходного = "";
		КлючевоеСлово = "";
		Для А12555 = 0 По Список1.Количество() - 1 Цикл
			СтрокаСписка = СокрЛП(Список1.Получить(А12555).Значение);
			Если СтрокаСписка <> "" Тогда
				Если (СтрокаСписка = "DeviceDpi") или 
					(СтрокаСписка = "ScaleScrollBarForDpiChange") или 
					(СтрокаСписка = "LiveSetting") или 
					(СтрокаСписка = "Item") Тогда
					КлючевоеСлово = "";
				Иначе
					КлючевоеСлово = "new ";
				КонецЕсли;
			
				Стр = Стр + 
				"        [Browsable(false)]
				|        public " + КлючевоеСлово + "dynamic " + СтрокаСписка + " { get; set; }
				|        
				|";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Стр;
КонецФункции//КлассСкрытыхСвойств(ИмяКонтекстКлассаАнгл, СкрытыеСвойства)

Функция СортироватьСтроку(СтрокаДляСортировки)
	Список = Новый СписокЗначений;
	М = СтрРазделить(СтрокаДляСортировки, " ", Ложь);
	Для А = 0 По М.ВГраница() Цикл
		Стр1 = СокрЛП(М[А]);
		Список.Добавить(Стр1);
	КонецЦикла;
	Список.СортироватьПоЗначению();
	Возврат Список;
КонецФункции//СортироватьСтроку(СтрокаДляСортировки)

Функция СвойстваКласса(ИмяКонтекстКлассаАнгл)
	СортированныйСписок1 = Ф.СортированныйСписок();
	Если ИмяКонтекстКлассаАнгл = "MainMenu" Тогда
		СортированныйСписок1.Добавить("MenuItems", "MenuItems");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.MainMenu" Тогда
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("IsParent", "IsParent");
		СортированныйСписок1.Добавить("MdiListItem", "MdiListItem");
		СортированныйСписок1.Добавить("MenuItems", "MenuItems");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Tag", "Tag");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "StatusBarPanel" Тогда
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Icon", "Icon");
		СортированныйСписок1.Добавить("MinWidth", "MinWidth");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.StatusBarPanel" Тогда
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("Icon", "Icon");
		СортированныйСписок1.Добавить("MinWidth", "MinWidth");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Style", "Style");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("ToolTipText", "ToolTipText");
		СортированныйСписок1.Добавить("Width", "Width");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListViewSubItem" Тогда
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ListViewItem.ListViewSubItem" Тогда
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListViewItem" Тогда
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("Index", "Index");
		СортированныйСписок1.Добавить("Selected", "Selected");
		СортированныйСписок1.Добавить("SubItems", "SubItems");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("UseItemStyleForSubItems", "UseItemStyleForSubItems");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ListViewItem" Тогда
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Group", "Group");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("IndentCount", "IndentCount");
		СортированныйСписок1.Добавить("Index", "Index");
		СортированныйСписок1.Добавить("ListView", "ListView");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Position", "Position");
		СортированныйСписок1.Добавить("Selected", "Selected");
		СортированныйСписок1.Добавить("StateImageIndex", "StateImageIndex");
		СортированныйСписок1.Добавить("SubItems", "SubItems");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("ToolTipText", "ToolTipText");
		СортированныйСписок1.Добавить("UseItemStyleForSubItems", "UseItemStyleForSubItems");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColumnHeader" Тогда
		СортированныйСписок1.Добавить("Index", "Index");
		СортированныйСписок1.Добавить("SortType", "SortType");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ColumnHeader" Тогда
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("DisplayIndex", "DisplayIndex");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("Index", "Index");
		СортированныйСписок1.Добавить("ListView", "ListView");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("Width", "Width");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridTextBoxColumn" Тогда
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("HeaderText", "HeaderText");
		СортированныйСписок1.Добавить("MappingName", "MappingName");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("TextBox", "TextBox");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.DataGridTextBoxColumn" Тогда
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("DataGridTableStyle", "DataGridTableStyle");
		СортированныйСписок1.Добавить("Format", "Format");
		СортированныйСписок1.Добавить("FormatInfo", "FormatInfo");
		СортированныйСписок1.Добавить("HeaderAccessibleObject", "HeaderAccessibleObject");
		СортированныйСписок1.Добавить("HeaderText", "HeaderText");
		СортированныйСписок1.Добавить("MappingName", "MappingName");
		СортированныйСписок1.Добавить("NullText", "NullText");
		СортированныйСписок1.Добавить("PropertyDescriptor", "PropertyDescriptor");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("TextBox", "TextBox");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridBoolColumn" Тогда
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("HeaderText", "HeaderText");
		СортированныйСписок1.Добавить("MappingName", "MappingName");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.DataGridBoolColumn" Тогда
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("AllowNull", "AllowNull");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("DataGridTableStyle", "DataGridTableStyle");
		СортированныйСписок1.Добавить("FalseValue", "FalseValue");
		СортированныйСписок1.Добавить("HeaderAccessibleObject", "HeaderAccessibleObject");
		СортированныйСписок1.Добавить("HeaderText", "HeaderText");
		СортированныйСписок1.Добавить("MappingName", "MappingName");
		СортированныйСписок1.Добавить("NullText", "NullText");
		СортированныйСписок1.Добавить("NullValue", "NullValue");
		СортированныйСписок1.Добавить("PropertyDescriptor", "PropertyDescriptor");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("TrueValue", "TrueValue");
		СортированныйСписок1.Добавить("Width", "Width");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGridTableStyle" Тогда
		СортированныйСписок1.Добавить("AllowSorting", "AllowSorting");
		СортированныйСписок1.Добавить("AlternatingBackColor", "AlternatingBackColor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("ColumnHeadersVisible", "ColumnHeadersVisible");
		СортированныйСписок1.Добавить("DataGrid", "DataGrid");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("GridColumnStyles", "GridColumnStyles");
		СортированныйСписок1.Добавить("GridLineColor", "GridLineColor");
		СортированныйСписок1.Добавить("HeaderBackColor", "HeaderBackColor");
		СортированныйСписок1.Добавить("HeaderFont", "HeaderFont");
		СортированныйСписок1.Добавить("HeaderForeColor", "HeaderForeColor");
		СортированныйСписок1.Добавить("MappingName", "MappingName");
		СортированныйСписок1.Добавить("PreferredColumnWidth", "PreferredColumnWidth");
		СортированныйСписок1.Добавить("PreferredRowHeight", "PreferredRowHeight");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("RowHeadersVisible", "RowHeadersVisible");
		СортированныйСписок1.Добавить("RowHeaderWidth", "RowHeaderWidth");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.DataGridTableStyle" Тогда
		СортированныйСписок1.Добавить("AllowSorting", "AllowSorting");
		СортированныйСписок1.Добавить("AlternatingBackColor", "AlternatingBackColor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("ColumnHeadersVisible", "ColumnHeadersVisible");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("DataGrid", "DataGrid");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("GridColumnStyles", "GridColumnStyles");
		СортированныйСписок1.Добавить("GridLineColor", "GridLineColor");
		СортированныйСписок1.Добавить("GridLineStyle", "GridLineStyle");
		СортированныйСписок1.Добавить("HeaderBackColor", "HeaderBackColor");
		СортированныйСписок1.Добавить("HeaderFont", "HeaderFont");
		СортированныйСписок1.Добавить("HeaderForeColor", "HeaderForeColor");
		СортированныйСписок1.Добавить("LinkColor", "LinkColor");
		СортированныйСписок1.Добавить("LinkHoverColor", "LinkHoverColor");
		СортированныйСписок1.Добавить("MappingName", "MappingName");
		СортированныйСписок1.Добавить("PreferredColumnWidth", "PreferredColumnWidth");
		СортированныйСписок1.Добавить("PreferredRowHeight", "PreferredRowHeight");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("RowHeadersVisible", "RowHeadersVisible");
		СортированныйСписок1.Добавить("RowHeaderWidth", "RowHeaderWidth");
		СортированныйСписок1.Добавить("SelectionBackColor", "SelectionBackColor");
		СортированныйСписок1.Добавить("SelectionForeColor", "SelectionForeColor");
		СортированныйСписок1.Добавить("Site", "Site");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolBarButton" Тогда
		СортированныйСписок1.Добавить("DropDownMenu", "DropDownMenu");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("PartialPush", "PartialPush");
		СортированныйСписок1.Добавить("Pushed", "Pushed");
		СортированныйСписок1.Добавить("Rectangle", "Rectangle");
		СортированныйСписок1.Добавить("Style", "Style");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("ToolTipText", "ToolTipText");
		СортированныйСписок1.Добавить("Visible", "Visible");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ToolBarButton" Тогда
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("DropDownMenu", "DropDownMenu");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PartialPush", "PartialPush");
		СортированныйСписок1.Добавить("Pushed", "Pushed");
		СортированныйСписок1.Добавить("Rectangle", "Rectangle");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Style", "Style");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("ToolTipText", "ToolTipText");
		СортированныйСписок1.Добавить("Visible", "Visible");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "TabPage" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("ToolTipText", "ToolTipText");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.TabPage" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("AutoScrollMinSize", "AutoScrollMinSize");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoScrollPosition", "AutoScrollPosition");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoSizeMode", "AutoSizeMode");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HorizontalScroll", "HorizontalScroll");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("ToolTipText", "ToolTipText");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseVisualStyleBackColor", "UseVisualStyleBackColor");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("VerticalScroll", "VerticalScroll");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");	
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Button" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DialogResult", "DialogResult");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.Button" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoEllipsis", "AutoEllipsis");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoSizeMode", "AutoSizeMode");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DialogResult", "DialogResult");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatAppearance", "FlatAppearance");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextImageRelation", "TextImageRelation");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseMnemonic", "UseMnemonic");
		СортированныйСписок1.Добавить("UseVisualStyleBackColor", "UseVisualStyleBackColor");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "CheckBox" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoCheck", "AutoCheck");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CheckAlign", "CheckAlign");
		СортированныйСписок1.Добавить("CheckChanged", "CheckChanged");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("CheckState", "CheckState");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.CheckBox" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoCheck", "AutoCheck");
		СортированныйСписок1.Добавить("AutoEllipsis", "AutoEllipsis");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("CheckAlign", "CheckAlign");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("CheckState", "CheckState");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatAppearance", "FlatAppearance");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextImageRelation", "TextImageRelation");
		СортированныйСписок1.Добавить("ThreeState", "ThreeState");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseMnemonic", "UseMnemonic");
		СортированныйСписок1.Добавить("UseVisualStyleBackColor", "UseVisualStyleBackColor");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ColorDialog" Тогда
		СортированныйСписок1.Добавить("Color", "Color");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ColorDialog" Тогда
		СортированныйСписок1.Добавить("AllowFullOpen", "AllowFullOpen");
		СортированныйСписок1.Добавить("AnyColor", "AnyColor");
		СортированныйСписок1.Добавить("Color", "Color");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("CustomColors", "CustomColors");
		СортированныйСписок1.Добавить("FullOpen", "FullOpen");
		СортированныйСписок1.Добавить("ShowHelp", "ShowHelp");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("SolidColorOnly", "SolidColorOnly");
		СортированныйСписок1.Добавить("Tag", "Tag");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ComboBox" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataSource", "DataSource");
		СортированныйСписок1.Добавить("DisplayMember", "DisplayMember");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("DrawMode", "DrawMode");
		СортированныйСписок1.Добавить("DropDown", "DropDown");
		СортированныйСписок1.Добавить("DropDownStyle", "DropDownStyle");
		СортированныйСписок1.Добавить("DropDownWidth", "DropDownWidth");
		СортированныйСписок1.Добавить("DroppedDown", "DroppedDown");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("IntegralHeight", "IntegralHeight");
		СортированныйСписок1.Добавить("ItemHeight", "ItemHeight");
		СортированныйСписок1.Добавить("Items", "Items");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MaxDropDownItems", "MaxDropDownItems");
		СортированныйСписок1.Добавить("MaxLength", "MaxLength");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("SelectedIndex", "SelectedIndex");
		СортированныйСписок1.Добавить("SelectedIndexChanged", "SelectedIndexChanged");
		СортированныйСписок1.Добавить("SelectedText", "SelectedText");
		СортированныйСписок1.Добавить("SelectedValue", "SelectedValue");
		СортированныйСписок1.Добавить("SelectionLength", "SelectionLength");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("Sorted", "Sorted");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("ValueMember", "ValueMember");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ComboBox" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoCompleteCustomSource", "AutoCompleteCustomSource");
		СортированныйСписок1.Добавить("AutoCompleteMode", "AutoCompleteMode");
		СортированныйСписок1.Добавить("AutoCompleteSource", "AutoCompleteSource");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DataSource", "DataSource");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayMember", "DisplayMember");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DrawMode", "DrawMode");
		СортированныйСписок1.Добавить("DropDownHeight", "DropDownHeight");
		СортированныйСписок1.Добавить("DropDownStyle", "DropDownStyle");
		СортированныйСписок1.Добавить("DropDownWidth", "DropDownWidth");
		СортированныйСписок1.Добавить("DroppedDown", "DroppedDown");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FormatInfo", "FormatInfo");
		СортированныйСписок1.Добавить("FormatString", "FormatString");
		СортированныйСписок1.Добавить("FormattingEnabled", "FormattingEnabled");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("IntegralHeight", "IntegralHeight");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("ItemHeight", "ItemHeight");
		СортированныйСписок1.Добавить("Items", "Items");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaxDropDownItems", "MaxDropDownItems");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MaxLength", "MaxLength");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("SelectedIndex", "SelectedIndex");
		СортированныйСписок1.Добавить("SelectedItem", "SelectedItem");
		СортированныйСписок1.Добавить("SelectedText", "SelectedText");
		СортированныйСписок1.Добавить("SelectedValue", "SelectedValue");
		СортированныйСписок1.Добавить("SelectionLength", "SelectionLength");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("Sorted", "Sorted");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("ValueMember", "ValueMember");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DataGrid" Тогда
		СортированныйСписок1.Добавить("AllowSorting", "AllowSorting");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundColor", "BackgroundColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CaptionBackColor", "CaptionBackColor");
		СортированныйСписок1.Добавить("CaptionText", "CaptionText");
		СортированныйСписок1.Добавить("CaptionVisible", "CaptionVisible");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("CurrentCell", "CurrentCell");
		СортированныйСписок1.Добавить("CurrentCellChanged", "CurrentCellChanged");
		СортированныйСписок1.Добавить("CurrentRowIndex", "CurrentRowIndex");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataMember", "DataMember");
		СортированныйСписок1.Добавить("DataSource", "DataSource");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredRowHeight", "PreferredRowHeight");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TableStyles", "TableStyles");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.DataGrid" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("AllowNavigation", "AllowNavigation");
		СортированныйСписок1.Добавить("AllowSorting", "AllowSorting");
		СортированныйСписок1.Добавить("AlternatingBackColor", "AlternatingBackColor");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundColor", "BackgroundColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("CaptionBackColor", "CaptionBackColor");
		СортированныйСписок1.Добавить("CaptionFont", "CaptionFont");
		СортированныйСписок1.Добавить("CaptionForeColor", "CaptionForeColor");
		СортированныйСписок1.Добавить("CaptionText", "CaptionText");
		СортированныйСписок1.Добавить("CaptionVisible", "CaptionVisible");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ColumnHeadersVisible", "ColumnHeadersVisible");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("CurrentCell", "CurrentCell");
		СортированныйСписок1.Добавить("CurrentRowIndex", "CurrentRowIndex");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DataMember", "DataMember");
		СортированныйСписок1.Добавить("DataSource", "DataSource");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FirstVisibleColumn", "FirstVisibleColumn");
		СортированныйСписок1.Добавить("FlatMode", "FlatMode");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("GridLineColor", "GridLineColor");
		СортированныйСписок1.Добавить("GridLineStyle", "GridLineStyle");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("HeaderBackColor", "HeaderBackColor");
		СортированныйСписок1.Добавить("HeaderFont", "HeaderFont");
		СортированныйСписок1.Добавить("HeaderForeColor", "HeaderForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("Item", "Item");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LinkColor", "LinkColor");
		СортированныйСписок1.Добавить("LinkHoverColor", "LinkHoverColor");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ParentRowsBackColor", "ParentRowsBackColor");
		СортированныйСписок1.Добавить("ParentRowsForeColor", "ParentRowsForeColor");
		СортированныйСписок1.Добавить("ParentRowsLabelStyle", "ParentRowsLabelStyle");
		СортированныйСписок1.Добавить("ParentRowsVisible", "ParentRowsVisible");
		СортированныйСписок1.Добавить("PreferredColumnWidth", "PreferredColumnWidth");
		СортированныйСписок1.Добавить("PreferredRowHeight", "PreferredRowHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RowHeadersVisible", "RowHeadersVisible");
		СортированныйСписок1.Добавить("RowHeaderWidth", "RowHeaderWidth");
		СортированныйСписок1.Добавить("SelectionBackColor", "SelectionBackColor");
		СортированныйСписок1.Добавить("SelectionForeColor", "SelectionForeColor");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TableStyles", "TableStyles");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("VisibleColumnCount", "VisibleColumnCount");
		СортированныйСписок1.Добавить("VisibleRowCount", "VisibleRowCount");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "DateTimePicker" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("CustomFormat", "CustomFormat");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("DropDownAlign", "DropDownAlign");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Format", "Format");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MaxDate", "MaxDate");
		СортированныйСписок1.Добавить("MinDate", "MinDate");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("ShowCheckBox", "ShowCheckBox");
		СортированныйСписок1.Добавить("ShowUpDown", "ShowUpDown");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("ValueChanged", "ValueChanged");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("ПользовательскийФормат", "ПользовательскийФормат");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.DateTimePicker" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CalendarFont", "CalendarFont");
		СортированныйСписок1.Добавить("CalendarForeColor", "CalendarForeColor");
		СортированныйСписок1.Добавить("CalendarMonthBackground", "CalendarMonthBackground");
		СортированныйСписок1.Добавить("CalendarTitleBackColor", "CalendarTitleBackColor");
		СортированныйСписок1.Добавить("CalendarTitleForeColor", "CalendarTitleForeColor");
		СортированныйСписок1.Добавить("CalendarTrailingForeColor", "CalendarTrailingForeColor");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("CustomFormat", "CustomFormat");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DropDownAlign", "DropDownAlign");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Format", "Format");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaxDate", "MaxDate");
		СортированныйСписок1.Добавить("MaximumDateTime", "MaximumDateTime");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinDate", "MinDate");
		СортированныйСписок1.Добавить("MinimumDateTime", "MinimumDateTime");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("ShowCheckBox", "ShowCheckBox");
		СортированныйСписок1.Добавить("ShowUpDown", "ShowUpDown");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FileSystemWatcher" Тогда
		СортированныйСписок1.Добавить("Changed", "Changed");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Deleted", "Deleted");
		СортированныйСписок1.Добавить("EnableRaisingEvents", "EnableRaisingEvents");
		СортированныйСписок1.Добавить("Filter", "Filter");
		СортированныйСписок1.Добавить("IncludeSubDirectories", "IncludeSubDirectories");
		СортированныйСписок1.Добавить("InternalBufferSize", "InternalBufferSize");
		СортированныйСписок1.Добавить("NotifyFilter", "NotifyFilter");
		СортированныйСписок1.Добавить("Path", "Path");
		СортированныйСписок1.Добавить("Renamed", "Renamed");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.IO.FileSystemWatcher" Тогда
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("EnableRaisingEvents", "EnableRaisingEvents");
		СортированныйСписок1.Добавить("Filter", "Filter");
		СортированныйСписок1.Добавить("IncludeSubdirectories", "IncludeSubdirectories");
		СортированныйСписок1.Добавить("InternalBufferSize", "InternalBufferSize");
		СортированныйСписок1.Добавить("NotifyFilter", "NotifyFilter");
		СортированныйСписок1.Добавить("Path", "Path");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("SynchronizingObject", "SynchronizingObject");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FolderBrowserDialog" Тогда
		СортированныйСписок1.Добавить("Description", "Description");
		СортированныйСписок1.Добавить("RootFolder", "RootFolder");
		СортированныйСписок1.Добавить("SelectedPath", "SelectedPath");
		СортированныйСписок1.Добавить("ShowNewFolderButton", "ShowNewFolderButton");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.FolderBrowserDialog" Тогда
		СортированныйСписок1.Добавить("CanRaiseEvents", "CanRaiseEvents");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("Description", "Description");
		СортированныйСписок1.Добавить("DesignMode", "DesignMode");
		СортированныйСписок1.Добавить("Events", "Events");
		СортированныйСписок1.Добавить("RootFolder", "RootFolder");
		СортированныйСписок1.Добавить("SelectedPath", "SelectedPath");
		СортированныйСписок1.Добавить("ShowNewFolderButton", "ShowNewFolderButton");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Tag", "Tag");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "FontDialog" Тогда
		СортированныйСписок1.Добавить("Color", "Color");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.FontDialog" Тогда
		СортированныйСписок1.Добавить("AllowScriptChange", "AllowScriptChange");
		СортированныйСписок1.Добавить("AllowSimulations", "AllowSimulations");
		СортированныйСписок1.Добавить("AllowVectorFonts", "AllowVectorFonts");
		СортированныйСписок1.Добавить("AllowVerticalFonts", "AllowVerticalFonts");
		СортированныйСписок1.Добавить("Color", "Color");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("FixedPitchOnly", "FixedPitchOnly");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontMustExist", "FontMustExist");
		СортированныйСписок1.Добавить("MaxSize", "MaxSize");
		СортированныйСписок1.Добавить("MinSize", "MinSize");
		СортированныйСписок1.Добавить("ScriptsOnly", "ScriptsOnly");
		СортированныйСписок1.Добавить("ShowApply", "ShowApply");
		СортированныйСписок1.Добавить("ShowColor", "ShowColor");
		СортированныйСписок1.Добавить("ShowEffects", "ShowEffects");
		СортированныйСписок1.Добавить("ShowHelp", "ShowHelp");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Tag", "Tag");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Form" Тогда
		СортированныйСписок1.Добавить("AcceptButton", "AcceptButton");
		СортированныйСписок1.Добавить("Activated", "Activated");
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("ActiveForm", "ActiveForm");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScaleBaseSize", "AutoScaleBaseSize");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CancelButton", "CancelButton");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("Closed", "Closed");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlBox", "ControlBox");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Deactivate", "Deactivate");
		СортированныйСписок1.Добавить("DesktopLocation", "DesktopLocation");
		СортированныйСписок1.Добавить("DialogResult", "DialogResult");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FormBorderStyle", "FormBorderStyle");
		СортированныйСписок1.Добавить("FormClosing", "FormClosing");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Icon", "Icon");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyPreview", "KeyPreview");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Load", "Load");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MaximizeBox", "MaximizeBox");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("Menu", "Menu");
		СортированныйСписок1.Добавить("MinimizeBox", "MinimizeBox");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Owner", "Owner");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("ShowInTaskbar", "ShowInTaskbar");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("StartPosition", "StartPosition");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("TopMost", "TopMost");
		СортированныйСписок1.Добавить("TransparencyKey", "TransparencyKey");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowState", "WindowState");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.Form" Тогда
		СортированныйСписок1.Добавить("AcceptButton", "AcceptButton");
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("ActiveForm", "ActiveForm");
		СортированныйСписок1.Добавить("ActiveMdiChild", "ActiveMdiChild");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("AllowTransparency", "AllowTransparency");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScale", "AutoScale");
		СортированныйСписок1.Добавить("AutoScaleBaseSize", "AutoScaleBaseSize");
		СортированныйСписок1.Добавить("AutoScaleDimensions", "AutoScaleDimensions");
		СортированныйСписок1.Добавить("AutoScaleMode", "AutoScaleMode");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("AutoScrollMinSize", "AutoScrollMinSize");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoScrollPosition", "AutoScrollPosition");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoSizeMode", "AutoSizeMode");
		СортированныйСписок1.Добавить("AutoValidate", "AutoValidate");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CancelButton", "CancelButton");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("ControlBox", "ControlBox");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("CurrentAutoScaleDimensions", "CurrentAutoScaleDimensions");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DesktopBounds", "DesktopBounds");
		СортированныйСписок1.Добавить("DesktopLocation", "DesktopLocation");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DialogResult", "DialogResult");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FormBorderStyle", "FormBorderStyle");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HelpButton", "HelpButton");
		СортированныйСписок1.Добавить("HorizontalScroll", "HorizontalScroll");
		СортированныйСписок1.Добавить("Icon", "Icon");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMdiChild", "IsMdiChild");
		СортированныйСписок1.Добавить("IsMdiContainer", "IsMdiContainer");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("IsRestrictedWindow", "IsRestrictedWindow");
		СортированныйСписок1.Добавить("KeyPreview", "KeyPreview");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("MainMenuStrip", "MainMenuStrip");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximizeBox", "MaximizeBox");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MdiChildren", "MdiChildren");
		СортированныйСписок1.Добавить("MdiParent", "MdiParent");
		СортированныйСписок1.Добавить("Menu", "Menu");
		СортированныйСписок1.Добавить("MergedMenu", "MergedMenu");
		СортированныйСписок1.Добавить("MinimizeBox", "MinimizeBox");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Modal", "Modal");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Opacity", "Opacity");
		СортированныйСписок1.Добавить("OwnedForms", "OwnedForms");
		СортированныйСписок1.Добавить("Owner", "Owner");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ParentForm", "ParentForm");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("RestoreBounds", "RestoreBounds");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("ShowIcon", "ShowIcon");
		СортированныйСписок1.Добавить("ShowInTaskbar", "ShowInTaskbar");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeGripStyle", "SizeGripStyle");
		СортированныйСписок1.Добавить("StartPosition", "StartPosition");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevel", "TopLevel");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("TopMost", "TopMost");
		СортированныйСписок1.Добавить("TransparencyKey", "TransparencyKey");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("VerticalScroll", "VerticalScroll");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowState", "WindowState");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "GroupBox" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.GroupBox" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoSizeMode", "AutoSizeMode");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "HScrollBar" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("LargeChange", "LargeChange");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("ManagedProperties", "ManagedProperties");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Scroll", "Scroll");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SmallChange", "SmallChange");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("ValueChanged", "ValueChanged");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.HScrollBar" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LargeChange", "LargeChange");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("ScaleScrollBarForDpiChange", "ScaleScrollBarForDpiChange");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SmallChange", "SmallChange");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Label" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredWidth", "PreferredWidth");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.Label" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoEllipsis", "AutoEllipsis");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LiveSetting", "LiveSetting");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("PreferredWidth", "PreferredWidth");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseMnemonic", "UseMnemonic");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "LinkLabel" Тогда
		СортированныйСписок1.Добавить("ActiveLinkColor", "ActiveLinkColor");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LinkArea", "LinkArea");
		СортированныйСписок1.Добавить("LinkBehavior", "LinkBehavior");
		СортированныйСписок1.Добавить("LinkClicked", "LinkClicked");
		СортированныйСписок1.Добавить("LinkColor", "LinkColor");
		СортированныйСписок1.Добавить("Links", "Links");
		СортированныйСписок1.Добавить("LinkVisited", "LinkVisited");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredWidth", "PreferredWidth");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("VisitedLinkColor", "VisitedLinkColor");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.LinkLabel" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("ActiveLinkColor", "ActiveLinkColor");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoEllipsis", "AutoEllipsis");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisabledLinkColor", "DisabledLinkColor");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LinkArea", "LinkArea");
		СортированныйСписок1.Добавить("LinkBehavior", "LinkBehavior");
		СортированныйСписок1.Добавить("LinkColor", "LinkColor");
		СортированныйСписок1.Добавить("Links", "Links");
		СортированныйСписок1.Добавить("LinkVisited", "LinkVisited");
		СортированныйСписок1.Добавить("LiveSetting", "LiveSetting");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("PreferredWidth", "PreferredWidth");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseMnemonic", "UseMnemonic");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("VisitedLinkColor", "VisitedLinkColor");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListBox" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ColumnWidth", "ColumnWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataSource", "DataSource");
		СортированныйСписок1.Добавить("DisplayMember", "DisplayMember");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HorizontalExtent", "HorizontalExtent");
		СортированныйСписок1.Добавить("HorizontalScrollbar", "HorizontalScrollbar");
		СортированныйСписок1.Добавить("IntegralHeight", "IntegralHeight");
		СортированныйСписок1.Добавить("ItemHeight", "ItemHeight");
		СортированныйСписок1.Добавить("Items", "Items");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("MultiColumn", "MultiColumn");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("ScrollAlwaysVisible", "ScrollAlwaysVisible");
		СортированныйСписок1.Добавить("SelectedIndex", "SelectedIndex");
		СортированныйСписок1.Добавить("SelectedIndexChanged", "SelectedIndexChanged");
		СортированныйСписок1.Добавить("SelectedIndices", "SelectedIndices");
		СортированныйСписок1.Добавить("SelectedItem", "SelectedItem");
		СортированныйСписок1.Добавить("SelectedItems", "SelectedItems");
		СортированныйСписок1.Добавить("SelectedValue", "SelectedValue");
		СортированныйСписок1.Добавить("SelectionMode", "SelectionMode");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("Sorted", "Sorted");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopIndex", "TopIndex");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseTabStops", "UseTabStops");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("ValueMember", "ValueMember");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ListBox" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ColumnWidth", "ColumnWidth");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("CustomTabOffsets", "CustomTabOffsets");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DataSource", "DataSource");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayMember", "DisplayMember");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DrawMode", "DrawMode");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FormatInfo", "FormatInfo");
		СортированныйСписок1.Добавить("FormatString", "FormatString");
		СортированныйСписок1.Добавить("FormattingEnabled", "FormattingEnabled");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HorizontalExtent", "HorizontalExtent");
		СортированныйСписок1.Добавить("HorizontalScrollbar", "HorizontalScrollbar");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("IntegralHeight", "IntegralHeight");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("ItemHeight", "ItemHeight");
		СортированныйСписок1.Добавить("Items", "Items");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("MultiColumn", "MultiColumn");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("ScrollAlwaysVisible", "ScrollAlwaysVisible");
		СортированныйСписок1.Добавить("SelectedIndex", "SelectedIndex");
		СортированныйСписок1.Добавить("SelectedIndices", "SelectedIndices");
		СортированныйСписок1.Добавить("SelectedItem", "SelectedItem");
		СортированныйСписок1.Добавить("SelectedItems", "SelectedItems");
		СортированныйСписок1.Добавить("SelectedValue", "SelectedValue");
		СортированныйСписок1.Добавить("SelectionMode", "SelectionMode");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("Sorted", "Sorted");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopIndex", "TopIndex");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCustomTabOffsets", "UseCustomTabOffsets");
		СортированныйСписок1.Добавить("UseTabStops", "UseTabStops");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("ValueMember", "ValueMember");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ListView" Тогда
		СортированныйСписок1.Добавить("Activation", "Activation");
		СортированныйСписок1.Добавить("AfterLabelEdit", "AfterLabelEdit");
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("AllowColumnReorder", "AllowColumnReorder");
		СортированныйСписок1.Добавить("AllowSorting", "AllowSorting");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoArrange", "AutoArrange");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BeforeLabelEdit", "BeforeLabelEdit");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CheckBoxes", "CheckBoxes");
		СортированныйСписок1.Добавить("CheckedItems", "CheckedItems");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ColumnClick", "ColumnClick");
		СортированныйСписок1.Добавить("Columns", "Columns");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("FocusedItem", "FocusedItem");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FullRowSelect", "FullRowSelect");
		СортированныйСписок1.Добавить("GridLines", "GridLines");
		СортированныйСписок1.Добавить("HeaderStyle", "HeaderStyle");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("HoverSelection", "HoverSelection");
		СортированныйСписок1.Добавить("ItemActivate", "ItemActivate");
		СортированныйСписок1.Добавить("ItemCheck", "ItemCheck");
		СортированныйСписок1.Добавить("Items", "Items");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("LabelEdit", "LabelEdit");
		СортированныйСписок1.Добавить("LabelWrap", "LabelWrap");
		СортированныйСписок1.Добавить("LargeImageList", "LargeImageList");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("MultiSelect", "MultiSelect");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Scrollable", "Scrollable");
		СортированныйСписок1.Добавить("SelectedIndexChanged", "SelectedIndexChanged");
		СортированныйСписок1.Добавить("SelectedItems", "SelectedItems");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SmallImageList", "SmallImageList");
		СортированныйСписок1.Добавить("SortedColumn", "SortedColumn");
		СортированныйСписок1.Добавить("Sorting", "Sorting");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("View", "View");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ListView" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("Activation", "Activation");
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("AllowColumnReorder", "AllowColumnReorder");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoArrange", "AutoArrange");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BackgroundImageTiled", "BackgroundImageTiled");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("CheckBoxes", "CheckBoxes");
		СортированныйСписок1.Добавить("CheckedIndices", "CheckedIndices");
		СортированныйСписок1.Добавить("CheckedItems", "CheckedItems");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("Columns", "Columns");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("FocusedItem", "FocusedItem");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FullRowSelect", "FullRowSelect");
		СортированныйСписок1.Добавить("GridLines", "GridLines");
		СортированныйСписок1.Добавить("Groups", "Groups");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("HeaderStyle", "HeaderStyle");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("HotTracking", "HotTracking");
		СортированныйСписок1.Добавить("HoverSelection", "HoverSelection");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InsertionMark", "InsertionMark");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("Items", "Items");
		СортированныйСписок1.Добавить("LabelEdit", "LabelEdit");
		СортированныйСписок1.Добавить("LabelWrap", "LabelWrap");
		СортированныйСписок1.Добавить("LargeImageList", "LargeImageList");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("ListViewItemSorter", "ListViewItemSorter");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("MultiSelect", "MultiSelect");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("OwnerDraw", "OwnerDraw");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("Scrollable", "Scrollable");
		СортированныйСписок1.Добавить("SelectedIndices", "SelectedIndices");
		СортированныйСписок1.Добавить("SelectedItems", "SelectedItems");
		СортированныйСписок1.Добавить("ShowGroups", "ShowGroups");
		СортированныйСписок1.Добавить("ShowItemToolTips", "ShowItemToolTips");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SmallImageList", "SmallImageList");
		СортированныйСписок1.Добавить("Sorting", "Sorting");
		СортированныйСписок1.Добавить("StateImageList", "StateImageList");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TileSize", "TileSize");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopItem", "TopItem");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleStateImageBehavior", "UseCompatibleStateImageBehavior");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("View", "View");
		СортированныйСписок1.Добавить("VirtualListSize", "VirtualListSize");
		СортированныйСписок1.Добавить("VirtualMode", "VirtualMode");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "MonthCalendar" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AnnuallyBoldedDates", "AnnuallyBoldedDates");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BoldedDates", "BoldedDates");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DateChanged", "DateChanged");
		СортированныйСписок1.Добавить("DateSelected", "DateSelected");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("FirstDayOfWeek", "FirstDayOfWeek");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MaxDate", "MaxDate");
		СортированныйСписок1.Добавить("MaxSelectionCount", "MaxSelectionCount");
		СортированныйСписок1.Добавить("MinDate", "MinDate");
		СортированныйСписок1.Добавить("MonthlyBoldedDates", "MonthlyBoldedDates");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("SelectionEnd", "SelectionEnd");
		СортированныйСписок1.Добавить("SelectionRange", "SelectionRange");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("ShowToday", "ShowToday");
		СортированныйСписок1.Добавить("ShowTodayCircle", "ShowTodayCircle");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("TodayDate", "TodayDate");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.MonthCalendar" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AnnuallyBoldedDates", "AnnuallyBoldedDates");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BoldedDates", "BoldedDates");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CalendarDimensions", "CalendarDimensions");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FirstDayOfWeek", "FirstDayOfWeek");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaxDate", "MaxDate");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MaxSelectionCount", "MaxSelectionCount");
		СортированныйСписок1.Добавить("MinDate", "MinDate");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("MonthlyBoldedDates", "MonthlyBoldedDates");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("ScrollChange", "ScrollChange");
		СортированныйСписок1.Добавить("SelectionEnd", "SelectionEnd");
		СортированныйСписок1.Добавить("SelectionRange", "SelectionRange");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("ShowToday", "ShowToday");
		СортированныйСписок1.Добавить("ShowTodayCircle", "ShowTodayCircle");
		СортированныйСписок1.Добавить("ShowWeekNumbers", "ShowWeekNumbers");
		СортированныйСписок1.Добавить("SingleMonthSize", "SingleMonthSize");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TitleBackColor", "TitleBackColor");
		СортированныйСписок1.Добавить("TitleForeColor", "TitleForeColor");
		СортированныйСписок1.Добавить("TodayDate", "TodayDate");
		СортированныйСписок1.Добавить("TodayDateSet", "TodayDateSet");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("TrailingForeColor", "TrailingForeColor");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "NotifyIcon" Тогда
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Icon", "Icon");
		СортированныйСписок1.Добавить("Menu", "Menu");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("Visible", "Visible");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.NotifyIcon" Тогда
		СортированныйСписок1.Добавить("BalloonTipIcon", "BalloonTipIcon");
		СортированныйСписок1.Добавить("BalloonTipText", "BalloonTipText");
		СортированныйСписок1.Добавить("BalloonTipTitle", "BalloonTipTitle");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Icon", "Icon");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Visible", "Visible");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "NumericUpDown" Тогда
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DecimalPlaces", "DecimalPlaces");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Increment", "Increment");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("ValueChanged", "ValueChanged");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.NumericUpDown" Тогда
		СортированныйСписок1.Добавить("Accelerations", "Accelerations");
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScaleDimensions", "AutoScaleDimensions");
		СортированныйСписок1.Добавить("AutoScaleMode", "AutoScaleMode");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("AutoScrollMinSize", "AutoScrollMinSize");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoScrollPosition", "AutoScrollPosition");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoValidate", "AutoValidate");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("CurrentAutoScaleDimensions", "CurrentAutoScaleDimensions");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DecimalPlaces", "DecimalPlaces");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Hexadecimal", "Hexadecimal");
		СортированныйСписок1.Добавить("HorizontalScroll", "HorizontalScroll");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("Increment", "Increment");
		СортированныйСписок1.Добавить("InterceptArrowKeys", "InterceptArrowKeys");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ParentForm", "ParentForm");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("ThousandsSeparator", "ThousandsSeparator");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UpDownAlign", "UpDownAlign");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("VerticalScroll", "VerticalScroll");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "OpenFileDialog" Тогда
		СортированныйСписок1.Добавить("AddExtension", "AddExtension");
		СортированныйСписок1.Добавить("CheckFileExists", "CheckFileExists");
		СортированныйСписок1.Добавить("CheckPathExists", "CheckPathExists");
		СортированныйСписок1.Добавить("DefaultExt", "DefaultExt");
		СортированныйСписок1.Добавить("DereferenceLinks", "DereferenceLinks");
		СортированныйСписок1.Добавить("FileName", "FileName");
		СортированныйСписок1.Добавить("Filter", "Filter");
		СортированныйСписок1.Добавить("FilterIndex", "FilterIndex");
		СортированныйСписок1.Добавить("InitialDirectory", "InitialDirectory");
		СортированныйСписок1.Добавить("ReadOnlyChecked", "ReadOnlyChecked");
		СортированныйСписок1.Добавить("RestoreDirectory", "RestoreDirectory");
		СортированныйСписок1.Добавить("ShowReadOnly", "ShowReadOnly");
		СортированныйСписок1.Добавить("Title", "Title");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.OpenFileDialog" Тогда
		СортированныйСписок1.Добавить("AddExtension", "AddExtension");
		СортированныйСписок1.Добавить("AutoUpgradeEnabled", "AutoUpgradeEnabled");
		СортированныйСписок1.Добавить("CheckFileExists", "CheckFileExists");
		СортированныйСписок1.Добавить("CheckPathExists", "CheckPathExists");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("CustomPlaces", "CustomPlaces");
		СортированныйСписок1.Добавить("DefaultExt", "DefaultExt");
		СортированныйСписок1.Добавить("DereferenceLinks", "DereferenceLinks");
		СортированныйСписок1.Добавить("FileName", "FileName");
		СортированныйСписок1.Добавить("FileNames", "FileNames");
		СортированныйСписок1.Добавить("Filter", "Filter");
		СортированныйСписок1.Добавить("FilterIndex", "FilterIndex");
		СортированныйСписок1.Добавить("InitialDirectory", "InitialDirectory");
		СортированныйСписок1.Добавить("Multiselect", "Multiselect");
		СортированныйСписок1.Добавить("ReadOnlyChecked", "ReadOnlyChecked");
		СортированныйСписок1.Добавить("RestoreDirectory", "RestoreDirectory");
		СортированныйСписок1.Добавить("SafeFileName", "SafeFileName");
		СортированныйСписок1.Добавить("SafeFileNames", "SafeFileNames");
		СортированныйСписок1.Добавить("ShowHelp", "ShowHelp");
		СортированныйСписок1.Добавить("ShowReadOnly", "ShowReadOnly");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("SupportMultiDottedExtensions", "SupportMultiDottedExtensions");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Title", "Title");
		СортированныйСписок1.Добавить("ValidateNames", "ValidateNames");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Panel" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.Panel" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("AutoScrollMinSize", "AutoScrollMinSize");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoScrollPosition", "AutoScrollPosition");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoSizeMode", "AutoSizeMode");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HorizontalScroll", "HorizontalScroll");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("VerticalScroll", "VerticalScroll");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "PictureBox" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SizeMode", "SizeMode");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.PictureBox" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("ErrorImage", "ErrorImage");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageLocation", "ImageLocation");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InitialImage", "InitialImage");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeMode", "SizeMode");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("WaitOnLoad", "WaitOnLoad");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Process" Тогда
		СортированныйСписок1.Добавить("HasExited", "HasExited");
		СортированныйСписок1.Добавить("StandardOutput", "StandardOutput");
		СортированныйСписок1.Добавить("StartInfo", "StartInfo");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Diagnostics.Process" Тогда
		СортированныйСписок1.Добавить("BasePriority", "BasePriority");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("EnableRaisingEvents", "EnableRaisingEvents");
		СортированныйСписок1.Добавить("ExitCode", "ExitCode");
		СортированныйСписок1.Добавить("ExitTime", "ExitTime");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HandleCount", "HandleCount");
		СортированныйСписок1.Добавить("HasExited", "HasExited");
		СортированныйСписок1.Добавить("Id", "Id");
		СортированныйСписок1.Добавить("MachineName", "MachineName");
		СортированныйСписок1.Добавить("MainModule", "MainModule");
		СортированныйСписок1.Добавить("MainWindowHandle", "MainWindowHandle");
		СортированныйСписок1.Добавить("MainWindowTitle", "MainWindowTitle");
		СортированныйСписок1.Добавить("MaxWorkingSet", "MaxWorkingSet");
		СортированныйСписок1.Добавить("MinWorkingSet", "MinWorkingSet");
		СортированныйСписок1.Добавить("Modules", "Modules");
		СортированныйСписок1.Добавить("NonpagedSystemMemorySize", "NonpagedSystemMemorySize");
		СортированныйСписок1.Добавить("NonpagedSystemMemorySize64", "NonpagedSystemMemorySize64");
		СортированныйСписок1.Добавить("PagedMemorySize", "PagedMemorySize");
		СортированныйСписок1.Добавить("PagedMemorySize64", "PagedMemorySize64");
		СортированныйСписок1.Добавить("PagedSystemMemorySize", "PagedSystemMemorySize");
		СортированныйСписок1.Добавить("PagedSystemMemorySize64", "PagedSystemMemorySize64");
		СортированныйСписок1.Добавить("PeakPagedMemorySize", "PeakPagedMemorySize");
		СортированныйСписок1.Добавить("PeakPagedMemorySize64", "PeakPagedMemorySize64");
		СортированныйСписок1.Добавить("PeakVirtualMemorySize", "PeakVirtualMemorySize");
		СортированныйСписок1.Добавить("PeakVirtualMemorySize64", "PeakVirtualMemorySize64");
		СортированныйСписок1.Добавить("PeakWorkingSet", "PeakWorkingSet");
		СортированныйСписок1.Добавить("PeakWorkingSet64", "PeakWorkingSet64");
		СортированныйСписок1.Добавить("PriorityBoostEnabled", "PriorityBoostEnabled");
		СортированныйСписок1.Добавить("PriorityClass", "PriorityClass");
		СортированныйСписок1.Добавить("PrivateMemorySize", "PrivateMemorySize");
		СортированныйСписок1.Добавить("PrivateMemorySize64", "PrivateMemorySize64");
		СортированныйСписок1.Добавить("PrivilegedProcessorTime", "PrivilegedProcessorTime");
		СортированныйСписок1.Добавить("ProcessName", "ProcessName");
		СортированныйСписок1.Добавить("ProcessorAffinity", "ProcessorAffinity");
		СортированныйСписок1.Добавить("Responding", "Responding");
		СортированныйСписок1.Добавить("SafeHandle", "SafeHandle");
		СортированныйСписок1.Добавить("SessionId", "SessionId");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("StandardError", "StandardError");
		СортированныйСписок1.Добавить("StandardInput", "StandardInput");
		СортированныйСписок1.Добавить("StandardOutput", "StandardOutput");
		СортированныйСписок1.Добавить("StartInfo", "StartInfo");
		СортированныйСписок1.Добавить("StartTime", "StartTime");
		СортированныйСписок1.Добавить("SynchronizingObject", "SynchronizingObject");
		СортированныйСписок1.Добавить("Threads", "Threads");
		СортированныйСписок1.Добавить("TotalProcessorTime", "TotalProcessorTime");
		СортированныйСписок1.Добавить("UserProcessorTime", "UserProcessorTime");
		СортированныйСписок1.Добавить("VirtualMemorySize", "VirtualMemorySize");
		СортированныйСписок1.Добавить("VirtualMemorySize64", "VirtualMemorySize64");
		СортированныйСписок1.Добавить("WorkingSet", "WorkingSet");
		СортированныйСписок1.Добавить("WorkingSet64", "WorkingSet64");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ProgressBar" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ProgressBar" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MarqueeAnimationSpeed", "MarqueeAnimationSpeed");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("Step", "Step");
		СортированныйСписок1.Добавить("Style", "Style");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "PropertyGrid" Тогда
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("GridItems", "GridItems");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("PropertySort", "PropertySort");
		СортированныйСписок1.Добавить("PropertyValueChanged", "PropertyValueChanged");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("SelectedGridItem", "SelectedGridItem");
		СортированныйСписок1.Добавить("SelectedGridItemChanged", "SelectedGridItemChanged");
		СортированныйСписок1.Добавить("SelectedObject", "SelectedObject");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("ToolbarVisible", "ToolbarVisible");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.PropertyGrid" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScaleDimensions", "AutoScaleDimensions");
		СортированныйСписок1.Добавить("AutoScaleMode", "AutoScaleMode");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("AutoScrollMinSize", "AutoScrollMinSize");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoScrollPosition", "AutoScrollPosition");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoValidate", "AutoValidate");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("BrowsableAttributes", "BrowsableAttributes");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("CanShowCommands", "CanShowCommands");
		СортированныйСписок1.Добавить("CanShowVisualStyleGlyphs", "CanShowVisualStyleGlyphs");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CategoryForeColor", "CategoryForeColor");
		СортированныйСписок1.Добавить("CategorySplitterColor", "CategorySplitterColor");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CommandsActiveLinkColor", "CommandsActiveLinkColor");
		СортированныйСписок1.Добавить("CommandsBackColor", "CommandsBackColor");
		СортированныйСписок1.Добавить("CommandsBorderColor", "CommandsBorderColor");
		СортированныйСписок1.Добавить("CommandsDisabledLinkColor", "CommandsDisabledLinkColor");
		СортированныйСписок1.Добавить("CommandsForeColor", "CommandsForeColor");
		СортированныйСписок1.Добавить("CommandsLinkColor", "CommandsLinkColor");
		СортированныйСписок1.Добавить("CommandsVisible", "CommandsVisible");
		СортированныйСписок1.Добавить("CommandsVisibleIfAvailable", "CommandsVisibleIfAvailable");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuDefaultLocation", "ContextMenuDefaultLocation");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("CurrentAutoScaleDimensions", "CurrentAutoScaleDimensions");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisabledItemForeColor", "DisabledItemForeColor");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HelpBackColor", "HelpBackColor");
		СортированныйСписок1.Добавить("HelpBorderColor", "HelpBorderColor");
		СортированныйСписок1.Добавить("HelpForeColor", "HelpForeColor");
		СортированныйСписок1.Добавить("HelpVisible", "HelpVisible");
		СортированныйСписок1.Добавить("HorizontalScroll", "HorizontalScroll");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LargeButtons", "LargeButtons");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LineColor", "LineColor");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ParentForm", "ParentForm");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("PropertySort", "PropertySort");
		СортированныйСписок1.Добавить("PropertyTabs", "PropertyTabs");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("SelectedGridItem", "SelectedGridItem");
		СортированныйСписок1.Добавить("SelectedItemWithFocusBackColor", "SelectedItemWithFocusBackColor");
		СортированныйСписок1.Добавить("SelectedItemWithFocusForeColor", "SelectedItemWithFocusForeColor");
		СортированныйСписок1.Добавить("SelectedObject", "SelectedObject");
		СортированныйСписок1.Добавить("SelectedObjects", "SelectedObjects");
		СортированныйСписок1.Добавить("SelectedTab", "SelectedTab");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("ToolbarVisible", "ToolbarVisible");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("VerticalScroll", "VerticalScroll");
		СортированныйСписок1.Добавить("ViewBackColor", "ViewBackColor");
		СортированныйСписок1.Добавить("ViewBorderColor", "ViewBorderColor");
		СортированныйСписок1.Добавить("ViewForeColor", "ViewForeColor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "RadioButton" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoCheck", "AutoCheck");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CheckAlign", "CheckAlign");
		СортированныйСписок1.Добавить("CheckChanged", "CheckChanged");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.RadioButton" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoCheck", "AutoCheck");
		СортированныйСписок1.Добавить("AutoEllipsis", "AutoEllipsis");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("CheckAlign", "CheckAlign");
		СортированныйСписок1.Добавить("Checked", "Checked");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("FlatAppearance", "FlatAppearance");
		СортированныйСписок1.Добавить("FlatStyle", "FlatStyle");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("Image", "Image");
		СортированныйСписок1.Добавить("ImageAlign", "ImageAlign");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextImageRelation", "TextImageRelation");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseCompatibleTextRendering", "UseCompatibleTextRendering");
		СортированныйСписок1.Добавить("UseMnemonic", "UseMnemonic");
		СортированныйСписок1.Добавить("UseVisualStyleBackColor", "UseVisualStyleBackColor");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "RichTextBox" Тогда
		СортированныйСписок1.Добавить("AcceptsTab", "AcceptsTab");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoWordSelection", "AutoWordSelection");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("BulletIndent", "BulletIndent");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanRedo", "CanRedo");
		СортированныйСписок1.Добавить("CanUndo", "CanUndo");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DetectUrls", "DetectUrls");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LinkClicked", "LinkClicked");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MaxLength", "MaxLength");
		СортированныйСписок1.Добавить("Modified", "Modified");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Multiline", "Multiline");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightMargin", "RightMargin");
		СортированныйСписок1.Добавить("Rtf", "Rtf");
		СортированныйСписок1.Добавить("ScrollBars", "ScrollBars");
		СортированныйСписок1.Добавить("SelectedText", "SelectedText");
		СортированныйСписок1.Добавить("SelectionChanged", "SelectionChanged");
		СортированныйСписок1.Добавить("SelectionColor", "SelectionColor");
		СортированныйСписок1.Добавить("SelectionFont", "SelectionFont");
		СортированныйСписок1.Добавить("SelectionIndent", "SelectionIndent");
		СортированныйСписок1.Добавить("SelectionLength", "SelectionLength");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("TextLength", "TextLength");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WordWrap", "WordWrap");
		СортированныйСписок1.Добавить("ZoomFactor", "ZoomFactor");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.RichTextBox" Тогда
		СортированныйСписок1.Добавить("AcceptsTab", "AcceptsTab");
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoWordSelection", "AutoWordSelection");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("BulletIndent", "BulletIndent");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanRedo", "CanRedo");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("CanUndo", "CanUndo");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DetectUrls", "DetectUrls");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("EnableAutoDragDrop", "EnableAutoDragDrop");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LanguageOption", "LanguageOption");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Lines", "Lines");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MaxLength", "MaxLength");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Modified", "Modified");
		СортированныйСписок1.Добавить("Multiline", "Multiline");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("RedoActionName", "RedoActionName");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("RichTextShortcutsEnabled", "RichTextShortcutsEnabled");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightMargin", "RightMargin");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Rtf", "Rtf");
		СортированныйСписок1.Добавить("ScrollBars", "ScrollBars");
		СортированныйСписок1.Добавить("SelectedRtf", "SelectedRtf");
		СортированныйСписок1.Добавить("SelectedText", "SelectedText");
		СортированныйСписок1.Добавить("SelectionAlignment", "SelectionAlignment");
		СортированныйСписок1.Добавить("SelectionBackColor", "SelectionBackColor");
		СортированныйСписок1.Добавить("SelectionBullet", "SelectionBullet");
		СортированныйСписок1.Добавить("SelectionCharOffset", "SelectionCharOffset");
		СортированныйСписок1.Добавить("SelectionColor", "SelectionColor");
		СортированныйСписок1.Добавить("SelectionFont", "SelectionFont");
		СортированныйСписок1.Добавить("SelectionHangingIndent", "SelectionHangingIndent");
		СортированныйСписок1.Добавить("SelectionIndent", "SelectionIndent");
		СортированныйСписок1.Добавить("SelectionLength", "SelectionLength");
		СортированныйСписок1.Добавить("SelectionProtected", "SelectionProtected");
		СортированныйСписок1.Добавить("SelectionRightIndent", "SelectionRightIndent");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("SelectionTabs", "SelectionTabs");
		СортированныйСписок1.Добавить("SelectionType", "SelectionType");
		СортированныйСписок1.Добавить("ShortcutsEnabled", "ShortcutsEnabled");
		СортированныйСписок1.Добавить("ShowSelectionMargin", "ShowSelectionMargin");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextLength", "TextLength");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UndoActionName", "UndoActionName");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
		СортированныйСписок1.Добавить("WordWrap", "WordWrap");
		СортированныйСписок1.Добавить("ZoomFactor", "ZoomFactor");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "SaveFileDialog" Тогда
		СортированныйСписок1.Добавить("AddExtension", "AddExtension");
		СортированныйСписок1.Добавить("CheckFileExists", "CheckFileExists");
		СортированныйСписок1.Добавить("CheckPathExists", "CheckPathExists");
		СортированныйСписок1.Добавить("CreatePrompt", "CreatePrompt");
		СортированныйСписок1.Добавить("DefaultExt", "DefaultExt");
		СортированныйСписок1.Добавить("DereferenceLinks", "DereferenceLinks");
		СортированныйСписок1.Добавить("FileName", "FileName");
		СортированныйСписок1.Добавить("Filter", "Filter");
		СортированныйСписок1.Добавить("FilterIndex", "FilterIndex");
		СортированныйСписок1.Добавить("InitialDirectory", "InitialDirectory");
		СортированныйСписок1.Добавить("OverwritePrompt", "OverwritePrompt");
		СортированныйСписок1.Добавить("RestoreDirectory", "RestoreDirectory");
		СортированныйСписок1.Добавить("Title", "Title");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.SaveFileDialog" Тогда
		СортированныйСписок1.Добавить("AddExtension", "AddExtension");
		СортированныйСписок1.Добавить("AutoUpgradeEnabled", "AutoUpgradeEnabled");
		СортированныйСписок1.Добавить("CheckFileExists", "CheckFileExists");
		СортированныйСписок1.Добавить("CheckPathExists", "CheckPathExists");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("CreatePrompt", "CreatePrompt");
		СортированныйСписок1.Добавить("CustomPlaces", "CustomPlaces");
		СортированныйСписок1.Добавить("DefaultExt", "DefaultExt");
		СортированныйСписок1.Добавить("DereferenceLinks", "DereferenceLinks");
		СортированныйСписок1.Добавить("FileName", "FileName");
		СортированныйСписок1.Добавить("FileNames", "FileNames");
		СортированныйСписок1.Добавить("Filter", "Filter");
		СортированныйСписок1.Добавить("FilterIndex", "FilterIndex");
		СортированныйСписок1.Добавить("InitialDirectory", "InitialDirectory");
		СортированныйСписок1.Добавить("OverwritePrompt", "OverwritePrompt");
		СортированныйСписок1.Добавить("RestoreDirectory", "RestoreDirectory");
		СортированныйСписок1.Добавить("ShowHelp", "ShowHelp");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("SupportMultiDottedExtensions", "SupportMultiDottedExtensions");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Title", "Title");
		СортированныйСписок1.Добавить("ValidateNames", "ValidateNames");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Splitter" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MinExtra", "MinExtra");
		СортированныйСписок1.Добавить("MinSize", "MinSize");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SplitPosition", "SplitPosition");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.Splitter" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinExtra", "MinExtra");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("MinSize", "MinSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SplitPosition", "SplitPosition");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "StatusBar" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Panels", "Panels");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("ShowPanels", "ShowPanels");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SizingGrip", "SizingGrip");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.StatusBar" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Panels", "Panels");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("ShowPanels", "ShowPanels");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizingGrip", "SizingGrip");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "TabControl" Тогда
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ItemSize", "ItemSize");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Multiline", "Multiline");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("SelectedIndex", "SelectedIndex");
		СортированныйСписок1.Добавить("SelectedIndexChanged", "SelectedIndexChanged");
		СортированныйСписок1.Добавить("SelectedTab", "SelectedTab");
		СортированныйСписок1.Добавить("ShowToolTips", "ShowToolTips");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SizeMode", "SizeMode");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabPages", "TabPages");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.TabControl" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("Alignment", "Alignment");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DrawMode", "DrawMode");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HotTrack", "HotTrack");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("ItemSize", "ItemSize");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Multiline", "Multiline");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("RowCount", "RowCount");
		СортированныйСписок1.Добавить("SelectedIndex", "SelectedIndex");
		СортированныйСписок1.Добавить("SelectedTab", "SelectedTab");
		СортированныйСписок1.Добавить("ShowToolTips", "ShowToolTips");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeMode", "SizeMode");
		СортированныйСписок1.Добавить("TabCount", "TabCount");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabPages", "TabPages");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "TextBox" Тогда
		СортированныйСписок1.Добавить("AcceptsReturn", "AcceptsReturn");
		СортированныйСписок1.Добавить("AcceptsTab", "AcceptsTab");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanUndo", "CanUndo");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CharacterCasing", "CharacterCasing");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MaxLength", "MaxLength");
		СортированныйСписок1.Добавить("Modified", "Modified");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Multiline", "Multiline");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PasswordChar", "PasswordChar");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("ScrollBars", "ScrollBars");
		СортированныйСписок1.Добавить("SelectedText", "SelectedText");
		СортированныйСписок1.Добавить("SelectionLength", "SelectionLength");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("TextLength", "TextLength");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WordWrap", "WordWrap");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.TextBox" Тогда
		СортированныйСписок1.Добавить("AcceptsReturn", "AcceptsReturn");
		СортированныйСписок1.Добавить("AcceptsTab", "AcceptsTab");
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoCompleteCustomSource", "AutoCompleteCustomSource");
		СортированныйСписок1.Добавить("AutoCompleteMode", "AutoCompleteMode");
		СортированныйСписок1.Добавить("AutoCompleteSource", "AutoCompleteSource");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("CanUndo", "CanUndo");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("CharacterCasing", "CharacterCasing");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Lines", "Lines");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MaxLength", "MaxLength");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Modified", "Modified");
		СортированныйСписок1.Добавить("Multiline", "Multiline");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PasswordChar", "PasswordChar");
		СортированныйСписок1.Добавить("PreferredHeight", "PreferredHeight");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("ReadOnly", "ReadOnly");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("ScrollBars", "ScrollBars");
		СортированныйСписок1.Добавить("SelectedText", "SelectedText");
		СортированныйСписок1.Добавить("SelectionLength", "SelectionLength");
		СортированныйСписок1.Добавить("SelectionStart", "SelectionStart");
		СортированныйСписок1.Добавить("ShortcutsEnabled", "ShortcutsEnabled");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextLength", "TextLength");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseSystemPasswordChar", "UseSystemPasswordChar");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
		СортированныйСписок1.Добавить("WordWrap", "WordWrap");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "Timer" Тогда
		СортированныйСписок1.Добавить("Interval", "Interval");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Tick", "Tick");
		СортированныйСписок1.Добавить("Type", "Type");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.Timer" Тогда
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Interval", "Interval");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Tag", "Tag");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolBar" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("ButtonClick", "ButtonClick");
		СортированныйСписок1.Добавить("Buttons", "Buttons");
		СортированныйСписок1.Добавить("ButtonSize", "ButtonSize");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Divider", "Divider");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("DropDownArrows", "DropDownArrows");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImageSize", "ImageSize");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("ShowToolTips", "ShowToolTips");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("Wrappable", "Wrappable");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ToolBar" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("Appearance", "Appearance");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("Buttons", "Buttons");
		СортированныйСписок1.Добавить("ButtonSize", "ButtonSize");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Divider", "Divider");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DropDownArrows", "DropDownArrows");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImageSize", "ImageSize");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("ShowToolTips", "ShowToolTips");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextAlign", "TextAlign");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
		СортированныйСписок1.Добавить("Wrappable", "Wrappable");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "ToolTip" Тогда
		СортированныйСписок1.Добавить("Active", "Active");
		СортированныйСписок1.Добавить("AutomaticDelay", "AutomaticDelay");
		СортированныйСписок1.Добавить("AutoPopDelay", "AutoPopDelay");
		СортированныйСписок1.Добавить("InitialDelay", "InitialDelay");
		СортированныйСписок1.Добавить("ReshowDelay", "ReshowDelay");
		СортированныйСписок1.Добавить("ShowAlways", "ShowAlways");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.ToolTip" Тогда
		СортированныйСписок1.Добавить("Active", "Active");
		СортированныйСписок1.Добавить("AutomaticDelay", "AutomaticDelay");
		СортированныйСписок1.Добавить("AutoPopDelay", "AutoPopDelay");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("InitialDelay", "InitialDelay");
		СортированныйСписок1.Добавить("IsBalloon", "IsBalloon");
		СортированныйСписок1.Добавить("OwnerDraw", "OwnerDraw");
		СортированныйСписок1.Добавить("ReshowDelay", "ReshowDelay");
		СортированныйСписок1.Добавить("ShowAlways", "ShowAlways");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("StripAmpersands", "StripAmpersands");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("ToolTipIcon", "ToolTipIcon");
		СортированныйСписок1.Добавить("ToolTipTitle", "ToolTipTitle");
		СортированныйСписок1.Добавить("UseAnimation", "UseAnimation");
		СортированныйСписок1.Добавить("UseFading", "UseFading");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "TreeView" Тогда
		СортированныйСписок1.Добавить("AfterLabelEdit", "AfterLabelEdit");
		СортированныйСписок1.Добавить("AfterSelect", "AfterSelect");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BeforeExpand", "BeforeExpand");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CheckBoxes", "CheckBoxes");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FullRowSelect", "FullRowSelect");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("HotTracking", "HotTracking");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("Indent", "Indent");
		СортированныйСписок1.Добавить("ItemHeight", "ItemHeight");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("LabelEdit", "LabelEdit");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Nodes", "Nodes");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PathSeparator", "PathSeparator");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Scrollable", "Scrollable");
		СортированныйСписок1.Добавить("SelectedImageIndex", "SelectedImageIndex");
		СортированныйСписок1.Добавить("SelectedNode", "SelectedNode");
		СортированныйСписок1.Добавить("ShowLines", "ShowLines");
		СортированныйСписок1.Добавить("ShowPlusMinus", "ShowPlusMinus");
		СортированныйСписок1.Добавить("ShowRootLines", "ShowRootLines");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("Sorted", "Sorted");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.TreeView" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("CheckBoxes", "CheckBoxes");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DrawMode", "DrawMode");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("FullRowSelect", "FullRowSelect");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HideSelection", "HideSelection");
		СортированныйСписок1.Добавить("HotTracking", "HotTracking");
		СортированныйСписок1.Добавить("ImageIndex", "ImageIndex");
		СортированныйСписок1.Добавить("ImageKey", "ImageKey");
		СортированныйСписок1.Добавить("ImageList", "ImageList");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("Indent", "Indent");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("ItemHeight", "ItemHeight");
		СортированныйСписок1.Добавить("LabelEdit", "LabelEdit");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("LineColor", "LineColor");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Nodes", "Nodes");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PathSeparator", "PathSeparator");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("RightToLeftLayout", "RightToLeftLayout");
		СортированныйСписок1.Добавить("Scrollable", "Scrollable");
		СортированныйСписок1.Добавить("SelectedImageIndex", "SelectedImageIndex");
		СортированныйСписок1.Добавить("SelectedImageKey", "SelectedImageKey");
		СортированныйСписок1.Добавить("SelectedNode", "SelectedNode");
		СортированныйСписок1.Добавить("ShowLines", "ShowLines");
		СортированныйСписок1.Добавить("ShowNodeToolTips", "ShowNodeToolTips");
		СортированныйСписок1.Добавить("ShowPlusMinus", "ShowPlusMinus");
		СортированныйСписок1.Добавить("ShowRootLines", "ShowRootLines");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("Sorted", "Sorted");
		СортированныйСписок1.Добавить("StateImageList", "StateImageList");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("TopNode", "TopNode");
		СортированныйСписок1.Добавить("TreeViewNodeSorter", "TreeViewNodeSorter");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("VisibleCount", "VisibleCount");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "UserControl" Тогда
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.UserControl" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("ActiveControl", "ActiveControl");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScaleDimensions", "AutoScaleDimensions");
		СортированныйСписок1.Добавить("AutoScaleMode", "AutoScaleMode");
		СортированныйСписок1.Добавить("AutoScroll", "AutoScroll");
		СортированныйСписок1.Добавить("AutoScrollMargin", "AutoScrollMargin");
		СортированныйСписок1.Добавить("AutoScrollMinSize", "AutoScrollMinSize");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoScrollPosition", "AutoScrollPosition");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("AutoSizeMode", "AutoSizeMode");
		СортированныйСписок1.Добавить("AutoValidate", "AutoValidate");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("BorderStyle", "BorderStyle");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("CurrentAutoScaleDimensions", "CurrentAutoScaleDimensions");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DockPadding", "DockPadding");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("HorizontalScroll", "HorizontalScroll");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ParentForm", "ParentForm");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("VerticalScroll", "VerticalScroll");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "VScrollBar" Тогда
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("Click", "Click");
		СортированныйСписок1.Добавить("ClientHeight", "ClientHeight");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("ClientWidth", "ClientWidth");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ControlAdded", "ControlAdded");
		СортированныйСписок1.Добавить("ControlRemoved", "ControlRemoved");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("DoubleClick", "DoubleClick");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Enter", "Enter");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("FontBold", "FontBold");
		СортированныйСписок1.Добавить("FontHeight", "FontHeight");
		СортированныйСписок1.Добавить("FontName", "FontName");
		СортированныйСписок1.Добавить("FontSize", "FontSize");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("KeyDown", "KeyDown");
		СортированныйСписок1.Добавить("KeyPress", "KeyPress");
		СортированныйСписок1.Добавить("KeyUp", "KeyUp");
		СортированныйСписок1.Добавить("LargeChange", "LargeChange");
		СортированныйСписок1.Добавить("Leave", "Leave");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("LocationChanged", "LocationChanged");
		СортированныйСписок1.Добавить("LostFocus", "LostFocus");
		СортированныйСписок1.Добавить("ManagedProperties", "ManagedProperties");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MouseButtons", "MouseButtons");
		СортированныйСписок1.Добавить("MouseDown", "MouseDown");
		СортированныйСписок1.Добавить("MouseEnter", "MouseEnter");
		СортированныйСписок1.Добавить("MouseHover", "MouseHover");
		СортированныйСписок1.Добавить("MouseLeave", "MouseLeave");
		СортированныйСписок1.Добавить("MouseMove", "MouseMove");
		СортированныйСписок1.Добавить("MousePosition", "MousePosition");
		СортированныйСписок1.Добавить("MouseUp", "MouseUp");
		СортированныйСписок1.Добавить("Move", "Move");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Paint", "Paint");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("Scroll", "Scroll");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SizeChanged", "SizeChanged");
		СортированныйСписок1.Добавить("SmallChange", "SmallChange");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("TextChanged", "TextChanged");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("Type", "Type");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("ValueChanged", "ValueChanged");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
	ИначеЕсли ИмяКонтекстКлассаАнгл = "System.Windows.Forms.VScrollBar" Тогда
		СортированныйСписок1.Добавить("AccessibilityObject", "AccessibilityObject");
		СортированныйСписок1.Добавить("AccessibleDefaultActionDescription", "AccessibleDefaultActionDescription");
		СортированныйСписок1.Добавить("AccessibleDescription", "AccessibleDescription");
		СортированныйСписок1.Добавить("AccessibleName", "AccessibleName");
		СортированныйСписок1.Добавить("AccessibleRole", "AccessibleRole");
		СортированныйСписок1.Добавить("AllowDrop", "AllowDrop");
		СортированныйСписок1.Добавить("Anchor", "Anchor");
		СортированныйСписок1.Добавить("AutoScrollOffset", "AutoScrollOffset");
		СортированныйСписок1.Добавить("AutoSize", "AutoSize");
		СортированныйСписок1.Добавить("BackColor", "BackColor");
		СортированныйСписок1.Добавить("BackgroundImage", "BackgroundImage");
		СортированныйСписок1.Добавить("BackgroundImageLayout", "BackgroundImageLayout");
		СортированныйСписок1.Добавить("BindingContext", "BindingContext");
		СортированныйСписок1.Добавить("Bottom", "Bottom");
		СортированныйСписок1.Добавить("Bounds", "Bounds");
		СортированныйСписок1.Добавить("CanFocus", "CanFocus");
		СортированныйСписок1.Добавить("CanSelect", "CanSelect");
		СортированныйСписок1.Добавить("Capture", "Capture");
		СортированныйСписок1.Добавить("CausesValidation", "CausesValidation");
		СортированныйСписок1.Добавить("ClientRectangle", "ClientRectangle");
		СортированныйСписок1.Добавить("ClientSize", "ClientSize");
		СортированныйСписок1.Добавить("CompanyName", "CompanyName");
		СортированныйСписок1.Добавить("Container", "Container");
		СортированныйСписок1.Добавить("ContainsFocus", "ContainsFocus");
		СортированныйСписок1.Добавить("ContextMenu", "ContextMenu");
		СортированныйСписок1.Добавить("ContextMenuStrip", "ContextMenuStrip");
		СортированныйСписок1.Добавить("Controls", "Controls");
		СортированныйСписок1.Добавить("Created", "Created");
		СортированныйСписок1.Добавить("Cursor", "Cursor");
		СортированныйСписок1.Добавить("DataBindings", "DataBindings");
		СортированныйСписок1.Добавить("DeviceDpi", "DeviceDpi");
		СортированныйСписок1.Добавить("DisplayRectangle", "DisplayRectangle");
		СортированныйСписок1.Добавить("Disposing", "Disposing");
		СортированныйСписок1.Добавить("Dock", "Dock");
		СортированныйСписок1.Добавить("Enabled", "Enabled");
		СортированныйСписок1.Добавить("Focused", "Focused");
		СортированныйСписок1.Добавить("Font", "Font");
		СортированныйСписок1.Добавить("ForeColor", "ForeColor");
		СортированныйСписок1.Добавить("Handle", "Handle");
		СортированныйСписок1.Добавить("HasChildren", "HasChildren");
		СортированныйСписок1.Добавить("Height", "Height");
		СортированныйСписок1.Добавить("ImeMode", "ImeMode");
		СортированныйСписок1.Добавить("InvokeRequired", "InvokeRequired");
		СортированныйСписок1.Добавить("IsAccessible", "IsAccessible");
		СортированныйСписок1.Добавить("IsDisposed", "IsDisposed");
		СортированныйСписок1.Добавить("IsHandleCreated", "IsHandleCreated");
		СортированныйСписок1.Добавить("IsMirrored", "IsMirrored");
		СортированныйСписок1.Добавить("LargeChange", "LargeChange");
		СортированныйСписок1.Добавить("LayoutEngine", "LayoutEngine");
		СортированныйСписок1.Добавить("Left", "Left");
		СортированныйСписок1.Добавить("Location", "Location");
		СортированныйСписок1.Добавить("Margin", "Margin");
		СортированныйСписок1.Добавить("Maximum", "Maximum");
		СортированныйСписок1.Добавить("MaximumSize", "MaximumSize");
		СортированныйСписок1.Добавить("Minimum", "Minimum");
		СортированныйСписок1.Добавить("MinimumSize", "MinimumSize");
		СортированныйСписок1.Добавить("Name", "Name");
		СортированныйСписок1.Добавить("Padding", "Padding");
		СортированныйСписок1.Добавить("Parent", "Parent");
		СортированныйСписок1.Добавить("PreferredSize", "PreferredSize");
		СортированныйСписок1.Добавить("ProductName", "ProductName");
		СортированныйСписок1.Добавить("ProductVersion", "ProductVersion");
		СортированныйСписок1.Добавить("RecreatingHandle", "RecreatingHandle");
		СортированныйСписок1.Добавить("Region", "Region");
		СортированныйСписок1.Добавить("Right", "Right");
		СортированныйСписок1.Добавить("RightToLeft", "RightToLeft");
		СортированныйСписок1.Добавить("ScaleScrollBarForDpiChange", "ScaleScrollBarForDpiChange");
		СортированныйСписок1.Добавить("Site", "Site");
		СортированныйСписок1.Добавить("Size", "Size");
		СортированныйСписок1.Добавить("SmallChange", "SmallChange");
		СортированныйСписок1.Добавить("TabIndex", "TabIndex");
		СортированныйСписок1.Добавить("TabStop", "TabStop");
		СортированныйСписок1.Добавить("Tag", "Tag");
		СортированныйСписок1.Добавить("Text", "Text");
		СортированныйСписок1.Добавить("Top", "Top");
		СортированныйСписок1.Добавить("TopLevelControl", "TopLevelControl");
		СортированныйСписок1.Добавить("UseWaitCursor", "UseWaitCursor");
		СортированныйСписок1.Добавить("Value", "Value");
		СортированныйСписок1.Добавить("Visible", "Visible");
		СортированныйСписок1.Добавить("Width", "Width");
		СортированныйСписок1.Добавить("WindowTarget", "WindowTarget");
	КонецЕсли;
	
	Возврат СортированныйСписок1;
КонецФункции//СвойстваКласса(ИмяКонтекстКлассаАнгл)

Функция ДанныеДляДизайнера(КлассАнгл, СвойствоАнгл)
	Стр1 = "";
	Если КлассАнгл = "System.Windows.Forms.MainMenu" и СвойствоАнгл = "MenuItems" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBarPanel" и СвойствоАнгл = "AutoSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBarPanel" и СвойствоАнгл = "Icon" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBarPanel" и СвойствоАнгл = "MinWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBarPanel" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBarPanel" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBarPanel" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem.ListViewSubItem" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem.ListViewSubItem" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem.ListViewSubItem" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem.ListViewSubItem" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Selected" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Index" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "UseItemStyleForSubItems" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "SubItems" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Checked" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListViewItem" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ColumnHeader" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ColumnHeader" и СвойствоАнгл = "Index" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ColumnHeader" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ColumnHeader" и СвойствоАнгл = "SortType" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ColumnHeader" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTextBoxColumn" и СвойствоАнгл = "Alignment" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTextBoxColumn" и СвойствоАнгл = "MappingName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTextBoxColumn" и СвойствоАнгл = "TextBox" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTextBoxColumn" и СвойствоАнгл = "HeaderText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTextBoxColumn" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTextBoxColumn" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridBoolColumn" и СвойствоАнгл = "Alignment" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridBoolColumn" и СвойствоАнгл = "MappingName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridBoolColumn" и СвойствоАнгл = "HeaderText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridBoolColumn" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridBoolColumn" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "MappingName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "HeaderForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "ColumnHeadersVisible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "RowHeadersVisible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "PreferredRowHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "PreferredColumnWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "AllowSorting" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "DataGrid" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "GridColumnStyles" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "GridLineColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "HeaderBackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "AlternatingBackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "RowHeaderWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGridTableStyle" и СвойствоАнгл = "HeaderFont" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "DropDownMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "Pushed" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "PartialPush" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "Rectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "Style" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBarButton" и СвойствоАнгл = "ToolTipText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "AutoScroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "DockPadding" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "AutoScrollMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ToolTipText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabPage" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";	
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ImageList" и СвойствоАнгл = "ColorDepth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ImageList" и СвойствоАнгл = "Images" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ImageList" и СвойствоАнгл = "ImageSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";		
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ImageAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Image" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "FlatStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "DialogResult" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Button" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "AutoCheck" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ImageAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "CheckAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Image" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Appearance" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "FlatStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "CheckChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Checked" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "CheckState" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.CheckBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ColorDialog" и СвойствоАнгл = "Color" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "SelectedText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ItemHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "SelectionLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ValueMember" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "SelectedIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "SelectedIndexChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MaxLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MaxDropDownItems" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "SelectionStart" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DisplayMember" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Sorted" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "IntegralHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Items" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "PreferredHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DropDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DroppedDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DrawMode" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DropDownStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "DropDownWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ComboBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CurrentRowIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CaptionVisible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Показать~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "PreferredRowHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "AllowSorting" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "TableStyles" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CaptionText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CurrentCell" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CurrentCellChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "CaptionBackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "BackgroundColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Цвета~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "DataMember" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DataGrid" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "DropDownAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Value" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ValueChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MaxDate" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MinDate" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ShowUpDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ShowCheckBox" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "CustomFormat" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "PreferredHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "PreferredSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Format" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.DateTimePicker" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "IncludeSubDirectories" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "EnableRaisingEvents" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "Changed" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "Renamed" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "Created" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "Deleted" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "Path" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "InternalBufferSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "Filter" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.IO.FileSystemWatcher" и СвойствоАнгл = "NotifyFilter" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.FolderBrowserDialog" и СвойствоАнгл = "SelectedPath" Тогда
		Стр1 = "DisplayName=~Description=~Category=Просмотр папок~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.FolderBrowserDialog" и СвойствоАнгл = "RootFolder" Тогда
		Стр1 = "DisplayName=~Description=~Category=Просмотр папок~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.FolderBrowserDialog" и СвойствоАнгл = "Description" Тогда
		Стр1 = "DisplayName=~Description=~Category=Просмотр папок~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.FolderBrowserDialog" и СвойствоАнгл = "ShowNewFolderButton" Тогда
		Стр1 = "DisplayName=~Description=~Category=Просмотр папок~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.FontDialog" и СвойствоАнгл = "Color" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.FontDialog" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "AutoScroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ActiveControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Owner" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Closed" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "DockPadding" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Icon" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "KeyPreview" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MaximizeBox" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MinimizeBox" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "CancelButton" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "AcceptButton" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MaximumSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Menu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "DesktopLocation" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MinimumSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "StartPosition" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ControlBox" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "TopMost" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ShowInTaskbar" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Activated" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Deactivate" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Load" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "FormClosing" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "TransparencyKey" Тогда
		Стр1 = "DisplayName=~Description=~Category=Стиль окна~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "AutoScaleBaseSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "AutoScrollMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "DialogResult" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "FormBorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Form" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.GroupBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "LargeChange" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Value" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ValueChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Maximum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "SmallChange" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Minimum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Scroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.HScrollBar" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "AutoSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ImageAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Image" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "PreferredHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "PreferredWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Label" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "AutoSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ImageAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Image" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LinkArea" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LinkBehavior" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "PreferredHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "PreferredWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LinkClicked" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LinkVisited" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Links" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ActiveLinkColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "VisitedLinkColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "LinkColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.LinkLabel" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Items" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";		
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ItemHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "HorizontalExtent" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "HorizontalScrollbar" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ValueMember" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "TopIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "SelectedIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "SelectedIndexChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "UseTabStops" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MultiColumn" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "DisplayMember" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Sorted" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "IntegralHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ScrollAlwaysVisible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "SelectionMode" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ColumnWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "AutoArrange" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Activation" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "FullRowSelect" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "HoverSelection" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Alignment" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "SelectedIndexChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ColumnClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Columns" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MultiSelect" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "BeforeLabelEdit" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "LabelWrap" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "AfterLabelEdit" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ItemActivate" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Scrollable" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "AllowColumnReorder" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "AllowSorting" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "LabelEdit" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "View" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "GridLines" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "HideSelection" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Sorting" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "LargeImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "SmallImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "HeaderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "FocusedItem" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "CheckBoxes" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ItemCheck" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Items" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ListView" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "BoldedDates" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "SelectionRange" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "DateSelected" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "DateChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "AnnuallyBoldedDates" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MonthlyBoldedDates" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "SelectionEnd" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MaxDate" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MaxSelectionCount" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MinDate" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "SelectionStart" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ShowTodayCircle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "FirstDayOfWeek" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ShowToday" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "PreferredSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "TodayDate" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.MonthCalendar" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "Icon" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NotifyIcon" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "AutoScroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ActiveControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "DockPadding" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Value" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ValueChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Maximum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Minimum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "AutoScrollMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "DecimalPlaces" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Increment" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.NumericUpDown" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "RestoreDirectory" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "AddExtension" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "Title" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "FileName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "FilterIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "InitialDirectory" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "ShowReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "ReadOnlyChecked" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "CheckPathExists" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "CheckFileExists" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "DereferenceLinks" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "DefaultExt" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.OpenFileDialog" и СвойствоАнгл = "Filter" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "AutoScroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "DockPadding" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "AutoScrollMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Panel" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Image" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "BackgroundImageLayout" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "SizeMode" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PictureBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Diagnostics.Process" и СвойствоАнгл = "HasExited" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Value" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Maximum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Minimum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ProgressBar" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "AutoScroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ActiveControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "SelectedObject" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";		
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "SelectedGridItem" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "SelectedGridItemChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "DockPadding" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "PropertyValueChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ToolbarVisible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "AutoScrollMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "PropertySort" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.PropertyGrid" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "AutoCheck" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ImageAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "CheckAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Image" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Appearance" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "FlatStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "CheckChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Checked" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RadioButton" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Rtf" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "AutoWordSelection" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "AutoSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectionChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectedText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectionLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "TextLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MaxLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ZoomFactor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Multiline" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Modified" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "CanRedo" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "CanUndo" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectionStart" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "DetectUrls" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectionIndent" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "BulletIndent" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "WordWrap" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ScrollBars" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "RightMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "PreferredHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "AcceptsTab" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "HideSelection" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "LinkClicked" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectionColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "SelectionFont" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.RichTextBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "RestoreDirectory" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "AddExtension" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "Title" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "FileName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "FilterIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "InitialDirectory" Тогда
		Стр1 = "DisplayName=~Description=~Category=Данные~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "OverwritePrompt" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "CreatePrompt" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "CheckPathExists" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "CheckFileExists" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "DereferenceLinks" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "DefaultExt" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.SaveFileDialog" и СвойствоАнгл = "Filter" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MinExtra" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MinSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "SplitPosition" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Splitter" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "SizingGrip" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Panels" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ShowPanels" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.StatusBar" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "TabPages" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "SelectedTab" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Alignment" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "SelectedIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "SelectedIndexChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Multiline" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Appearance" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ShowToolTips" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ItemSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "SizeMode" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TabControl" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "AutoSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "SelectedText" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "SelectionLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "TextLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MaxLength" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Multiline" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Modified" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "CanUndo" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "SelectionStart" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "WordWrap" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ScrollBars" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "PreferredHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "AcceptsReturn" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "AcceptsTab" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "CharacterCasing" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "PasswordChar" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "HideSelection" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ReadOnly" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TextBox" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Timer" и СвойствоАнгл = "Interval" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.Timer" и СвойствоАнгл = "Tick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "AutoSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "TextAlign" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Buttons" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Appearance" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Wrappable" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ShowToolTips" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ButtonClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Divider" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ImageSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ButtonSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "DropDownArrows" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolBar" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolTip" и СвойствоАнгл = "AutomaticDelay" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolTip" и СвойствоАнгл = "AutoPopDelay" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolTip" и СвойствоАнгл = "Active" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolTip" и СвойствоАнгл = "ReshowDelay" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolTip" и СвойствоАнгл = "InitialDelay" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.ToolTip" и СвойствоАнгл = "ShowAlways" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "FullRowSelect" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "SelectedNode" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ItemHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "HotTracking" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "SelectedImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ImageIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Sorted" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Indent" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "BeforeExpand" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ShowRootLines" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ShowLines" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ShowPlusMinus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "AfterSelect" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "AfterLabelEdit" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Scrollable" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "PathSeparator" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "LabelEdit" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "HideSelection" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ImageList" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "BorderStyle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Nodes" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "CheckBoxes" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.TreeView" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "AutoScroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ActiveControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "DockPadding" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "AutoScrollMargin" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.UserControl" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "LargeChange" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ProductVersion" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Top" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Height" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Bounds" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "DoubleClick" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Enabled" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "FontBold" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Capture" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Value" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ValueChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Name" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ProductName" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "FontName" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "UseWaitCursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "KeyUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "KeyDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "KeyPress" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ClientHeight" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ClientRectangle" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ClientSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ClientWidth" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ContextMenu" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Cursor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Left" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Maximum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "SmallChange" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Minimum" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "MouseEnter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "MouseLeave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Click" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Bottom" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ForeColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Visible" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Location" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "LocationChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "TabIndex" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Right" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Enter" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "MouseHover" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "MouseDown" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "MouseUp" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Move" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "MouseMove" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Paint" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "LostFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Scroll" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Leave" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Size" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "SizeChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "FontSize" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Dock" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Focused" Тогда
		Стр1 = "DisplayName=~Description=~Category=Прочее~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "TabStop" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Text" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "TextChanged" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "CanFocus" Тогда
		Стр1 = "DisplayName=~Description=~Category=Фокус~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "BackgroundImage" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "BackColor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Width" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Font" Тогда
		Стр1 = "DisplayName=~Description=~Category=Внешний вид~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "TopLevelControl" Тогда
		Стр1 = "DisplayName=~Description=~Category=Поведение~Browsable=False~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ControlAdded" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "ControlRemoved" Тогда
		Стр1 = "DisplayName=~Description=~Category=~Browsable=Неопределено~ConverterTypeName=~AvailabilityOfTheProperty=0~";
	ИначеЕсли КлассАнгл = "System.Windows.Forms.VScrollBar" и СвойствоАнгл = "Anchor" Тогда
		Стр1 = "DisplayName=~Description=~Category=Макет~Browsable=True~ConverterTypeName=~AvailabilityOfTheProperty=1~";
	КонецЕсли;
	
	Возврат Стр1;
КонецФункции//ДанныеДляДизайнера(КлассАнгл, СвойствоАнгл)

Процедура СортировкаКода()
	Таймер = ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	ВыбранныеФайлы = НайтиФайлы("C:\444\ВыгрузкаДизайнера", "*.cs", Ложь);
	Найдено1 = 0;
	Для А = 0 По ВыбранныеФайлы.ВГраница() Цикл
		СтрДирективы = "";
		Директивы = Новый СписокЗначений;
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВыбранныеФайлы[А].ПолноеИмя);
		Стр = ТекстДок.ПолучитьТекст();
		
		// Если это перечисление, пропустим его.
		М = СтрНайтиМежду(Стр, "public enum", "}", Ложь, Ложь);
		Если М.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Сообщить("перестройка== " + ВыбранныеФайлы[А].Имя + " ========================================================================================");
		
		// отсортируем директивы
		ПодстрокаПоиска = "";
		ПодстрокаПоиска = "using" + Ф.НайтиМежду(Стр, "using", "namespace");
		ПодстрокаПоиска = СокрЛП(ПодстрокаПоиска);
		Если Не (ПодстрокаПоиска = "") Тогда
			М = СтрРазделить(ПодстрокаПоиска, Ф.Окружение().НоваяСтрока);
			Если М.Количество() > 0 Тогда
				Для А2 = 0 По М.Количество() -1 Цикл
					Директивы.Добавить(СокрЛП(М[А2]));
				КонецЦикла;
			КонецЕсли;
			Директивы.СортироватьПоЗначению();
			ПодстрокаЗамены = "";
			Для А1 = 0 По Директивы.Количество() - 1 Цикл
				Если ПодстрокаЗамены = "" Тогда
					ПодстрокаЗамены = ПодстрокаЗамены + Директивы.Получить(А1).Значение;
				Иначе
					ПодстрокаЗамены = ПодстрокаЗамены + Символы.ПС + Директивы.Получить(А1).Значение;
				КонецЕсли;
			КонецЦикла;
			// Сообщить("=======================================================================================================================");
			// Сообщить("" + ПодстрокаПоиска);
			// Сообщить("-------------------");
			// Сообщить("" + ПодстрокаЗамены);
			// Сообщить("=======================================================================================================================");
			Стр = СтрЗаменить(Стр, ПодстрокаПоиска, ПодстрокаЗамены);
		КонецЕсли;
		// директивы отсортированы
		
		ПодстрокаПоиска = "}//";
		ПодстрокаЗамены = "}";
		Стр = СтрЗаменить(Стр, ПодстрокаПоиска, ПодстрокаЗамены);
		
		//заменим две пустые строки подряд на одну пустую
		Стр50 = Стр;
		Стр = "";
		Для А1 = 1 По СтрЧислоСтрок(Стр50) - 1 Цикл
			Фрагмент1 = СокрЛП(СтрПолучитьСтроку(Стр50, А1)) + СокрЛП(СтрПолучитьСтроку(Стр50, А1 + 1));
			Если Не (Фрагмент1 = "") Тогда
				Стр = Стр + Символы.ПС + СтрПолучитьСтроку(Стр50, А1);
			КонецЕсли;
		КонецЦикла;
		Стр = Стр + Символы.ПС + СтрПолучитьСтроку(Стр50, СтрЧислоСтрок(Стр50));
		
		ТекстДок.УстановитьТекст(СокрЛП(Стр));
		ИмяДляЗаписи = ВыбранныеФайлы[А].ПолноеИмя;
		ТекстДок.Записать(ИмяДляЗаписи);
	КонецЦикла;
	
	Сообщить("Найдено " + ВыбранныеФайлы.Количество());
	Сообщить("Выполнено за: " + ((ТекущаяУниверсальнаяДатаВМиллисекундах() - Таймер)/1000)/60 + " мин.");
КонецПроцедуры//СортировкаКода()

ПодключитьВнешнююКомпоненту("C:\444\111\OneScriptForms\OneScriptForms\bin\Debug\OneScriptForms.dll");
Ф = Новый ФормыДляОдноСкрипта();

М_СписокЦветов = СтрРазделить(Ф.СвойстваОбъекта(Ф.Цвет()), Символы.ПС);

М_Событий = Новый Массив();// массив событий
М_Событий.Добавить("ВыбранныйЭлементСеткиИзменен");
М_Событий.Добавить("ВыделениеИзменено");
М_Событий.Добавить("ДатаВыбрана");
М_Событий.Добавить("ДатаИзменена");
М_Событий.Добавить("ДвойноеНажатие");
М_Событий.Добавить("Закрыта");
М_Событий.Добавить("ЗначениеИзменено");
М_Событий.Добавить("ЗначениеСвойстваИзменено");
М_Событий.Добавить("ИндексВыбранногоИзменен");
М_Событий.Добавить("ИндексВыбранногоИзменен");
М_Событий.Добавить("КлавишаВверх");
М_Событий.Добавить("КлавишаВниз");
М_Событий.Добавить("КлавишаНажата");
М_Событий.Добавить("КолонкаНажатие");
М_Событий.Добавить("МышьНадЭлементом");
М_Событий.Добавить("МышьПокинулаЭлемент");
М_Событий.Добавить("Нажатие");
М_Событий.Добавить("ПередРазвертыванием");
М_Событий.Добавить("ПередРедактированиемНадписи");
М_Событий.Добавить("ПоложениеИзменено");
М_Событий.Добавить("ПометкаИзменена");
М_Событий.Добавить("ПослеВыбора");
М_Событий.Добавить("ПослеРедактированияНадписи");
М_Событий.Добавить("ПриАктивизации");
М_Событий.Добавить("ПриАктивизацииЭлемента");
М_Событий.Добавить("ПриВходе");
М_Событий.Добавить("ПриВыпадении");
М_Событий.Добавить("ПриДеактивации");
М_Событий.Добавить("ПриЗагрузке");
М_Событий.Добавить("ПриЗадержкеМыши");
М_Событий.Добавить("ПриЗакрытии");
М_Событий.Добавить("ПриИзменении");
М_Событий.Добавить("ПриНажатииКнопки");
М_Событий.Добавить("ПриНажатииКнопкиМыши");
М_Событий.Добавить("ПриОтпусканииМыши");
М_Событий.Добавить("ПриПереименовании");
М_Событий.Добавить("ПриПеремещении");
М_Событий.Добавить("ПриПеремещенииМыши");
М_Событий.Добавить("ПриПерерисовке");
М_Событий.Добавить("ПриПотереФокуса");
М_Событий.Добавить("ПриПоявлении");
М_Событий.Добавить("ПриПрокручивании");
М_Событий.Добавить("ПриСоздании");
М_Событий.Добавить("ПриСрабатыванииТаймера");
М_Событий.Добавить("ПриУдалении");
М_Событий.Добавить("ПриУходе");
М_Событий.Добавить("РазмерИзменен");
М_Событий.Добавить("СсылкаНажата");
М_Событий.Добавить("ТекстИзменен");
М_Событий.Добавить("ТекущаяЯчейкаИзменена");
М_Событий.Добавить("ЭлементДобавлен");
М_Событий.Добавить("ЭлементПомечен");
М_Событий.Добавить("ЭлементУдален");


ВыгрузкаДляCS();//запускать перед СортировкаКода и связанно
СортировкаКода();//запускать после ВыгрузкаДляCS и связанно
